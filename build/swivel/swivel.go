// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swivel

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HashOrder is an auto generated low-level Go binding around an user-defined struct.
type HashOrder struct {
	Key        [32]byte
	Protocol   uint8
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// SigComponents is an auto generated low-level Go binding around an user-defined struct.
type SigComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelMetaData contains all meta data concerning the Swivel contract.
var SwivelMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Exception\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"S\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlockApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BlockFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlockWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Initiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleWithdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"u\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"c\",\"type\":\"address[]\"}],\"name\":\"approveUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"authRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockFeeChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components\",\"name\":\"c\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[4]\",\"name\":\"f\",\"type\":\"uint16[4]\"}],\"name\":\"changeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"combineTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feenominators\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemSwivelVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"redeemZcToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleFeeChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"splitUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b50604051620051043803806200510483398101604081905262000034916200021f565b600580546001600160a01b03191633178155604080518082018252600e81526d53776976656c2046696e616e636560901b6020808301919091528251808401909352928252640332e302e360dc1b82840152620000a1929091904690309062001ebe620000f7821b17901c565b60809081526001600160a01b0380841660a052821660c05260408051918201815260c88083526102586020840152610190918301919091526060820152620000ee9060069060046200014e565b50505062000257565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b600183019183908215620001d95791602002820160005b83821115620001a757835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000165565b8015620001d75782816101000a81549061ffff0219169055600201602081600101049283019260010302620001a7565b505b50620001e7929150620001eb565b5090565b5b80821115620001e75760008155600101620001ec565b80516001600160a01b03811681146200021a57600080fd5b919050565b600080604083850312156200023357600080fd5b6200023e8362000202565b91506200024e6020840162000202565b90509250929050565b60805160a05160c051614e06620002fe600039600081816103be015281816130d201526141840152600081816102d701528181610d2701528181611278015281816114b4015281816115f4015281816118ec01528181611a9d0152818161200301528181612546015281816128c101528181612b480152818161339d0152818161362e015281816137f90152613c0d0152600081816104b301526143470152614e066000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c806381bb8d631161012a578063b6907677116100bd578063f22c692e1161008c578063f8eaad3511610071578063f8eaad3514610518578063f9ad473d1461052b578063ffa1ad741461053357600080fd5b8063f22c692e146104f2578063f851a4401461050557600080fd5b8063b69076771461049b578063c2fb26a6146104ae578063c94cdbbd146104d5578063d0886f97146104e857600080fd5b8063a0e80554116100f9578063a0e8055414610419578063a102e3841461042c578063a3f4df7e1461043f578063b16a33cc1461048857600080fd5b806381bb8d63146103b95780638bfa66be146103e057806395cb60c4146103f3578063a0b06b501461040657600080fd5b80632fd9ee8a116101a257806352a4eec61161017157806352a4eec6146103535780635d0341ba14610366578063704b6c02146103865780637a9262a21461039957600080fd5b80632fd9ee8a1461031157806335197f9e146103245780634af606071461032d57806351cff8d91461034057600080fd5b806325dedb85116101de57806325dedb851461026e578063288cdc91146102815780632ac12622146102af5780632e25d2a6146102d257600080fd5b80630d3f53521461021057806310510f11146102305780631177ec3014610253578063172bfa941461025b575b600080fd5b610218602181565b60405161ffff90911681526020015b60405180910390f35b61024361023e36600461474b565b61056f565b6040519015158152602001610227565b610243610733565b610243610269366004614814565b6107e0565b61024361027c36600461483c565b610a88565b6102a161028f3660046148a8565b60016020526000908152604090205481565b604051908152602001610227565b6102436102bd3660046148a8565b60006020819052908152604090205460ff1681565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610227565b61024361031f3660046148fa565b610ccf565b6102a160045481565b61024361033b36600461474b565b610ecb565b61024361034e36600461493e565b611080565b6102436103613660046148fa565b611221565b6102a161037436600461493e565b60036020526000908152604090205481565b61024361039436600461493e565b61141c565b6102a16103a736600461493e565b60026020526000908152604090205481565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b6102436103ee36600461495b565b6114b0565b6102186104013660046148a8565b611575565b6102436104143660046149bd565b6115a3565b61024361042736600461493e565b611756565b61024361043a36600461493e565b6117f5565b61047b6040518060400160405280600e81526020017f53776976656c2046696e616e636500000000000000000000000000000000000081525081565b60405161022791906149fc565b6102436104963660046148fa565b611894565b6102436104a93660046149bd565b611a4c565b6102a17f000000000000000000000000000000000000000000000000000000000000000081565b6102436104e3366004614a6f565b611bb9565b6102a16203f48081565b61024361050036600461493e565b611cc9565b6005546102f9906001600160a01b031681565b61024361052636600461493e565b611d7e565b610243611e33565b61047b6040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525081565b600085815b8181101561072457600089898381811061059057610590614ad3565b905061014002018036038101906105a79190614b6c565b90508060a001516106645780608001516106125761060d8a8a848181106105d0576105d0614ad3565b905061014002018989858181106105e9576105e9614ad3565b9050602002013588888681811061060257610602614ad3565b905060600201611f15565b610711565b61060d8a8a8481811061062757610627614ad3565b9050610140020189898581811061064057610640614ad3565b9050602002013588888681811061065957610659614ad3565b905060600201612448565b80608001516106bf5761060d8a8a8481811061068257610682614ad3565b9050610140020189898581811061069b5761069b614ad3565b905060200201358888868181106106b4576106b4614ad3565b9050606002016127c0565b6107118a8a848181106106d4576106d4614ad3565b905061014002018989858181106106ed576106ed614ad3565b9050602002013588888681811061070657610706614ad3565b905060600201612a99565b508061071c81614c42565b915050610574565b50600198975050505050505050565b6005546000906001600160a01b031633811461078d57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a4015b60405180910390fd5b600061079c6203f48042614c7a565b60048190556040518181529091507ff339d7864b1b8839e8a8870c012fc6eb9a89844861a87a26ce35979018603a1b9060200160405180910390a160019250505090565b6005546000906001600160a01b031633811461083557604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b60045460000361087757604051636d4c6c8960e01b8152602360048201526000602482018190526044820181905260648201819052608482015260a401610784565b6004544210156108bd5760048054604051636d4c6c8960e01b8152602492810183905242928101929092526044820152600060648201819052608482015260a401610784565b60005b6004811015610a795760218482600481106108dd576108dd614ad3565b6020020160208101906108f09190614c92565b61ffff16101561095e57601284826004811061090e5761090e614ad3565b6020020160208101906109219190614c92565b604051636d4c6c8960e01b815260ff909216600483015261ffff16602482015260216044820152600060648201819052608482015260a401610784565b6006816004811061097157610971614ad3565b601091828204019190066002029054906101000a900461ffff1661ffff168482600481106109a1576109a1614ad3565b6020020160208101906109b49190614c92565b61ffff1614610a71578381600481106109cf576109cf614ad3565b6020020160208101906109e29190614c92565b600682600481106109f5576109f5614ad3565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550838160048110610a2c57610a2c614ad3565b602002016020810190610a3f9190614c92565b61ffff16817f91e72fa36e0202be93e86c97a3d3d3497cf0a06cf859b14b616a304367835a8e60405160405180910390a35b6001016108c0565b50506000600455506001919050565b6005546000906001600160a01b0316338114610add57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b84838114610b1d57604051636d4c6c8960e01b8152601360048201526024810182905260448101859052600060648201819052608482015260a401610784565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60005b82811015610724576000600360008b8b85818110610b6157610b61614ad3565b9050602002016020810190610b76919061493e565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905080600003610bd957604051636d4c6c8960e01b8152602660048201526000602482018190526044820181905260648201819052608482015260a401610784565b80421015610c1857604051636d4c6c8960e01b81526027600482015242602482015260448101829052600060648201819052608482015260a401610784565b6000600360008c8c86818110610c3057610c30614ad3565b9050602002016020810190610c45919061493e565b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008a8a84818110610c7d57610c7d614ad3565b9050602002016020810190610c92919061493e565b9050610cc5818a8a86818110610caa57610caa614ad3565b9050602002016020810190610cbf919061493e565b86612e67565b5050600101610b41565b6040517f87e157c100000000000000000000000000000000000000000000000000000000815260ff851660048201526001600160a01b03848116602483015260448201849052336064830152608482018390526000917f0000000000000000000000000000000000000000000000000000000000000000918216906387e157c19060a4016020604051808303816000875af1158015610d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d969190614cb6565b610dd257604051636d4c6c8960e01b8152600e60048201526000602482018190526044820181905260648201819052608482015260a401610784565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff871660048201526001600160a01b03808716602483015260448201869052610e769188918891908516906335bdafab906064016020604051808303816000875af1158015610e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e709190614cd3565b86612efc565b610eb257604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610784565b610ebd853385613207565b60019150505b949350505050565b600085815b81811015610724576000898983818110610eec57610eec614ad3565b90506101400201803603810190610f039190614b6c565b90508060a00151610fc0578060800151610f6e57610f698a8a84818110610f2c57610f2c614ad3565b90506101400201898985818110610f4557610f45614ad3565b90506020020135888886818110610f5e57610f5e614ad3565b905060600201613296565b61106d565b610f698a8a84818110610f8357610f83614ad3565b90506101400201898985818110610f9c57610f9c614ad3565b90506020020135888886818110610fb557610fb5614ad3565b90506060020161352e565b806080015161101b57610f698a8a84818110610fde57610fde614ad3565b90506101400201898985818110610ff757610ff7614ad3565b9050602002013588888681811061101057611010614ad3565b905060600201613771565b61106d8a8a8481811061103057611030614ad3565b9050610140020189898581811061104957611049614ad3565b9050602002013588888681811061106257611062614ad3565b905060600201613b85565b508061107881614c42565b915050610ed0565b6005546000906001600160a01b03163381146110d557604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b6001600160a01b0383166000908152600260205260408120549081900361112e57604051636d4c6c8960e01b8152601060048201526000602482018190526044820181905260648201819052608482015260a401610784565b8042101561116d57604051636d4c6c8960e01b81526011600482015242602482015260448101829052600060648201819052608482015260a401610784565b6001600160a01b038481166000818152600260205260408082209190915560055490517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528793611216938593909116916370a08231906024016020604051808303816000875af11580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112119190614cf0565b613207565b506001949350505050565b60008361123081333086613f9f565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff871660048201526001600160a01b038087166024830152604482018690527f0000000000000000000000000000000000000000000000000000000000000000916112f591899189918516906335bdafab906064016020604051808303816000875af11580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190614cd3565b87614039565b61133157604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610784565b6040517f01cc644800000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b03878116602483015260448201879052336064830152608482018690528216906301cc64489060a4016020604051808303816000875af11580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d39190614cb6565b61140f57604051636d4c6c8960e01b8152600d60048201526000602482018190526044820181905260648201819052608482015260a401610784565b5060019695505050505050565b6005546000906001600160a01b031633811461147157604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b600580546001600160a01b0385167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001915050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461152257604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b61152e87878786612efc565b61156a57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610784565b61140f868585613207565b6006816004811061158557600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b6040517f3a660bd800000000000000000000000000000000000000000000000000000000815260ff841660048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690633a660bd8906084016020604051808303816000875af1158015611642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116669190614cf0565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b038781166024830152604482018790529192506000918416906335bdafab906064016020604051808303816000875af11580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117019190614cd3565b905061170f87878385612efc565b61174b57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610784565b61140f863384613207565b6005546000906001600160a01b03163381146117ab57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b6001600160a01b038316600081815260036020526040808220829055517f28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec9190a250600192915050565b6005546000906001600160a01b031633811461184a57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b6001600160a01b038316600081815260026020526040808220829055517fb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d9190a250600192915050565b6040517f9f6eddc400000000000000000000000000000000000000000000000000000000815260ff851660048201526001600160a01b03848116602483015260448201849052336064830152608482018390526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690639f6eddc49060a4016020604051808303816000875af115801561193a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195e9190614cf0565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff891660048201526001600160a01b03808916602483015260448201889052919250611a0591899189918616906335bdafab906064015b6020604051808303816000875af11580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff9190614cd3565b84612efc565b611a4157604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610784565b61140f863383613207565b6040517f3a660bd800000000000000000000000000000000000000000000000000000000815260ff841660048201526001600160a01b038381166024830152604482018390523060648301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690633a660bd8906084016020604051808303816000875af1158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f9190614cf0565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b03808816602483015260448201879052919250611b7191889188918616906335bdafab906064016119bc565b611bad57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610784565b50600195945050505050565b600080611bc68484614279565b9050611bd8606085016040860161493e565b6001600160a01b0316336001600160a01b031614611c4b57600f60008033611c066060890160408a0161493e565b604051636d4c6c8960e01b815260ff9095166004860152602485019390935260448401919091526001600160a01b03908116606484015216608482015260a401610784565b6000818152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055518435907f9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a690611cb79084815260200190565b60405180910390a25060019392505050565b6005546000906001600160a01b0316338114611d1e57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b6000611d2d6203f48042614c7a565b6001600160a01b0385166000818152600360205260409081902083905551919250907f21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d1690611cb79084815260200190565b6005546000906001600160a01b0316338114611dd357604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b6000611de26203f48042614c7a565b6001600160a01b0385166000818152600260205260409081902083905551919250907fe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f90611cb79084815260200190565b6005546000906001600160a01b0316338114611e8857604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610784565b600060048190556040517f6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e89190a1600191505090565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b6000611f218483614279565b60008181526001602052604081205491925090611f3e9085614c7a565b90508460e00135811115611f8757604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610784565b6000828152600160205260408120829055611fa8608087016060880161493e565b9050611fc58133611fbf60608a0160408b0161493e565b88613f9f565b600060e0870135611fda60c089013588614d09565b611fe49190614d46565b905061200182611ffa60608a0160408b0161493e565b3084613f9f565b7f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b0382166335bdafab61204360408c0160208d01614d81565b61205360808d0160608e0161493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008c013560448201526064016020604051808303816000875af11580156120c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e89190614cd3565b90506121146120fd60408b0160208c01614d81565b61210d60808c0160608d0161493e565b8386614039565b61215057604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610784565b6001600160a01b03821663c06760c761216f60408c0160208d01614d81565b61217f60808d0160608e0161493e565b8c61010001358d6040016020810190612198919061493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a4810186905260c4016020604051808303816000875af115801561221b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223f9190614cb6565b61227b57604051636d4c6c8960e01b8152600860048201526000602482018190526044820181905260648201819052608482015260a401610784565b60065460009061229790640100000000900461ffff1685614d46565b90506001600160a01b03831663db8509016122b860408d0160208e01614d81565b6122c860808e0160608f0161493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008d013560448201523360648201526084810184905260a4016020604051808303816000875af1158015612346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236a9190614cb6565b6123a657604051636d4c6c8960e01b8152600a60048201526000602482018190526044820181905260648201819052608482015260a401610784565b336123b760608c0160408d0161493e565b6001600160a01b03168b600001357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef8a8e60800160208101906123fa9190614d9c565b8f60a001602081019061240d9190614d9c565b604080519384529115156020840152151590820152606081018e90526080810189905260a0015b60405180910390a450505050505050505050565b60006124548483614279565b600081815260016020526040812054919250906124719085614c7a565b90508460c001358111156124ba57604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610784565b60008281526001602052604081208290556124db608087016060880161493e565b9050600060c08701356124f260e089013588614d09565b6124fc9190614d46565b90506125198261251260608a0160408b0161493e565b3384613f9f565b60065460009061252d9061ffff1683614d46565b905061254483333061253f858c614c7a565b613f9f565b7f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b0382166335bdafab61258660408d0160208e01614d81565b61259660808e0160608f0161493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008d013560448201526064016020604051808303816000875af1158015612607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262b9190614cd3565b905061265761264060408c0160208d01614d81565b61265060808d0160608e0161493e565b838c614039565b61269357604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610784565b6001600160a01b03821663c06760c76126b260408d0160208e01614d81565b6126c260808e0160608f0161493e565b8d6101000135338f60400160208101906126dc919061493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a481018c905260c4016020604051808303816000875af1158015612760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127849190614cb6565b6123a657604051636d4c6c8960e01b8152600860048201526000602482018190526044820181905260648201819052608482015260a401610784565b60006127cc8483614279565b600081815260016020526040812054919250906127e99085614c7a565b90508460c0013581111561283257604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610784565b600082815260016020526040812082905560c086013561285660e088013587614d09565b6128609190614d46565b90506000612874608088016060890161493e565b9050612895813361288b60608b0160408c0161493e565b61253f868b614db9565b6006546000906128a99061ffff1684614d46565b90506128b782333084613f9f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663fcbaab2e6128f660408b0160208c01614d81565b61290660808c0160608d0161493e565b6101008c013561291c60608e0160408f0161493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a481018a905260c4016020604051808303816000875af115801561299f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c39190614cb6565b6129ff57604051636d4c6c8960e01b8152600b60048201526000602482018190526044820181905260648201819052608482015260a401610784565b33612a1060608a0160408b0161493e565b6001600160a01b031689357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef88612a4d60a08e0160808f01614d9c565b8d60a0016020810190612a609190614d9c565b604080519384529115156020840152151590820152606081018c90526080810188905260a0015b60405180910390a45050505050505050565b6000612aa58483614279565b60008181526001602052604081205491925090612ac29085614c7a565b90508460e00135811115612b0b57604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610784565b6000828152600160205260409020819055612b46612b2f608087016060880161493e565b33612b406060890160408a0161493e565b87613f9f565b7f0000000000000000000000000000000000000000000000000000000000000000600060e0870135612b7c60c089013588614d09565b612b869190614d46565b90506001600160a01b0382166315042ddf612ba760408a0160208b01614d81565b612bb760808b0160608c0161493e565b6101008b0135612bcd60608d0160408e0161493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a4810184905260c4016020604051808303816000875af1158015612c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c749190614cb6565b612cb057604051636d4c6c8960e01b8152600c60048201526000602482018190526044820181905260648201819052608482015260a401610784565b600654600090612ccc90640100000000900461ffff1683614d46565b90506001600160a01b03831663db850901612ced60408b0160208c01614d81565b612cfd60808c0160608d0161493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008b013560448201523360648201526084810184905260a4016020604051808303816000875af1158015612d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9f9190614cb6565b612ddb57604051636d4c6c8960e01b8152600a60048201526000602482018190526044820181905260648201819052608482015260a401610784565b33612dec60608a0160408b0161493e565b6001600160a01b031689357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef88612e2960a08e0160808f01614d9c565b8d60a0016020810190612e3c9190614d9c565b604080519384529115156020840152151590820152606081018c90526080810187905260a001612a87565b60006040517f095ea7b3000000000000000000000000000000000000000000000000000000006000528360045282602452602060006044600080895af13d15601f3d1160016000511416171691506000606052806040525080612ef6576040517f3e3f8f7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b600060ff851660011480612f13575060ff85166002145b15612fa5576040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0384169063852a12e3906024015b6020604051808303816000875af1158015612f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9d9190614cf0565b159050610ec3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff861601613060576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390526000906001600160a01b03851690632e1a7d4d906024015b6020604051808303816000875af1158015613033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130579190614cf0565b10159050610ec3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff861601613103576040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018490523060448301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401613014565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60ff8616016131b1576040517f441a3e7000000000000000000000000000000000000000000000000000000000815260006004820152602481018390526001600160a01b0384169063441a3e70906044015b600060405180830381600087803b15801561319057600080fd5b505af11580156131a4573d6000803e3d6000fd5b5050505060019050610ec3565b6040517fb460af9400000000000000000000000000000000000000000000000000000000815260048101839052306024820181905260448201526000906001600160a01b0385169063b460af9490606401613014565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000006000528360045282602452602060006044600080895af13d15601f3d1160016000511416171691506000606052806040525080612ef6576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006132a28483614279565b600081815260016020526040812054919250906132bf9085614c7a565b90508460e0013581111561330857604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610784565b6000828152600160205260408120829055613329608087016060880161493e565b9050600060e087013561334060c089013588614d09565b61334a9190614d46565b905061336b8261336060608a0160408b0161493e565b3361253f8a86614db9565b6006546000906133859062010000900461ffff1683614d46565b905061339383333084613f9f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663fcbaab2e6133d260408b0160208c01614d81565b6133e260808c0160608d0161493e565b8b6101000135338d60400160208101906133fc919061493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a4810185905260c4016020604051808303816000875af1158015613480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a49190614cb6565b6134e057604051636d4c6c8960e01b8152600b60048201526000602482018190526044820181905260648201819052608482015260a401610784565b336134f160608a0160408b0161493e565b6001600160a01b031689357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd926671283488612e2960a08e0160808f01614d9c565b600061353a8483614279565b600081815260016020526040812054919250906135579085614c7a565b90508460c001358111156135a057604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610784565b60008281526001602052604081208290556135c1608087016060880161493e565b9050600060c08701356135d860e089013588614d09565b6135e29190614d46565b90506135f88261251260608a0160408b0161493e565b600654600090613616906601000000000000900461ffff1683614d46565b905061362483333084613f9f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166315042ddf61366360408b0160208c01614d81565b61367360808c0160608d0161493e565b8b6101000135338d604001602081019061368d919061493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a481018a905260c4016020604051808303816000875af1158015613711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137359190614cb6565b6134e057604051636d4c6c8960e01b8152600c60048201526000602482018190526044820181905260648201819052608482015260a401610784565b600061377d8483614279565b6000818152600160205260408120549192509061379a9085614c7a565b90508460c001358111156137e357604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610784565b60008281526001602090815260408083208490557f000000000000000000000000000000000000000000000000000000000000000092916001600160a01b038416916335bdafab91613839918b01908b01614d81565b61384960808b0160608c0161493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008a013560448201526064016020604051808303816000875af11580156138ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138de9190614cd3565b905061390a6138f36040890160208a01614d81565b61390360808a0160608b0161493e565b8389612efc565b61394657604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610784565b60006139586080890160608a0161493e565b9050600060c089013561396f60e08b01358a614d09565b6139799190614d46565b90506139998261398f60608c0160408d0161493e565b611211848c614db9565b6006546000906139b7906601000000000000900461ffff1683614d46565b90506139c883336112118486614db9565b6001600160a01b038516630f0016b66139e760408d0160208e01614d81565b6139f760808e0160608f0161493e565b8d61010001358e6040016020810190613a10919061493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a481018c905260c4016020604051808303816000875af1158015613a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab79190614cb6565b613af357604051636d4c6c8960e01b8152600960048201526000602482018190526044820181905260648201819052608482015260a401610784565b33613b0460608c0160408d0161493e565b6001600160a01b03168b600001357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd92667128348a8e6080016020810190613b479190614d9c565b8f60a0016020810190613b5a9190614d9c565b604080519384529115156020840152151590820152606081018e90526080810187905260a001612434565b6000613b918483614279565b60008181526001602052604081205491925090613bae9085614c7a565b90508460e00135811115613bf757604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610784565b60008281526001602090815260408083208490557f000000000000000000000000000000000000000000000000000000000000000092916001600160a01b038416916335bdafab91613c4d918b01908b01614d81565b613c5d60808b0160608c0161493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008a013560448201526064016020604051808303816000875af1158015613cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf29190614cd3565b9050600060e0880135613d0960c08a013589614d09565b613d139190614d46565b9050613d3f613d2860408a0160208b01614d81565b613d3860808b0160608c0161493e565b8484612efc565b613d7b57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610784565b6000613d8d60808a0160608b0161493e565b600654909150600090613daa9062010000900461ffff1684614d46565b9050613dc6823383613dbc8d88614db9565b6112119190614db9565b613de082613dda60608d0160408e0161493e565b8b613207565b6001600160a01b038516630f0016b6613dff60408d0160208e01614d81565b613e0f60808e0160608f0161493e565b8d6101000135338f6040016020810190613e29919061493e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a4810186905260c4016020604051808303816000875af1158015613ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed19190614cb6565b613f0d57604051636d4c6c8960e01b8152600960048201526000602482018190526044820181905260648201819052608482015260a401610784565b33613f1e60608c0160408d0161493e565b6001600160a01b03168b600001357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd92667128348a8e6080016020810190613f619190614d9c565b8f60a0016020810190613f749190614d9c565b604080519384529115156020840152151590820152606081018e90526080810188905260a001612434565b60006040517f23b872dd000000000000000000000000000000000000000000000000000000006000528460045283602452826044526020600060646000808a5af13d15601f3d1160016000511416171691506000606052806040525080614032576040517f7939f42400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600060ff851660011480614050575060ff85166002145b1561409b576040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0384169063a0712d6890602401612f5a565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff86160161410e576040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481018390526000906001600160a01b0385169063b6b55f2590602401613014565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff8616016141b3576040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260248201849052306044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063e8eda9df90608401613176565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60ff86160161422a576040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260006004820152602481018390526001600160a01b0384169063e2bbb15890604401613176565b6040517f6e553f65000000000000000000000000000000000000000000000000000000008152600481018390523060248201526000906001600160a01b03851690636e553f6590604401613014565b6000806142858461440d565b60008181526020819052604090205490915060ff16156142d757604051636d4c6c8960e01b8152600260048201526000602482018190526044820181905260648201819052608482015260a401610784565b42846101200135101561431f57604051636d4c6c8960e01b8152600360048201526101208501356024820152426044820152600060648201819052608482015260a401610784565b6040517f190100000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060028201526022810182905260429020600090614383908561451b565b90506001600160a01b03811661439f606087016040880161493e565b6001600160a01b0316146144055760046000806143c26060890160408a0161493e565b604051636d4c6c8960e01b815260ff9094166004850152602484019290925260448301526001600160a01b0390811660648301528216608482015260a401610784565b509392505050565b60007fbc200cfe92556575f801f821f26e6d54f6421fa132e4b2d65319cac1c687d8e682356144426040850160208601614d81565b614452606086016040870161493e565b614462608087016060880161493e565b61447260a0880160808901614d9c565b61448260c0890160a08a01614d9c565b60408051602081019890985287019590955260ff90931660608601526001600160a01b0391821660808601521660a0840152151560c08381019190915290151560e083810191909152908401356101008381019190915290840135610120838101919091529084013561014083015283013561016082015261018001604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a06040830135111561457b576040517f4be1c79600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6145886020830183614d81565b60ff16601b141580156145ab57506145a36020830183614d81565b60ff16601c14155b156145e2576040517f205db2c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001846145f46020860186614d81565b604080516000815260208181018084529490945260ff9092168282015291860135606082015290850135608082015260a0016020604051602081039080840390855afa158015614648573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381166146b3576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008083601f8401126146cc57600080fd5b50813567ffffffffffffffff8111156146e457600080fd5b6020830191508360208260051b85010111156146ff57600080fd5b9250929050565b60008083601f84011261471857600080fd5b50813567ffffffffffffffff81111561473057600080fd5b6020830191508360206060830285010111156146ff57600080fd5b6000806000806000806060878903121561476457600080fd5b863567ffffffffffffffff8082111561477c57600080fd5b818901915089601f83011261479057600080fd5b81358181111561479f57600080fd5b8a6020610140830285010111156147b557600080fd5b6020928301985096509088013590808211156147d057600080fd5b6147dc8a838b016146ba565b909650945060408901359150808211156147f557600080fd5b5061480289828a01614706565b979a9699509497509295939492505050565b60006080828403121561482657600080fd5b8260808301111561483657600080fd5b50919050565b6000806000806040858703121561485257600080fd5b843567ffffffffffffffff8082111561486a57600080fd5b614876888389016146ba565b9096509450602087013591508082111561488f57600080fd5b5061489c878288016146ba565b95989497509550505050565b6000602082840312156148ba57600080fd5b5035919050565b803560ff811681146148d257600080fd5b919050565b6001600160a01b03811681146148ec57600080fd5b50565b80356148d2816148d7565b6000806000806080858703121561491057600080fd5b614919856148c1565b93506020850135614929816148d7565b93969395505050506040820135916060013590565b60006020828403121561495057600080fd5b81356146b3816148d7565b600080600080600060a0868803121561497357600080fd5b61497c866148c1565b9450602086013561498c816148d7565b9350604086013561499c816148d7565b925060608601356149ac816148d7565b949793965091946080013592915050565b6000806000606084860312156149d257600080fd5b6149db846148c1565b925060208401356149eb816148d7565b929592945050506040919091013590565b600060208083528351808285015260005b81811015614a2957858101830151858201604001528201614a0d565b81811115614a3b576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000808284036101a0811215614a8457600080fd5b61014080821215614a9457600080fd5b84935060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec083011215614ac757600080fd5b92959390920193505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b604051610140810167ffffffffffffffff81118282101715614b4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b80151581146148ec57600080fd5b80356148d281614b53565b60006101408284031215614b7f57600080fd5b614b87614b02565b82358152614b97602084016148c1565b6020820152614ba8604084016148ef565b6040820152614bb9606084016148ef565b6060820152614bca60808401614b61565b6080820152614bdb60a08401614b61565b60a082015260c0838101359082015260e080840135908201526101008084013590820152610120928301359281019290925250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c7357614c73614c13565b5060010190565b60008219821115614c8d57614c8d614c13565b500190565b600060208284031215614ca457600080fd5b813561ffff811681146146b357600080fd5b600060208284031215614cc857600080fd5b81516146b381614b53565b600060208284031215614ce557600080fd5b81516146b3816148d7565b600060208284031215614d0257600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d4157614d41614c13565b500290565b600082614d7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215614d9357600080fd5b6146b3826148c1565b600060208284031215614dae57600080fd5b81356146b381614b53565b600082821015614dcb57614dcb614c13565b50039056fea26469706673582212202fb686c61c022b7c882c94db3c4ec34d656595e233478966f80bfd9842615c9c64736f6c634300080d0033",
}

// SwivelABI is the input ABI used to generate the binding from.
// Deprecated: Use SwivelMetaData.ABI instead.
var SwivelABI = SwivelMetaData.ABI

// SwivelBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SwivelMetaData.Bin instead.
var SwivelBin = SwivelMetaData.Bin

// DeploySwivel deploys a new Ethereum contract, binding an instance of Swivel to it.
func DeploySwivel(auth *bind.TransactOpts, backend bind.ContractBackend, m common.Address, a common.Address) (common.Address, *types.Transaction, *Swivel, error) {
	parsed, err := SwivelMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SwivelBin), backend, m, a)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// Swivel is an auto generated Go binding around an Ethereum contract.
type Swivel struct {
	SwivelCaller     // Read-only binding to the contract
	SwivelTransactor // Write-only binding to the contract
	SwivelFilterer   // Log filterer for contract events
}

// SwivelCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwivelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwivelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwivelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwivelSession struct {
	Contract     *Swivel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwivelCallerSession struct {
	Contract *SwivelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SwivelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwivelTransactorSession struct {
	Contract     *SwivelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwivelRaw struct {
	Contract *Swivel // Generic contract binding to access the raw methods on
}

// SwivelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwivelCallerRaw struct {
	Contract *SwivelCaller // Generic read-only contract binding to access the raw methods on
}

// SwivelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwivelTransactorRaw struct {
	Contract *SwivelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwivel creates a new instance of Swivel, bound to a specific deployed contract.
func NewSwivel(address common.Address, backend bind.ContractBackend) (*Swivel, error) {
	contract, err := bindSwivel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// NewSwivelCaller creates a new read-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelCaller(address common.Address, caller bind.ContractCaller) (*SwivelCaller, error) {
	contract, err := bindSwivel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelCaller{contract: contract}, nil
}

// NewSwivelTransactor creates a new write-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelTransactor(address common.Address, transactor bind.ContractTransactor) (*SwivelTransactor, error) {
	contract, err := bindSwivel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelTransactor{contract: contract}, nil
}

// NewSwivelFilterer creates a new log filterer instance of Swivel, bound to a specific deployed contract.
func NewSwivelFilterer(address common.Address, filterer bind.ContractFilterer) (*SwivelFilterer, error) {
	contract, err := bindSwivel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwivelFilterer{contract: contract}, nil
}

// bindSwivel binds a generic wrapper to an already deployed contract.
func bindSwivel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.SwivelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transact(opts, method, params...)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCaller) HOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "HOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCallerSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelCaller) MINFEENOMINATOR(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "MIN_FEENOMINATOR")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelSession) MINFEENOMINATOR() (uint16, error) {
	return _Swivel.Contract.MINFEENOMINATOR(&_Swivel.CallOpts)
}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelCallerSession) MINFEENOMINATOR() (uint16, error) {
	return _Swivel.Contract.MINFEENOMINATOR(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCaller) NAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCallerSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCallerSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelCaller) AaveAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "aaveAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelSession) AaveAddr() (common.Address, error) {
	return _Swivel.Contract.AaveAddr(&_Swivel.CallOpts)
}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelCallerSession) AaveAddr() (common.Address, error) {
	return _Swivel.Contract.AaveAddr(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCallerSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Approvals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "approvals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Approvals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Approvals(&_Swivel.CallOpts, arg0)
}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Approvals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Approvals(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCaller) Cancelled(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "cancelled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCallerSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCaller) Domain(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "domain")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCallerSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelCaller) FeeChange(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "feeChange")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelSession) FeeChange() (*big.Int, error) {
	return _Swivel.Contract.FeeChange(&_Swivel.CallOpts)
}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelCallerSession) FeeChange() (*big.Int, error) {
	return _Swivel.Contract.FeeChange(&_Swivel.CallOpts)
}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelCaller) Feenominators(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "feenominators", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelSession) Feenominators(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Feenominators(&_Swivel.CallOpts, arg0)
}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelCallerSession) Feenominators(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Feenominators(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCaller) Filled(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "filled", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCaller) MarketPlace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "marketPlace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCallerSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "withdrawals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelTransactor) ApproveUnderlying(opts *bind.TransactOpts, u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "approveUnderlying", u, c)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelSession) ApproveUnderlying(u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ApproveUnderlying(&_Swivel.TransactOpts, u, c)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) ApproveUnderlying(u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ApproveUnderlying(&_Swivel.TransactOpts, u, c)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) AuthRedeem(opts *bind.TransactOpts, p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "authRedeem", p, u, c, t, a)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelSession) AuthRedeem(p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.AuthRedeem(&_Swivel.TransactOpts, p, u, c, t, a)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) AuthRedeem(p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.AuthRedeem(&_Swivel.TransactOpts, p, u, c, t, a)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelTransactor) BlockApproval(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockApproval", e)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelSession) BlockApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockApproval(&_Swivel.TransactOpts, e)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) BlockApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockApproval(&_Swivel.TransactOpts, e)
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelTransactor) BlockFeeChange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockFeeChange")
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelSession) BlockFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.BlockFeeChange(&_Swivel.TransactOpts)
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelTransactorSession) BlockFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.BlockFeeChange(&_Swivel.TransactOpts)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactor) BlockWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockWithdrawal", e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// Cancel is a paid mutator transaction binding the contract method 0xc94cdbbd.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactor) Cancel(opts *bind.TransactOpts, o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "cancel", o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0xc94cdbbd.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0xc94cdbbd.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactorSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// ChangeFee is a paid mutator transaction binding the contract method 0x172bfa94.
//
// Solidity: function changeFee(uint16[4] f) returns(bool)
func (_Swivel *SwivelTransactor) ChangeFee(opts *bind.TransactOpts, f [4]uint16) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "changeFee", f)
}

// ChangeFee is a paid mutator transaction binding the contract method 0x172bfa94.
//
// Solidity: function changeFee(uint16[4] f) returns(bool)
func (_Swivel *SwivelSession) ChangeFee(f [4]uint16) (*types.Transaction, error) {
	return _Swivel.Contract.ChangeFee(&_Swivel.TransactOpts, f)
}

// ChangeFee is a paid mutator transaction binding the contract method 0x172bfa94.
//
// Solidity: function changeFee(uint16[4] f) returns(bool)
func (_Swivel *SwivelTransactorSession) ChangeFee(f [4]uint16) (*types.Transaction, error) {
	return _Swivel.Contract.ChangeFee(&_Swivel.TransactOpts, f)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) CombineTokens(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "combineTokens", p, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) CombineTokens(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, p, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) CombineTokens(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, p, u, m, a)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Exit(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "exit", o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Initiate(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "initiate", o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactor) RedeemSwivelVaultInterest(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemSwivelVaultInterest", p, u, m)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelSession) RedeemSwivelVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemSwivelVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemSwivelVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemSwivelVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactor) RedeemVaultInterest(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemVaultInterest", p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) RedeemZcToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemZcToken", p, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemZcToken(&_Swivel.TransactOpts, p, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemZcToken(&_Swivel.TransactOpts, p, u, m, a)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelTransactor) ScheduleApproval(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleApproval", e)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelSession) ScheduleApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleApproval(&_Swivel.TransactOpts, e)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleApproval(&_Swivel.TransactOpts, e)
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x1177ec30.
//
// Solidity: function scheduleFeeChange() returns(bool)
func (_Swivel *SwivelTransactor) ScheduleFeeChange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleFeeChange")
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x1177ec30.
//
// Solidity: function scheduleFeeChange() returns(bool)
func (_Swivel *SwivelSession) ScheduleFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleFeeChange(&_Swivel.TransactOpts)
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x1177ec30.
//
// Solidity: function scheduleFeeChange() returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleFeeChange(&_Swivel.TransactOpts)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactor) ScheduleWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleWithdrawal", e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelTransactor) SetAdmin(opts *bind.TransactOpts, a common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "setAdmin", a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.SetAdmin(&_Swivel.TransactOpts, a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelTransactorSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.SetAdmin(&_Swivel.TransactOpts, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) SplitUnderlying(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "splitUnderlying", p, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) SplitUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, p, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) SplitUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, p, u, m, a)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelTransactor) Withdraw(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "withdraw", e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// SwivelBlockApprovalIterator is returned from FilterBlockApproval and is used to iterate over the raw logs and unpacked data for BlockApproval events raised by the Swivel contract.
type SwivelBlockApprovalIterator struct {
	Event *SwivelBlockApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockApproval represents a BlockApproval event raised by the Swivel contract.
type SwivelBlockApproval struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBlockApproval is a free log retrieval operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) FilterBlockApproval(opts *bind.FilterOpts, token []common.Address) (*SwivelBlockApprovalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelBlockApprovalIterator{contract: _Swivel.contract, event: "BlockApproval", logs: logs, sub: sub}, nil
}

// WatchBlockApproval is a free log subscription operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) WatchBlockApproval(opts *bind.WatchOpts, sink chan<- *SwivelBlockApproval, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockApproval)
				if err := _Swivel.contract.UnpackLog(event, "BlockApproval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockApproval is a log parse operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) ParseBlockApproval(log types.Log) (*SwivelBlockApproval, error) {
	event := new(SwivelBlockApproval)
	if err := _Swivel.contract.UnpackLog(event, "BlockApproval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelBlockFeeChangeIterator is returned from FilterBlockFeeChange and is used to iterate over the raw logs and unpacked data for BlockFeeChange events raised by the Swivel contract.
type SwivelBlockFeeChangeIterator struct {
	Event *SwivelBlockFeeChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockFeeChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockFeeChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockFeeChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockFeeChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockFeeChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockFeeChange represents a BlockFeeChange event raised by the Swivel contract.
type SwivelBlockFeeChange struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBlockFeeChange is a free log retrieval operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) FilterBlockFeeChange(opts *bind.FilterOpts) (*SwivelBlockFeeChangeIterator, error) {

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockFeeChange")
	if err != nil {
		return nil, err
	}
	return &SwivelBlockFeeChangeIterator{contract: _Swivel.contract, event: "BlockFeeChange", logs: logs, sub: sub}, nil
}

// WatchBlockFeeChange is a free log subscription operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) WatchBlockFeeChange(opts *bind.WatchOpts, sink chan<- *SwivelBlockFeeChange) (event.Subscription, error) {

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockFeeChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockFeeChange)
				if err := _Swivel.contract.UnpackLog(event, "BlockFeeChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockFeeChange is a log parse operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) ParseBlockFeeChange(log types.Log) (*SwivelBlockFeeChange, error) {
	event := new(SwivelBlockFeeChange)
	if err := _Swivel.contract.UnpackLog(event, "BlockFeeChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelBlockWithdrawalIterator is returned from FilterBlockWithdrawal and is used to iterate over the raw logs and unpacked data for BlockWithdrawal events raised by the Swivel contract.
type SwivelBlockWithdrawalIterator struct {
	Event *SwivelBlockWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockWithdrawal represents a BlockWithdrawal event raised by the Swivel contract.
type SwivelBlockWithdrawal struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBlockWithdrawal is a free log retrieval operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) FilterBlockWithdrawal(opts *bind.FilterOpts, token []common.Address) (*SwivelBlockWithdrawalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelBlockWithdrawalIterator{contract: _Swivel.contract, event: "BlockWithdrawal", logs: logs, sub: sub}, nil
}

// WatchBlockWithdrawal is a free log subscription operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) WatchBlockWithdrawal(opts *bind.WatchOpts, sink chan<- *SwivelBlockWithdrawal, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockWithdrawal)
				if err := _Swivel.contract.UnpackLog(event, "BlockWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockWithdrawal is a log parse operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) ParseBlockWithdrawal(log types.Log) (*SwivelBlockWithdrawal, error) {
	event := new(SwivelBlockWithdrawal)
	if err := _Swivel.contract.UnpackLog(event, "BlockWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelCancelIterator is returned from FilterCancel and is used to iterate over the raw logs and unpacked data for Cancel events raised by the Swivel contract.
type SwivelCancelIterator struct {
	Event *SwivelCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelCancel represents a Cancel event raised by the Swivel contract.
type SwivelCancel struct {
	Key  [32]byte
	Hash [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterCancel is a free log retrieval operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) FilterCancel(opts *bind.FilterOpts, key [][32]byte) (*SwivelCancelIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return &SwivelCancelIterator{contract: _Swivel.contract, event: "Cancel", logs: logs, sub: sub}, nil
}

// WatchCancel is a free log subscription operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) WatchCancel(opts *bind.WatchOpts, sink chan<- *SwivelCancel, key [][32]byte) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelCancel)
				if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancel is a log parse operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) ParseCancel(log types.Log) (*SwivelCancel, error) {
	event := new(SwivelCancel)
	if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelChangeFeeIterator is returned from FilterChangeFee and is used to iterate over the raw logs and unpacked data for ChangeFee events raised by the Swivel contract.
type SwivelChangeFeeIterator struct {
	Event *SwivelChangeFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelChangeFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelChangeFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelChangeFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelChangeFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelChangeFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelChangeFee represents a ChangeFee event raised by the Swivel contract.
type SwivelChangeFee struct {
	Index *big.Int
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterChangeFee is a free log retrieval operation binding the contract event 0x91e72fa36e0202be93e86c97a3d3d3497cf0a06cf859b14b616a304367835a8e.
//
// Solidity: event ChangeFee(uint256 indexed index, uint256 indexed value)
func (_Swivel *SwivelFilterer) FilterChangeFee(opts *bind.FilterOpts, index []*big.Int, value []*big.Int) (*SwivelChangeFeeIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ChangeFee", indexRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &SwivelChangeFeeIterator{contract: _Swivel.contract, event: "ChangeFee", logs: logs, sub: sub}, nil
}

// WatchChangeFee is a free log subscription operation binding the contract event 0x91e72fa36e0202be93e86c97a3d3d3497cf0a06cf859b14b616a304367835a8e.
//
// Solidity: event ChangeFee(uint256 indexed index, uint256 indexed value)
func (_Swivel *SwivelFilterer) WatchChangeFee(opts *bind.WatchOpts, sink chan<- *SwivelChangeFee, index []*big.Int, value []*big.Int) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ChangeFee", indexRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelChangeFee)
				if err := _Swivel.contract.UnpackLog(event, "ChangeFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangeFee is a log parse operation binding the contract event 0x91e72fa36e0202be93e86c97a3d3d3497cf0a06cf859b14b616a304367835a8e.
//
// Solidity: event ChangeFee(uint256 indexed index, uint256 indexed value)
func (_Swivel *SwivelFilterer) ParseChangeFee(log types.Log) (*SwivelChangeFee, error) {
	event := new(SwivelChangeFee)
	if err := _Swivel.contract.UnpackLog(event, "ChangeFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelExitIterator is returned from FilterExit and is used to iterate over the raw logs and unpacked data for Exit events raised by the Swivel contract.
type SwivelExitIterator struct {
	Event *SwivelExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelExit represents a Exit event raised by the Swivel contract.
type SwivelExit struct {
	Key    [32]byte
	Hash   [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExit is a free log retrieval operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterExit(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelExitIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelExitIterator{contract: _Swivel.contract, event: "Exit", logs: logs, sub: sub}, nil
}

// WatchExit is a free log subscription operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchExit(opts *bind.WatchOpts, sink chan<- *SwivelExit, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelExit)
				if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExit is a log parse operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseExit(log types.Log) (*SwivelExit, error) {
	event := new(SwivelExit)
	if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelInitiateIterator is returned from FilterInitiate and is used to iterate over the raw logs and unpacked data for Initiate events raised by the Swivel contract.
type SwivelInitiateIterator struct {
	Event *SwivelInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelInitiate represents a Initiate event raised by the Swivel contract.
type SwivelInitiate struct {
	Key    [32]byte
	Hash   [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterInitiate is a free log retrieval operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterInitiate(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelInitiateIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelInitiateIterator{contract: _Swivel.contract, event: "Initiate", logs: logs, sub: sub}, nil
}

// WatchInitiate is a free log subscription operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchInitiate(opts *bind.WatchOpts, sink chan<- *SwivelInitiate, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelInitiate)
				if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiate is a log parse operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseInitiate(log types.Log) (*SwivelInitiate, error) {
	event := new(SwivelInitiate)
	if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleApprovalIterator is returned from FilterScheduleApproval and is used to iterate over the raw logs and unpacked data for ScheduleApproval events raised by the Swivel contract.
type SwivelScheduleApprovalIterator struct {
	Event *SwivelScheduleApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleApproval represents a ScheduleApproval event raised by the Swivel contract.
type SwivelScheduleApproval struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterScheduleApproval is a free log retrieval operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleApproval(opts *bind.FilterOpts, token []common.Address) (*SwivelScheduleApprovalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleApprovalIterator{contract: _Swivel.contract, event: "ScheduleApproval", logs: logs, sub: sub}, nil
}

// WatchScheduleApproval is a free log subscription operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleApproval(opts *bind.WatchOpts, sink chan<- *SwivelScheduleApproval, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleApproval)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleApproval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleApproval is a log parse operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleApproval(log types.Log) (*SwivelScheduleApproval, error) {
	event := new(SwivelScheduleApproval)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleApproval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleFeeChangeIterator is returned from FilterScheduleFeeChange and is used to iterate over the raw logs and unpacked data for ScheduleFeeChange events raised by the Swivel contract.
type SwivelScheduleFeeChangeIterator struct {
	Event *SwivelScheduleFeeChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleFeeChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleFeeChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleFeeChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleFeeChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleFeeChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleFeeChange represents a ScheduleFeeChange event raised by the Swivel contract.
type SwivelScheduleFeeChange struct {
	Hold *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterScheduleFeeChange is a free log retrieval operation binding the contract event 0xf339d7864b1b8839e8a8870c012fc6eb9a89844861a87a26ce35979018603a1b.
//
// Solidity: event ScheduleFeeChange(uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleFeeChange(opts *bind.FilterOpts) (*SwivelScheduleFeeChangeIterator, error) {

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleFeeChange")
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleFeeChangeIterator{contract: _Swivel.contract, event: "ScheduleFeeChange", logs: logs, sub: sub}, nil
}

// WatchScheduleFeeChange is a free log subscription operation binding the contract event 0xf339d7864b1b8839e8a8870c012fc6eb9a89844861a87a26ce35979018603a1b.
//
// Solidity: event ScheduleFeeChange(uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleFeeChange(opts *bind.WatchOpts, sink chan<- *SwivelScheduleFeeChange) (event.Subscription, error) {

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleFeeChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleFeeChange)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleFeeChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleFeeChange is a log parse operation binding the contract event 0xf339d7864b1b8839e8a8870c012fc6eb9a89844861a87a26ce35979018603a1b.
//
// Solidity: event ScheduleFeeChange(uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleFeeChange(log types.Log) (*SwivelScheduleFeeChange, error) {
	event := new(SwivelScheduleFeeChange)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleFeeChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleWithdrawalIterator is returned from FilterScheduleWithdrawal and is used to iterate over the raw logs and unpacked data for ScheduleWithdrawal events raised by the Swivel contract.
type SwivelScheduleWithdrawalIterator struct {
	Event *SwivelScheduleWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleWithdrawal represents a ScheduleWithdrawal event raised by the Swivel contract.
type SwivelScheduleWithdrawal struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterScheduleWithdrawal is a free log retrieval operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleWithdrawal(opts *bind.FilterOpts, token []common.Address) (*SwivelScheduleWithdrawalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleWithdrawalIterator{contract: _Swivel.contract, event: "ScheduleWithdrawal", logs: logs, sub: sub}, nil
}

// WatchScheduleWithdrawal is a free log subscription operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleWithdrawal(opts *bind.WatchOpts, sink chan<- *SwivelScheduleWithdrawal, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleWithdrawal)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleWithdrawal is a log parse operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleWithdrawal(log types.Log) (*SwivelScheduleWithdrawal, error) {
	event := new(SwivelScheduleWithdrawal)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
