// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swivel

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HashOrder is an auto generated low-level Go binding around an user-defined struct.
type HashOrder struct {
	Key        [32]byte
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// SigComponents is an auto generated low-level Go binding around an user-defined struct.
type SigComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelABI is the input ABI used to generate the binding from.
const SwivelABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Initiate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components\",\"name\":\"c\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SwivelBin is the compiled bytecode used for deploying new contracts.
var SwivelBin = "0x60c06040523480156200001157600080fd5b50604051620047a7380380620047a7833981016040819052620000349162000100565b620000906040518060400160405280600e81526020016d53776976656c2046696e616e636560901b815250604051806040016040528060058152602001640322e302e360dc1b8152504630620000a960201b6200096d1760201c565b60805260601b6001600160601b03191660a05262000130565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b60006020828403121562000112578081fd5b81516001600160a01b038116811462000129578182fd5b9392505050565b60805160a05160601c6145d7620001d06000396000818161011301528181610eb501528181611404015281816118370152818161206901528181612b410152818161343e01528181613b1d01526140590152600081816101720152818161024901528181610d14015281816112a9015281816116f201528181611f670152818161275f01528181613089015281816138440152613d8a01526145d76000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806352a9674b11610076578063aba287011161005b578063aba28701146101dd578063d2144f58146101f0578063ffa1ad741461020357600080fd5b806352a9674b1461016d578063a3f4df7e1461019457600080fd5b8063288cdc91146100a85780632ac12622146100db5780632e25d2a61461010e5780633e1608b41461015a575b600080fd5b6100c86100b6366004614370565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b6100fe6100e9366004614370565b60006020819052908152604090205460ff1681565b60405190151581526020016100d2565b6101357f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d2565b6100fe610168366004614388565b61023f565b6100c87f000000000000000000000000000000000000000000000000000000000000000081565b6101d06040518060400160405280600e81526020017f53776976656c2046696e616e636500000000000000000000000000000000000081525081565b6040516100d29190614422565b6100fe6101eb366004614276565b6103a7565b6100fe6101fe366004614276565b610691565b6101d06040518060400160405280600581526020017f322e302e3000000000000000000000000000000000000000000000000000000081525081565b60006102b16102ab7f0000000000000000000000000000000000000000000000000000000000000000610271866109c4565b6040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b83610acf565b73ffffffffffffffffffffffffffffffffffffffff166102d76040850160208601614237565b73ffffffffffffffffffffffffffffffffffffffff161461033f5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b823560008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a9190a250600192915050565b6000805b86811015610683578787828181106103d357634e487b7160e01b600052603260045260246000fd5b9050610120020160800160208101906103ec9190614338565b6105335787878281811061041057634e487b7160e01b600052603260045260246000fd5b9050610120020160600160208101906104299190614338565b6104b7576104a988888381811061045057634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061047757634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061049e57634e487b7160e01b600052603260045260246000fd5b905060600201610c52565b6104b257600080fd5b610671565b6104a98888838181106104da57634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061050157634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061052857634e487b7160e01b600052603260045260246000fd5b9050606002016111e7565b87878281811061055357634e487b7160e01b600052603260045260246000fd5b90506101200201606001602081019061056c9190614338565b6105ec576104a988888381811061059357634e487b7160e01b600052603260045260246000fd5b905061012002018787848181106105ba57634e487b7160e01b600052603260045260246000fd5b905060200201358686858181106105e157634e487b7160e01b600052603260045260246000fd5b905060600201611630565b61066888888381811061060f57634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061063657634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061065d57634e487b7160e01b600052603260045260246000fd5b905060600201611ea5565b61067157600080fd5b8061067b8161451f565b9150506103ab565b506001979650505050505050565b6000805b86811015610683578787828181106106bd57634e487b7160e01b600052603260045260246000fd5b9050610120020160800160208101906106d69190614338565b61081d578787828181106106fa57634e487b7160e01b600052603260045260246000fd5b9050610120020160600160208101906107139190614338565b6107a15761079388888381811061073a57634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061076157634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061078857634e487b7160e01b600052603260045260246000fd5b90506060020161269d565b61079c57600080fd5b61095b565b6107938888838181106107c457634e487b7160e01b600052603260045260246000fd5b905061012002018787848181106107eb57634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061081257634e487b7160e01b600052603260045260246000fd5b905060600201612fc7565b87878281811061083d57634e487b7160e01b600052603260045260246000fd5b9050610120020160600160208101906108569190614338565b6108d65761079388888381811061087d57634e487b7160e01b600052603260045260246000fd5b905061012002018787848181106108a457634e487b7160e01b600052603260045260246000fd5b905060200201358686858181106108cb57634e487b7160e01b600052603260045260246000fd5b905060600201613782565b6109528888838181106108f957634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061092057634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061094757634e487b7160e01b600052603260045260246000fd5b905060600201613cc8565b61095b57600080fd5b806109658161451f565b915050610695565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b60007f7ddd38ab5ed1c16b61ca90eeb9579e29da1ba821cf42d8cdef8f30a31a6a414682356109f96040850160208601614237565b610a096060860160408701614237565b610a196080870160608801614338565b610a2960a0880160808901614338565b8760a001358860c001358960e001358a6101000135604051602001610ab29a99989796959493929190998a5260208a019890985273ffffffffffffffffffffffffffffffffffffffff96871660408a01529490951660608801529115156080870152151560a086015260c085015260e08401919091526101008301526101208201526101400190565b604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a060408301351115610b455760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202273222076616c756500000000006044820152606401610336565b610b526020830183614401565b60ff16601b1480610b725750610b6b6020830183614401565b60ff16601c145b610bbe5760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202276222076616c756500000000006044820152606401610336565b600183610bce6020850185614401565b604080516000815260208181018084529490945260ff9092168282015291850135606082015290840135608082015260a0016020604051602081039080840390855afa158015610c22573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151949350505050565b82356000908152602081905260408120548490839060ff1615610cb75760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610336565b428261010001351015610d0c5760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610336565b610d42610d3c7f0000000000000000000000000000000000000000000000000000000000000000610271856109c4565b82610acf565b73ffffffffffffffffffffffffffffffffffffffff16610d686040840160208501614237565b73ffffffffffffffffffffffffffffffffffffffff1614610dcb5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610336565b8535600090815260016020526040902054610dea9060c0880135614508565b851115610e395760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610336565b853560009081526001602052604081208054879290610e59908490614493565b9091555060009050670de0b6b3a764000060a088013560c0890135610e7e89846144cb565b610e8891906144ab565b610e9291906144cb565b610e9c91906144ab565b905073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166365a963aa610eea60608a0160408b01614237565b60e08a013533610f0060408d0160208e01614237565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201526024810193909352908316604483015290911660648201526084810184905260a401602060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd9190614354565b6110095760405162461bcd60e51b815260206004820152601760248201527f7a63546f6b656e2065786368616e6765206661696c65640000000000000000006044820152606401610336565b6110196060880160408901614237565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd61104460408a0160208b01614237565b3361104f8a86614508565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064015b602060405180830381600087803b1580156110c457600080fd5b505af11580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc9190614354565b6111485760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b336111596040890160208a01614237565b73ffffffffffffffffffffffffffffffffffffffff1688357fc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c225436111a260808c0160608d01614338565b6111b260a08d0160808e01614338565b604080519215158352901515602083015281018b90526060810186905260800160405180910390a45060019695505050505050565b82356000908152602081905260408120548490839060ff161561124c5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610336565b4282610100013510156112a15760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610336565b6112d1610d3c7f0000000000000000000000000000000000000000000000000000000000000000610271856109c4565b73ffffffffffffffffffffffffffffffffffffffff166112f76040840160208501614237565b73ffffffffffffffffffffffffffffffffffffffff161461135a5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610336565b85356000908152600160205260409020546113799060a0880135614508565b8511156113c85760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610336565b8535600090815260016020526040812080548792906113e8908490614493565b909155505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663bddbfbe46114396060890160408a01614237565b60e08901353361144f60408c0160208d01614237565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201526024810193909352908316604483015290911660648201526084810188905260a401602060405180830381600087803b1580156114d457600080fd5b505af11580156114e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150c9190614354565b6115585760405162461bcd60e51b815260206004820152601560248201527f7661756c742065786368616e6765206661696c656400000000000000000000006044820152606401610336565b6000670de0b6b3a764000060c088013560a089013561157789846144cb565b61158191906144ab565b61158b91906144cb565b61159591906144ab565b90506115a76060880160408901614237565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd6115d260408a0160208b01614237565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604481018490526064016110aa565b82356000908152602081905260408120548490839060ff16156116955760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610336565b4282610100013510156116ea5760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610336565b61171a610d3c7f0000000000000000000000000000000000000000000000000000000000000000610271856109c4565b73ffffffffffffffffffffffffffffffffffffffff166117406040840160208501614237565b73ffffffffffffffffffffffffffffffffffffffff16146117a35760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610336565b85356000908152600160205260409020546117c29060a0880135614508565b8511156118115760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610336565b853560009081526001602052604081208054879290611831908490614493565b909155507f0000000000000000000000000000000000000000000000000000000000000000905073ffffffffffffffffffffffffffffffffffffffff8116638c6b9b4161188460608a0160408b01614237565b60e08a013561189960408c0160208d01614237565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810189905260a401602060405180830381600087803b15801561191c57600080fd5b505af1158015611930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119549190614354565b6119a05760405162461bcd60e51b815260206004820152601560248201527f637573746f6469616c2065786974206661696c656400000000000000000000006044820152606401610336565b60006119b26060890160408a01614237565b90506000670de0b6b3a764000060c08a013560a08b01356119d38b846144cb565b6119dd91906144ab565b6119e791906144cb565b6119f191906144ab565b905073ffffffffffffffffffffffffffffffffffffffff82166323b872dd611a1f60408c0160208d01614237565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015233602482015260448101849052606401602060405180830381600087803b158015611a9257600080fd5b505af1158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190614354565b611b165760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b600073ffffffffffffffffffffffffffffffffffffffff84166305e1dc25611b4460608d0160408e01614237565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908d01356024820152604401602060405180830381600087803b158015611bb457600080fd5b505af1158015611bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bec919061425a565b6040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018b905290915073ffffffffffffffffffffffffffffffffffffffff82169063852a12e390602401602060405180830381600087803b158015611c5757600080fd5b505af1158015611c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8f91906143e9565b15611cdc5760405162461bcd60e51b815260206004820152601960248201527f636f6d706f756e6420726564656d7074696f6e206572726f72000000000000006044820152606401610336565b73ffffffffffffffffffffffffffffffffffffffff831663a9059cbb611d0860408d0160208e01614237565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018c9052604401602060405180830381600087803b158015611d7557600080fd5b505af1158015611d89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dad9190614354565b611df95760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b33611e0a60408c0160208d01614237565b73ffffffffffffffffffffffffffffffffffffffff168b600001357fc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c225438d6060016020810190611e599190614338565b8e6080016020810190611e6c9190614338565b604080519215158352901515602083015281018e9052606081018790526080015b60405180910390a45060019998505050505050505050565b82356000908152602081905260408120548490839060ff1615611f0a5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610336565b428261010001351015611f5f5760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610336565b611f8f610d3c7f0000000000000000000000000000000000000000000000000000000000000000610271856109c4565b73ffffffffffffffffffffffffffffffffffffffff16611fb56040840160208501614237565b73ffffffffffffffffffffffffffffffffffffffff16146120185760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610336565b85356000908152600160205260409020546120379060c0880135614508565b85111561204357600080fd5b853560009081526001602052604081208054879290612063908490614493565b909155507f000000000000000000000000000000000000000000000000000000000000000090506000670de0b6b3a764000060a089013560c08a01356120a98a846144cb565b6120b391906144ab565b6120bd91906144cb565b6120c791906144ab565b905073ffffffffffffffffffffffffffffffffffffffff8216638c6b9b416120f560608b0160408c01614237565b60e08b01353361210b60408e0160208f01614237565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201526024810193909352908316604483015290911660648201526084810184905260a401602060405180830381600087803b15801561219057600080fd5b505af11580156121a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c89190614354565b6122145760405162461bcd60e51b815260206004820152601560248201527f637573746f6469616c2065786974206661696c656400000000000000000000006044820152606401610336565b600061222660608a0160408b01614237565b905073ffffffffffffffffffffffffffffffffffffffff81166323b872dd3361225560408d0160208e01614237565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604481018b9052606401602060405180830381600087803b1580156122c957600080fd5b505af11580156122dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123019190614354565b61234d5760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b600073ffffffffffffffffffffffffffffffffffffffff84166305e1dc2561237b60608d0160408e01614237565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908d01356024820152604401602060405180830381600087803b1580156123eb57600080fd5b505af11580156123ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612423919061425a565b6040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810185905290915073ffffffffffffffffffffffffffffffffffffffff82169063852a12e390602401602060405180830381600087803b15801561248e57600080fd5b505af11580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c691906143e9565b156125135760405162461bcd60e51b815260206004820152601960248201527f636f6d706f756e6420726564656d7074696f6e204572726f72000000000000006044820152606401610336565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90604401602060405180830381600087803b15801561258157600080fd5b505af1158015612595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b99190614354565b6126055760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b3361261660408c0160208d01614237565b73ffffffffffffffffffffffffffffffffffffffff168b600001357fc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c225438d60600160208101906126659190614338565b8e60800160208101906126789190614338565b604080519215158352901515602083015281018e905260608101889052608001611e8d565b82356000908152602081905260408120548490839060ff16156127025760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610336565b4282610100013510156127575760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610336565b612787610d3c7f0000000000000000000000000000000000000000000000000000000000000000610271856109c4565b73ffffffffffffffffffffffffffffffffffffffff166127ad6040840160208501614237565b73ffffffffffffffffffffffffffffffffffffffff16146128105760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610336565b853560009081526001602052604090205461282f9060c0880135614508565b85111561287e5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610336565b85356000908152600160205260408120805487929061289e908490614493565b90915550600090506128b66060880160408901614237565b905073ffffffffffffffffffffffffffffffffffffffff81166323b872dd336128e560408b0160208c01614237565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015260448101899052606401602060405180830381600087803b15801561295957600080fd5b505af115801561296d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129919190614354565b6129dd5760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b6000670de0b6b3a764000060a089013560c08a01356129fc8a846144cb565b612a0691906144ab565b612a1091906144cb565b612a1a91906144ab565b905073ffffffffffffffffffffffffffffffffffffffff82166323b872dd612a4860408b0160208c01614237565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015260448101849052606401602060405180830381600087803b158015612abb57600080fd5b505af1158015612acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af39190614354565b612b3f5760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b7f0000000000000000000000000000000000000000000000000000000000000000600073ffffffffffffffffffffffffffffffffffffffff82166305e1dc25612b8e60608d0160408e01614237565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908d01356024820152604401602060405180830381600087803b158015612bfe57600080fd5b505af1158015612c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c36919061425a565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018690529192509085169063095ea7b390604401602060405180830381600087803b158015612caa57600080fd5b505af1158015612cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce29190614354565b612d2e5760405162461bcd60e51b815260206004820152601a60248201527f756e6465726c79696e6720617070726f76616c206661696c65640000000000006044820152606401610336565b6040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063a0712d6890602401602060405180830381600087803b158015612d9657600080fd5b505af1158015612daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dce91906143e9565b15612e1b5760405162461bcd60e51b815260206004820152601560248201527f6d696e74696e672043546f6b656e206661696c656400000000000000000000006044820152606401610336565b73ffffffffffffffffffffffffffffffffffffffff821663f8e51bcb612e4760608d0160408e01614237565b8c60e001358d6020016020810190612e5f9190614237565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810186905260a4015b602060405180830381600087803b158015612ee357600080fd5b505af1158015612ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1b9190614354565b612f675760405162461bcd60e51b815260206004820152601960248201527f637573746f6469616c20696e697469617465206661696c6564000000000000006044820152606401610336565b33612f7860408c0160208d01614237565b73ffffffffffffffffffffffffffffffffffffffff168b600001357f8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa288d60600160208101906126659190614338565b82356000908152602081905260408120548490839060ff161561302c5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610336565b4282610100013510156130815760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610336565b6130b1610d3c7f0000000000000000000000000000000000000000000000000000000000000000610271856109c4565b73ffffffffffffffffffffffffffffffffffffffff166130d76040840160208501614237565b73ffffffffffffffffffffffffffffffffffffffff161461313a5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610336565b85356000908152600160205260409020546131599060a0880135614508565b8511156131a85760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610336565b8535600090815260016020526040812080548792906131c8908490614493565b90915550600090506131e06060880160408901614237565b90506000670de0b6b3a764000060c089013560a08a01356132018a846144cb565b61320b91906144ab565b61321591906144cb565b61321f91906144ab565b905073ffffffffffffffffffffffffffffffffffffffff82166323b872dd61324d60408b0160208c01614237565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015233602482015260448101849052606401602060405180830381600087803b1580156132c057600080fd5b505af11580156132d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f89190614354565b6133445760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810188905273ffffffffffffffffffffffffffffffffffffffff8316906323b872dd90606401602060405180830381600087803b1580156133b857600080fd5b505af11580156133cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f09190614354565b61343c5760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b7f0000000000000000000000000000000000000000000000000000000000000000600073ffffffffffffffffffffffffffffffffffffffff82166305e1dc2561348b60608d0160408e01614237565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908d01356024820152604401602060405180830381600087803b1580156134fb57600080fd5b505af115801561350f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613533919061425a565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018c90529192509085169063095ea7b390604401602060405180830381600087803b1580156135a757600080fd5b505af11580156135bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135df9190614354565b506040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff82169063a0712d6890602401602060405180830381600087803b15801561364857600080fd5b505af115801561365c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061368091906143e9565b156136cd5760405162461bcd60e51b815260206004820152601560248201527f6d696e74696e672043546f6b656e204661696c656400000000000000000000006044820152606401610336565b73ffffffffffffffffffffffffffffffffffffffff821663f8e51bcb6136f960608d0160408e01614237565b8c60e00135338e60200160208101906137129190614237565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602481019390935290831660448301529091166064820152608481018c905260a401612ec9565b82356000908152602081905260408120548490839060ff16156137e75760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610336565b42826101000135101561383c5760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610336565b61386c610d3c7f0000000000000000000000000000000000000000000000000000000000000000610271856109c4565b73ffffffffffffffffffffffffffffffffffffffff166138926040840160208501614237565b73ffffffffffffffffffffffffffffffffffffffff16146138f55760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610336565b85356000908152600160205260409020546139149060a0880135614508565b8511156139635760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610336565b853560009081526001602052604081208054879290613983908490614493565b9091555060009050670de0b6b3a764000060c088013560a08901356139a889846144cb565b6139b291906144ab565b6139bc91906144cb565b6139c691906144ab565b90506139d86060880160408901614237565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33613a0460408b0160208c01614237565b613a0e858b614508565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381600087803b158015613a8257600080fd5b505af1158015613a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aba9190614354565b613b065760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166365a963aa613b5260608a0160408b01614237565b60e08a0135613b6760408c0160208d01614237565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810189905260a401602060405180830381600087803b158015613bea57600080fd5b505af1158015613bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c229190614354565b613c6e5760405162461bcd60e51b815260206004820152601760248201527f7a63546f6b656e2065786368616e6765206661696c65640000000000000000006044820152606401610336565b33613c7f6040890160208a01614237565b73ffffffffffffffffffffffffffffffffffffffff1688357f8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa286111a260808c0160608d01614338565b82356000908152602081905260408120548490839060ff1615613d2d5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610336565b428261010001351015613d825760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610336565b613db2610d3c7f0000000000000000000000000000000000000000000000000000000000000000610271856109c4565b73ffffffffffffffffffffffffffffffffffffffff16613dd86040840160208501614237565b73ffffffffffffffffffffffffffffffffffffffff1614613e3b5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610336565b8535600090815260016020526040902054613e5a9060c0880135614508565b851115613ea95760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610336565b853560009081526001602052604081208054879290613ec9908490614493565b90915550613edf90506060870160408801614237565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33613f0b60408a0160208b01614237565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015260448101889052606401602060405180830381600087803b158015613f7f57600080fd5b505af1158015613f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb79190614354565b6140035760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610336565b6000670de0b6b3a764000060a088013560c089013561402289846144cb565b61402c91906144ab565b61403691906144cb565b61404091906144ab565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663bddbfbe461408e60608a0160408b01614237565b60e08a01356140a360408c0160208d01614237565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810184905260a401602060405180830381600087803b15801561412657600080fd5b505af115801561413a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415e9190614354565b613c6e5760405162461bcd60e51b815260206004820152601560248201527f7661756c742065786368616e6765206661696c656400000000000000000000006044820152606401610336565b60008083601f8401126141bb578182fd5b50813567ffffffffffffffff8111156141d2578182fd5b6020830191508360206060830285010111156141ed57600080fd5b9250929050565b60008083601f840112614205578182fd5b50813567ffffffffffffffff81111561421c578182fd5b6020830191508360208260051b85010111156141ed57600080fd5b600060208284031215614248578081fd5b81356142538161456e565b9392505050565b60006020828403121561426b578081fd5b81516142538161456e565b6000806000806000806060878903121561428e578182fd5b863567ffffffffffffffff808211156142a5578384fd5b818901915089601f8301126142b8578384fd5b8135818111156142c6578485fd5b8a6020610120830285010111156142db578485fd5b6020928301985096509088013590808211156142f5578384fd5b6143018a838b016141f4565b90965094506040890135915080821115614319578384fd5b5061432689828a016141aa565b979a9699509497509295939492505050565b600060208284031215614349578081fd5b813561425381614593565b600060208284031215614365578081fd5b815161425381614593565b600060208284031215614381578081fd5b5035919050565b60008082840361018081121561439c578283fd5b610120808212156143ab578384fd5b84935060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee0830112156143dd578283fd5b92959390920193505050565b6000602082840312156143fa578081fd5b5051919050565b600060208284031215614412578081fd5b813560ff81168114614253578182fd5b6000602080835283518082850152825b8181101561444e57858101830151858201604001528201614432565b8181111561445f5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082198211156144a6576144a6614558565b500190565b6000826144c657634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561450357614503614558565b500290565b60008282101561451a5761451a614558565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561455157614551614558565b5060010190565b634e487b7160e01b600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461459057600080fd5b50565b801515811461459057600080fdfea26469706673582212207f73bd1087c2a18c0dacfb6fac63461e53e257a4d36e2ab87f9c0701a942882a64736f6c63430008040033"

// DeploySwivel deploys a new Ethereum contract, binding an instance of Swivel to it.
func DeploySwivel(auth *bind.TransactOpts, backend bind.ContractBackend, m common.Address) (common.Address, *types.Transaction, *Swivel, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SwivelBin), backend, m)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// Swivel is an auto generated Go binding around an Ethereum contract.
type Swivel struct {
	SwivelCaller     // Read-only binding to the contract
	SwivelTransactor // Write-only binding to the contract
	SwivelFilterer   // Log filterer for contract events
}

// SwivelCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwivelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwivelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwivelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwivelSession struct {
	Contract     *Swivel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwivelCallerSession struct {
	Contract *SwivelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SwivelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwivelTransactorSession struct {
	Contract     *SwivelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwivelRaw struct {
	Contract *Swivel // Generic contract binding to access the raw methods on
}

// SwivelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwivelCallerRaw struct {
	Contract *SwivelCaller // Generic read-only contract binding to access the raw methods on
}

// SwivelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwivelTransactorRaw struct {
	Contract *SwivelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwivel creates a new instance of Swivel, bound to a specific deployed contract.
func NewSwivel(address common.Address, backend bind.ContractBackend) (*Swivel, error) {
	contract, err := bindSwivel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// NewSwivelCaller creates a new read-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelCaller(address common.Address, caller bind.ContractCaller) (*SwivelCaller, error) {
	contract, err := bindSwivel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelCaller{contract: contract}, nil
}

// NewSwivelTransactor creates a new write-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelTransactor(address common.Address, transactor bind.ContractTransactor) (*SwivelTransactor, error) {
	contract, err := bindSwivel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelTransactor{contract: contract}, nil
}

// NewSwivelFilterer creates a new log filterer instance of Swivel, bound to a specific deployed contract.
func NewSwivelFilterer(address common.Address, filterer bind.ContractFilterer) (*SwivelFilterer, error) {
	contract, err := bindSwivel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwivelFilterer{contract: contract}, nil
}

// bindSwivel binds a generic wrapper to an already deployed contract.
func bindSwivel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.SwivelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transact(opts, method, params...)
}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelCaller) DOMAIN(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "DOMAIN")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelSession) DOMAIN() ([32]byte, error) {
	return _Swivel.Contract.DOMAIN(&_Swivel.CallOpts)
}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelCallerSession) DOMAIN() ([32]byte, error) {
	return _Swivel.Contract.DOMAIN(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCaller) NAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCallerSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCallerSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCaller) Cancelled(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "cancelled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCallerSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCaller) Filled(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "filled", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCaller) MarketPlace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "marketPlace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCallerSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactor) Cancel(opts *bind.TransactOpts, o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "cancel", o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactorSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Exit(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "exit", o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Initiate(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "initiate", o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// SwivelCancelIterator is returned from FilterCancel and is used to iterate over the raw logs and unpacked data for Cancel events raised by the Swivel contract.
type SwivelCancelIterator struct {
	Event *SwivelCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelCancel represents a Cancel event raised by the Swivel contract.
type SwivelCancel struct {
	Key [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCancel is a free log retrieval operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) FilterCancel(opts *bind.FilterOpts, key [][32]byte) (*SwivelCancelIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return &SwivelCancelIterator{contract: _Swivel.contract, event: "Cancel", logs: logs, sub: sub}, nil
}

// WatchCancel is a free log subscription operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) WatchCancel(opts *bind.WatchOpts, sink chan<- *SwivelCancel, key [][32]byte) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelCancel)
				if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancel is a log parse operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) ParseCancel(log types.Log) (*SwivelCancel, error) {
	event := new(SwivelCancel)
	if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelExitIterator is returned from FilterExit and is used to iterate over the raw logs and unpacked data for Exit events raised by the Swivel contract.
type SwivelExitIterator struct {
	Event *SwivelExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelExit represents a Exit event raised by the Swivel contract.
type SwivelExit struct {
	Key    [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExit is a free log retrieval operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterExit(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelExitIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelExitIterator{contract: _Swivel.contract, event: "Exit", logs: logs, sub: sub}, nil
}

// WatchExit is a free log subscription operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchExit(opts *bind.WatchOpts, sink chan<- *SwivelExit, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelExit)
				if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExit is a log parse operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseExit(log types.Log) (*SwivelExit, error) {
	event := new(SwivelExit)
	if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelInitiateIterator is returned from FilterInitiate and is used to iterate over the raw logs and unpacked data for Initiate events raised by the Swivel contract.
type SwivelInitiateIterator struct {
	Event *SwivelInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelInitiate represents a Initiate event raised by the Swivel contract.
type SwivelInitiate struct {
	Key    [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterInitiate is a free log retrieval operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterInitiate(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelInitiateIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelInitiateIterator{contract: _Swivel.contract, event: "Initiate", logs: logs, sub: sub}, nil
}

// WatchInitiate is a free log subscription operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchInitiate(opts *bind.WatchOpts, sink chan<- *SwivelInitiate, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelInitiate)
				if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiate is a log parse operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseInitiate(log types.Log) (*SwivelInitiate, error) {
	event := new(SwivelInitiate)
	if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
