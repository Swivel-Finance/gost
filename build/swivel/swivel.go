// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swivel

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HashOrder is an auto generated low-level Go binding around an user-defined struct.
type HashOrder struct {
	Key        [32]byte
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// SigComponents is an auto generated low-level Go binding around an user-defined struct.
type SigComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelABI is the input ABI used to generate the binding from.
const SwivelABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Initiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"WithdrawalScheduled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components\",\"name\":\"c\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"combineTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"splitUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SwivelBin is the compiled bytecode used for deploying new contracts.
var SwivelBin = "0x60e06040523480156200001157600080fd5b506040516200521538038062005215833981016040819052620000349162000105565b3360601b60c052604080518082018252600e81526d53776976656c2046696e616e636560901b602080830191909152825180840190935260058352640322e302e360dc1b8382015262000095929046903090620016cb620000ae821b17901c565b60805260601b6001600160601b03191660a05262000135565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b60006020828403121562000117578081fd5b81516001600160a01b03811681146200012e578182fd5b9392505050565b60805160a05160601c60c05160601c6150096200020c600039600081816102f80152818161086e01528181610a1401528181610f7d01526115cd01526000818161019e015281816103c501528181610c3901528181611c13015281816121120152818161254501528181612d19015281816136bf01528181613ed2015281816145660152614a570152600081816102120152818161071301528181611a7201528181611fb70152818161240001528181612bd40152818161337301528181613bb3015281816142d801526147d301526150096000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806392ae3764116100b2578063d0886f9711610081578063f851a44011610066578063f851a440146102f3578063f8eaad351461031a578063ffa1ad741461032d57600080fd5b8063d0886f97146102d6578063d2144f58146102e057600080fd5b806392ae376414610254578063a102e38414610267578063a3f4df7e1461027a578063aba28701146102c357600080fd5b80633e1608b4116100ee5780633e1608b4146101e557806351cff8d9146101f857806352a9674b1461020d5780637a9262a21461023457600080fd5b80630908ff2d14610120578063288cdc91146101485780632ac12622146101765780632e25d2a614610199575b600080fd5b61013361012e366004614c74565b610369565b60405190151581526020015b60405180910390f35b610168610156366004614da2565b60016020526000908152604090205481565b60405190815260200161013f565b610133610184366004614da2565b60006020819052908152604090205460ff1681565b6101c07f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013f565b6101336101f3366004614dba565b610709565b61020b610206366004614c35565b61086c565b005b6101687f000000000000000000000000000000000000000000000000000000000000000081565b610168610242366004614c35565b60026020526000908152604090205481565b610133610262366004614c74565b610b3b565b61020b610275366004614c35565b610f7b565b6102b66040518060400160405280600e81526020017f53776976656c2046696e616e636500000000000000000000000000000000000081525081565b60405161013f9190614e54565b6101336102d1366004614ca8565b611029565b6101686203f48081565b6101336102ee366004614ca8565b611301565b6101c07f000000000000000000000000000000000000000000000000000000000000000081565b61020b610328366004614c35565b6115cb565b6102b66040518060400160405280600581526020017f322e302e3000000000000000000000000000000000000000000000000000000081525081565b6040517fb50a66f700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052336044830152606482018390526000917f00000000000000000000000000000000000000000000000000000000000000009182169063b50a66f790608401602060405180830381600087803b15801561040b57600080fd5b505af115801561041f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104439190614d86565b6104ba5760405162461bcd60e51b815260206004820152602560248201527f6275726e205a63546f6b656e2072656d6f76696e67204e6f74696f6e616c206660448201527f61696c656400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517f05e1dc2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260248201869052600091908316906305e1dc2590604401602060405180830381600087803b15801561052e57600080fd5b505af1158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190614c58565b6040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810186905290915073ffffffffffffffffffffffffffffffffffffffff82169063852a12e390602401602060405180830381600087803b1580156105d157600080fd5b505af11580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190614e1b565b156106565760405162461bcd60e51b815260206004820152601960248201527f636f6d706f756e6420726564656d7074696f6e206572726f720000000000000060448201526064016104b1565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810185905273ffffffffffffffffffffffffffffffffffffffff87169063a9059cbb90604401602060405180830381600087803b1580156106c457600080fd5b505af11580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190614d86565b5060019695505050505050565b600061077b6107757f000000000000000000000000000000000000000000000000000000000000000061073b86611722565b6040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b8361182d565b73ffffffffffffffffffffffffffffffffffffffff166107a16040850160208601614c35565b73ffffffffffffffffffffffffffffffffffffffff16146108045760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b823560008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a9190a250600192915050565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146108f25760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e00000000000000000000000060448201526064016104b1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054806109655760405162461bcd60e51b815260206004820152601760248201527f6e6f207769746864726177616c207363686564756c656400000000000000000060448201526064016104b1565b804210156109b55760405162461bcd60e51b815260206004820152601860248201527f7769746864726177616c207374696c6c206f6e20686f6c64000000000000000060448201526064016104b1565b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602052604080822091909155517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015284919063a9059cbb907f00000000000000000000000000000000000000000000000000000000000000009083906370a0823190602401602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190614e1b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015610afc57600080fd5b505af1158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190614d86565b5050505050565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101829052600090849073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401602060405180830381600087803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190614d86565b506040517f05e1dc2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000916000918316906305e1dc2590604401602060405180830381600087803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba9190614c58565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018890529192509084169063095ea7b390604401602060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190614d86565b506040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff82169063a0712d6890602401602060405180830381600087803b158015610dcf57600080fd5b505af1158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190614e1b565b15610e545760405162461bcd60e51b815260206004820152601560248201527f6d696e74696e672043546f6b656e204661696c6564000000000000000000000060448201526064016104b1565b6040517fef267f2c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018890523360448301526064820187905283169063ef267f2c90608401602060405180830381600087803b158015610ed157600080fd5b505af1158015610ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f099190614d86565b6106fc5760405162461bcd60e51b815260206004820152602360248201527f6d696e74205a63546f6b656e20616464696e67204e6f74696f6e616c2066616960448201527f6c6564000000000000000000000000000000000000000000000000000000000060648201526084016104b1565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146110015760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e00000000000000000000000060448201526064016104b1565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260026020526040812055565b6000805b868110156112f35787878281811061105557634e487b7160e01b600052603260045260246000fd5b90506101200201608001602081019061106e9190614d6a565b6111ac5787878281811061109257634e487b7160e01b600052603260045260246000fd5b9050610120020160600160208101906110ab9190614d6a565b6111305761112b8888838181106110d257634e487b7160e01b600052603260045260246000fd5b905061012002018787848181106110f957634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061112057634e487b7160e01b600052603260045260246000fd5b9050606002016119b0565b6112e1565b61112b88888381811061115357634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061117a57634e487b7160e01b600052603260045260246000fd5b905060200201358686858181106111a157634e487b7160e01b600052603260045260246000fd5b905060600201611ef5565b8787828181106111cc57634e487b7160e01b600052603260045260246000fd5b9050610120020160600160208101906111e59190614d6a565b6112655761112b88888381811061120c57634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061123357634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061125a57634e487b7160e01b600052603260045260246000fd5b90506060020161233e565b6112e188888381811061128857634e487b7160e01b600052603260045260246000fd5b905061012002018787848181106112af57634e487b7160e01b600052603260045260246000fd5b905060200201358686858181106112d657634e487b7160e01b600052603260045260246000fd5b905060600201612b12565b806112eb81614f51565b91505061102d565b506001979650505050505050565b6000805b868110156112f35787878281811061132d57634e487b7160e01b600052603260045260246000fd5b9050610120020160800160208101906113469190614d6a565b6114845787878281811061136a57634e487b7160e01b600052603260045260246000fd5b9050610120020160600160208101906113839190614d6a565b611408576114038888838181106113aa57634e487b7160e01b600052603260045260246000fd5b905061012002018787848181106113d157634e487b7160e01b600052603260045260246000fd5b905060200201358686858181106113f857634e487b7160e01b600052603260045260246000fd5b9050606002016132b1565b6115b9565b61140388888381811061142b57634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061145257634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061147957634e487b7160e01b600052603260045260246000fd5b905060600201613af1565b8787828181106114a457634e487b7160e01b600052603260045260246000fd5b9050610120020160600160208101906114bd9190614d6a565b61153d576114038888838181106114e457634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061150b57634e487b7160e01b600052603260045260246000fd5b9050602002013586868581811061153257634e487b7160e01b600052603260045260246000fd5b905060600201614216565b6115b988888381811061156057634e487b7160e01b600052603260045260246000fd5b9050610120020187878481811061158757634e487b7160e01b600052603260045260246000fd5b905060200201358686858181106115ae57634e487b7160e01b600052603260045260246000fd5b905060600201614711565b806115c381614f51565b915050611305565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146116515760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e00000000000000000000000060448201526064016104b1565b60006116606203f48042614ec5565b73ffffffffffffffffffffffffffffffffffffffff84166000818152600260205260409081902083905551919250907fd9cf0116e5bb6fbe3d257dc8d1ee7ae76c303efeae77f1e93024d2cb218bedd3906116be9084815260200190565b60405180910390a2505050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b60007f7ddd38ab5ed1c16b61ca90eeb9579e29da1ba821cf42d8cdef8f30a31a6a414682356117576040850160208601614c35565b6117676060860160408701614c35565b6117776080870160608801614d6a565b61178760a0880160808901614d6a565b8760a001358860c001358960e001358a61010001356040516020016118109a99989796959493929190998a5260208a019890985273ffffffffffffffffffffffffffffffffffffffff96871660408a01529490951660608801529115156080870152151560a086015260c085015260e08401919091526101008301526101208201526101400190565b604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0604083013511156118a35760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202273222076616c7565000000000060448201526064016104b1565b6118b06020830183614e33565b60ff16601b14806118d057506118c96020830183614e33565b60ff16601c145b61191c5760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202276222076616c7565000000000060448201526064016104b1565b60018361192c6020850185614e33565b604080516000815260208181018084529490945260ff9092168282015291850135606082015290840135608082015260a0016020604051602081039080840390855afa158015611980573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151949350505050565b82356000908152602081905260409020548390829060ff1615611a155760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c6564000000000000000000000000000000000060448201526064016104b1565b428261010001351015611a6a5760405162461bcd60e51b815260206004820152600d60248201527f6f7264657220657870697265640000000000000000000000000000000000000060448201526064016104b1565b611aa0611a9a7f000000000000000000000000000000000000000000000000000000000000000061073b85611722565b8261182d565b73ffffffffffffffffffffffffffffffffffffffff16611ac66040840160208501614c35565b73ffffffffffffffffffffffffffffffffffffffff1614611b295760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b8435600090815260016020526040902054611b489060c0870135614f3a565b841115611b975760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d650060448201526064016104b1565b843560009081526001602052604081208054869290611bb7908490614ec5565b9091555060009050670de0b6b3a764000060a087013560c0880135611bdc8884614efd565b611be69190614edd565b611bf09190614efd565b611bfa9190614edd565b905073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166365a963aa611c486060890160408a01614c35565b60e089013533611c5e60408c0160208d01614c35565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201526024810193909352908316604483015290911660648201526084810184905260a401602060405180830381600087803b158015611ce357600080fd5b505af1158015611cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1b9190614d86565b611d675760405162461bcd60e51b815260206004820152601760248201527f7a63546f6b656e2065786368616e6765206661696c656400000000000000000060448201526064016104b1565b611d776060870160408801614c35565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd611da26040890160208a01614c35565b33611dad8986614f3a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064015b602060405180830381600087803b158015611e2257600080fd5b505af1158015611e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5a9190614d86565b5033611e6c6040880160208901614c35565b73ffffffffffffffffffffffffffffffffffffffff1687357fc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543611eb560808b0160608c01614d6a565b611ec560a08c0160808d01614d6a565b604080519215158352901515602083015281018a90526060810186905260800160405180910390a4505050505050565b82356000908152602081905260409020548390829060ff1615611f5a5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c6564000000000000000000000000000000000060448201526064016104b1565b428261010001351015611faf5760405162461bcd60e51b815260206004820152600d60248201527f6f7264657220657870697265640000000000000000000000000000000000000060448201526064016104b1565b611fdf611a9a7f000000000000000000000000000000000000000000000000000000000000000061073b85611722565b73ffffffffffffffffffffffffffffffffffffffff166120056040840160208501614c35565b73ffffffffffffffffffffffffffffffffffffffff16146120685760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b84356000908152600160205260409020546120879060a0870135614f3a565b8411156120d65760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d650060448201526064016104b1565b8435600090815260016020526040812080548692906120f6908490614ec5565b909155505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663bddbfbe46121476060880160408901614c35565b60e08801353361215d60408b0160208c01614c35565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201526024810193909352908316604483015290911660648201526084810187905260a401602060405180830381600087803b1580156121e257600080fd5b505af11580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a9190614d86565b6122665760405162461bcd60e51b815260206004820152601560248201527f7661756c742065786368616e6765206661696c6564000000000000000000000060448201526064016104b1565b6000670de0b6b3a764000060c087013560a08801356122858884614efd565b61228f9190614edd565b6122999190614efd565b6122a39190614edd565b90506122b56060870160408801614c35565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd6122e06040890160208a01614c35565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015233602482015260448101849052606401611e08565b82356000908152602081905260409020548390829060ff16156123a35760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c6564000000000000000000000000000000000060448201526064016104b1565b4282610100013510156123f85760405162461bcd60e51b815260206004820152600d60248201527f6f7264657220657870697265640000000000000000000000000000000000000060448201526064016104b1565b612428611a9a7f000000000000000000000000000000000000000000000000000000000000000061073b85611722565b73ffffffffffffffffffffffffffffffffffffffff1661244e6040840160208501614c35565b73ffffffffffffffffffffffffffffffffffffffff16146124b15760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b84356000908152600160205260409020546124d09060a0870135614f3a565b84111561251f5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d650060448201526064016104b1565b84356000908152600160205260408120805486929061253f908490614ec5565b909155507f0000000000000000000000000000000000000000000000000000000000000000905073ffffffffffffffffffffffffffffffffffffffff8116638c6b9b416125926060890160408a01614c35565b60e08901356125a760408b0160208c01614c35565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810188905260a401602060405180830381600087803b15801561262a57600080fd5b505af115801561263e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126629190614d86565b6126ae5760405162461bcd60e51b815260206004820152601560248201527f637573746f6469616c2065786974206661696c6564000000000000000000000060448201526064016104b1565b60006126c06060880160408901614c35565b90506000670de0b6b3a764000060c089013560a08a01356126e18a84614efd565b6126eb9190614edd565b6126f59190614efd565b6126ff9190614edd565b905073ffffffffffffffffffffffffffffffffffffffff82166323b872dd61272d60408b0160208c01614c35565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015233602482015260448101849052606401602060405180830381600087803b1580156127a057600080fd5b505af11580156127b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d89190614d86565b50600073ffffffffffffffffffffffffffffffffffffffff84166305e1dc2561280760608c0160408d01614c35565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908c01356024820152604401602060405180830381600087803b15801561287757600080fd5b505af115801561288b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128af9190614c58565b6040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018a905290915073ffffffffffffffffffffffffffffffffffffffff82169063852a12e390602401602060405180830381600087803b15801561291a57600080fd5b505af115801561292e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129529190614e1b565b1561299f5760405162461bcd60e51b815260206004820152601960248201527f636f6d706f756e6420726564656d7074696f6e206572726f720000000000000060448201526064016104b1565b73ffffffffffffffffffffffffffffffffffffffff831663a9059cbb6129cb60408c0160208d01614c35565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018b9052604401602060405180830381600087803b158015612a3857600080fd5b505af1158015612a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a709190614d86565b5033612a8260408b0160208c01614c35565b73ffffffffffffffffffffffffffffffffffffffff168a357fc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543612acb60808e0160608f01614d6a565b8d6080016020810190612ade9190614d6a565b604080519215158352901515602083015281018d9052606081018790526080015b60405180910390a4505050505050505050565b82356000908152602081905260409020548390829060ff1615612b775760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c6564000000000000000000000000000000000060448201526064016104b1565b428261010001351015612bcc5760405162461bcd60e51b815260206004820152600d60248201527f6f7264657220657870697265640000000000000000000000000000000000000060448201526064016104b1565b612bfc611a9a7f000000000000000000000000000000000000000000000000000000000000000061073b85611722565b73ffffffffffffffffffffffffffffffffffffffff16612c226040840160208501614c35565b73ffffffffffffffffffffffffffffffffffffffff1614612c855760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b8435600090815260016020526040902054612ca49060c0870135614f3a565b841115612cf35760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d650060448201526064016104b1565b843560009081526001602052604081208054869290612d13908490614ec5565b909155507f000000000000000000000000000000000000000000000000000000000000000090506000670de0b6b3a764000060a088013560c0890135612d598984614efd565b612d639190614edd565b612d6d9190614efd565b612d779190614edd565b905073ffffffffffffffffffffffffffffffffffffffff8216638c6b9b41612da560608a0160408b01614c35565b60e08a013533612dbb60408d0160208e01614c35565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201526024810193909352908316604483015290911660648201526084810184905260a401602060405180830381600087803b158015612e4057600080fd5b505af1158015612e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e789190614d86565b612ec45760405162461bcd60e51b815260206004820152601560248201527f637573746f6469616c2065786974206661696c6564000000000000000000000060448201526064016104b1565b6000612ed66060890160408a01614c35565b905073ffffffffffffffffffffffffffffffffffffffff81166323b872dd33612f0560408c0160208d01614c35565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604481018a9052606401602060405180830381600087803b158015612f7957600080fd5b505af1158015612f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb19190614d86565b50600073ffffffffffffffffffffffffffffffffffffffff84166305e1dc25612fe060608c0160408d01614c35565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908c01356024820152604401602060405180830381600087803b15801561305057600080fd5b505af1158015613064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130889190614c58565b6040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810185905290915073ffffffffffffffffffffffffffffffffffffffff82169063852a12e390602401602060405180830381600087803b1580156130f357600080fd5b505af1158015613107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312b9190614e1b565b156131785760405162461bcd60e51b815260206004820152601960248201527f636f6d706f756e6420726564656d7074696f6e204572726f720000000000000060448201526064016104b1565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90604401602060405180830381600087803b1580156131e657600080fd5b505af11580156131fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321e9190614d86565b503361323060408b0160208c01614c35565b73ffffffffffffffffffffffffffffffffffffffff168a357fc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c2254361327960808e0160608f01614d6a565b8d608001602081019061328c9190614d6a565b604080519215158352901515602083015281018d905260608101889052608001612aff565b82356000908152602081905260409020548390829060ff16156133165760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c6564000000000000000000000000000000000060448201526064016104b1565b42826101000135101561336b5760405162461bcd60e51b815260206004820152600d60248201527f6f7264657220657870697265640000000000000000000000000000000000000060448201526064016104b1565b61339b611a9a7f000000000000000000000000000000000000000000000000000000000000000061073b85611722565b73ffffffffffffffffffffffffffffffffffffffff166133c16040840160208501614c35565b73ffffffffffffffffffffffffffffffffffffffff16146134245760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b84356000908152600160205260409020546134439060c0870135614f3a565b8411156134925760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d650060448201526064016104b1565b8435600090815260016020526040812080548692906134b2908490614ec5565b90915550600090506134ca6060870160408801614c35565b905073ffffffffffffffffffffffffffffffffffffffff81166323b872dd336134f960408a0160208b01614c35565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015260448101889052606401602060405180830381600087803b15801561356d57600080fd5b505af1158015613581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a59190614d86565b506000670de0b6b3a764000060a088013560c08901356135c58984614efd565b6135cf9190614edd565b6135d99190614efd565b6135e39190614edd565b905073ffffffffffffffffffffffffffffffffffffffff82166323b872dd61361160408a0160208b01614c35565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015260448101849052606401602060405180830381600087803b15801561368457600080fd5b505af1158015613698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136bc9190614d86565b507f0000000000000000000000000000000000000000000000000000000000000000600073ffffffffffffffffffffffffffffffffffffffff82166305e1dc2561370c60608c0160408d01614c35565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908c01356024820152604401602060405180830381600087803b15801561377c57600080fd5b505af1158015613790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b49190614c58565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018690529192509085169063095ea7b390604401602060405180830381600087803b15801561382857600080fd5b505af115801561383c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138609190614d86565b506040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063a0712d6890602401602060405180830381600087803b1580156138c957600080fd5b505af11580156138dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139019190614e1b565b1561394e5760405162461bcd60e51b815260206004820152601560248201527f6d696e74696e672043546f6b656e206661696c6564000000000000000000000060448201526064016104b1565b73ffffffffffffffffffffffffffffffffffffffff821663f8e51bcb61397a60608c0160408d01614c35565b60e08c013561398f60408e0160208f01614c35565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810186905260a4015b602060405180830381600087803b158015613a1357600080fd5b505af1158015613a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4b9190614d86565b613a975760405162461bcd60e51b815260206004820152601960248201527f637573746f6469616c20696e697469617465206661696c65640000000000000060448201526064016104b1565b33613aa860408b0160208c01614c35565b73ffffffffffffffffffffffffffffffffffffffff168a357f8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa2861327960808e0160608f01614d6a565b82356000908152602081905260409020548390829060ff1615613b565760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c6564000000000000000000000000000000000060448201526064016104b1565b428261010001351015613bab5760405162461bcd60e51b815260206004820152600d60248201527f6f7264657220657870697265640000000000000000000000000000000000000060448201526064016104b1565b613bdb611a9a7f000000000000000000000000000000000000000000000000000000000000000061073b85611722565b73ffffffffffffffffffffffffffffffffffffffff16613c016040840160208501614c35565b73ffffffffffffffffffffffffffffffffffffffff1614613c645760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b8435600090815260016020526040902054613c839060a0870135614f3a565b841115613cd25760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d650060448201526064016104b1565b843560009081526001602052604081208054869290613cf2908490614ec5565b9091555060009050613d0a6060870160408801614c35565b90506000670de0b6b3a764000060c088013560a0890135613d2b8984614efd565b613d359190614edd565b613d3f9190614efd565b613d499190614edd565b905073ffffffffffffffffffffffffffffffffffffffff82166323b872dd613d7760408a0160208b01614c35565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015233602482015260448101849052606401602060405180830381600087803b158015613dea57600080fd5b505af1158015613dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e229190614d86565b506040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810187905273ffffffffffffffffffffffffffffffffffffffff8316906323b872dd90606401602060405180830381600087803b158015613e9757600080fd5b505af1158015613eab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ecf9190614d86565b507f0000000000000000000000000000000000000000000000000000000000000000600073ffffffffffffffffffffffffffffffffffffffff82166305e1dc25613f1f60608c0160408d01614c35565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908c01356024820152604401602060405180830381600087803b158015613f8f57600080fd5b505af1158015613fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc79190614c58565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018b90529192509085169063095ea7b390604401602060405180830381600087803b15801561403b57600080fd5b505af115801561404f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140739190614d86565b506040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff82169063a0712d6890602401602060405180830381600087803b1580156140dc57600080fd5b505af11580156140f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141149190614e1b565b156141615760405162461bcd60e51b815260206004820152601560248201527f6d696e74696e672043546f6b656e204661696c6564000000000000000000000060448201526064016104b1565b73ffffffffffffffffffffffffffffffffffffffff821663f8e51bcb61418d60608c0160408d01614c35565b8b60e00135338d60200160208101906141a69190614c35565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602481019390935290831660448301529091166064820152608481018b905260a4016139f9565b82356000908152602081905260409020548390829060ff161561427b5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c6564000000000000000000000000000000000060448201526064016104b1565b4282610100013510156142d05760405162461bcd60e51b815260206004820152600d60248201527f6f7264657220657870697265640000000000000000000000000000000000000060448201526064016104b1565b614300611a9a7f000000000000000000000000000000000000000000000000000000000000000061073b85611722565b73ffffffffffffffffffffffffffffffffffffffff166143266040840160208501614c35565b73ffffffffffffffffffffffffffffffffffffffff16146143895760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b84356000908152600160205260409020546143a89060a0870135614f3a565b8411156143f75760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d650060448201526064016104b1565b843560009081526001602052604081208054869290614417908490614ec5565b9091555060009050670de0b6b3a764000060c087013560a088013561443c8884614efd565b6144469190614edd565b6144509190614efd565b61445a9190614edd565b905061446c6060870160408801614c35565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3361449860408a0160208b01614c35565b6144a2858a614f3a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381600087803b15801561451657600080fd5b505af115801561452a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061454e9190614d86565b5073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166365a963aa61459b6060890160408a01614c35565b60e08901356145b060408b0160208c01614c35565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810188905260a401602060405180830381600087803b15801561463357600080fd5b505af1158015614647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061466b9190614d86565b6146b75760405162461bcd60e51b815260206004820152601760248201527f7a63546f6b656e2065786368616e6765206661696c656400000000000000000060448201526064016104b1565b336146c86040880160208901614c35565b73ffffffffffffffffffffffffffffffffffffffff1687357f8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28611eb560808b0160608c01614d6a565b82356000908152602081905260409020548390829060ff16156147765760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c6564000000000000000000000000000000000060448201526064016104b1565b4282610100013510156147cb5760405162461bcd60e51b815260206004820152600d60248201527f6f7264657220657870697265640000000000000000000000000000000000000060448201526064016104b1565b6147fb611a9a7f000000000000000000000000000000000000000000000000000000000000000061073b85611722565b73ffffffffffffffffffffffffffffffffffffffff166148216040840160208501614c35565b73ffffffffffffffffffffffffffffffffffffffff16146148845760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016104b1565b84356000908152600160205260409020546148a39060c0870135614f3a565b8411156148f25760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d650060448201526064016104b1565b843560009081526001602052604081208054869290614912908490614ec5565b9091555061492890506060860160408701614c35565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd336149546040890160208a01614c35565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015260448101879052606401602060405180830381600087803b1580156149c857600080fd5b505af11580156149dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a009190614d86565b506000670de0b6b3a764000060a087013560c0880135614a208884614efd565b614a2a9190614edd565b614a349190614efd565b614a3e9190614edd565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663bddbfbe4614a8c6060890160408a01614c35565b60e0890135614aa160408b0160208c01614c35565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810184905260a401602060405180830381600087803b158015614b2457600080fd5b505af1158015614b38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b5c9190614d86565b6146b75760405162461bcd60e51b815260206004820152601560248201527f7661756c742065786368616e6765206661696c6564000000000000000000000060448201526064016104b1565b60008083601f840112614bb9578182fd5b50813567ffffffffffffffff811115614bd0578182fd5b602083019150836020606083028501011115614beb57600080fd5b9250929050565b60008083601f840112614c03578182fd5b50813567ffffffffffffffff811115614c1a578182fd5b6020830191508360208260051b8501011115614beb57600080fd5b600060208284031215614c46578081fd5b8135614c5181614fa0565b9392505050565b600060208284031215614c69578081fd5b8151614c5181614fa0565b600080600060608486031215614c88578182fd5b8335614c9381614fa0565b95602085013595506040909401359392505050565b60008060008060008060608789031215614cc0578182fd5b863567ffffffffffffffff80821115614cd7578384fd5b818901915089601f830112614cea578384fd5b813581811115614cf8578485fd5b8a602061012083028501011115614d0d578485fd5b602092830198509650908801359080821115614d27578384fd5b614d338a838b01614bf2565b90965094506040890135915080821115614d4b578384fd5b50614d5889828a01614ba8565b979a9699509497509295939492505050565b600060208284031215614d7b578081fd5b8135614c5181614fc5565b600060208284031215614d97578081fd5b8151614c5181614fc5565b600060208284031215614db3578081fd5b5035919050565b600080828403610180811215614dce578283fd5b61012080821215614ddd578384fd5b84935060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee083011215614e0f578283fd5b92959390920193505050565b600060208284031215614e2c578081fd5b5051919050565b600060208284031215614e44578081fd5b813560ff81168114614c51578182fd5b6000602080835283518082850152825b81811015614e8057858101830151858201604001528201614e64565b81811115614e915783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115614ed857614ed8614f8a565b500190565b600082614ef857634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614f3557614f35614f8a565b500290565b600082821015614f4c57614f4c614f8a565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614f8357614f83614f8a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114614fc257600080fd5b50565b8015158114614fc257600080fdfea26469706673582212201ed19fb58661a74fba202fc85baa1720222d9604a80a5332e8b33d8f67f5630064736f6c63430008040033"

// DeploySwivel deploys a new Ethereum contract, binding an instance of Swivel to it.
func DeploySwivel(auth *bind.TransactOpts, backend bind.ContractBackend, m common.Address) (common.Address, *types.Transaction, *Swivel, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SwivelBin), backend, m)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// Swivel is an auto generated Go binding around an Ethereum contract.
type Swivel struct {
	SwivelCaller     // Read-only binding to the contract
	SwivelTransactor // Write-only binding to the contract
	SwivelFilterer   // Log filterer for contract events
}

// SwivelCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwivelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwivelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwivelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwivelSession struct {
	Contract     *Swivel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwivelCallerSession struct {
	Contract *SwivelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SwivelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwivelTransactorSession struct {
	Contract     *SwivelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwivelRaw struct {
	Contract *Swivel // Generic contract binding to access the raw methods on
}

// SwivelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwivelCallerRaw struct {
	Contract *SwivelCaller // Generic read-only contract binding to access the raw methods on
}

// SwivelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwivelTransactorRaw struct {
	Contract *SwivelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwivel creates a new instance of Swivel, bound to a specific deployed contract.
func NewSwivel(address common.Address, backend bind.ContractBackend) (*Swivel, error) {
	contract, err := bindSwivel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// NewSwivelCaller creates a new read-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelCaller(address common.Address, caller bind.ContractCaller) (*SwivelCaller, error) {
	contract, err := bindSwivel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelCaller{contract: contract}, nil
}

// NewSwivelTransactor creates a new write-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelTransactor(address common.Address, transactor bind.ContractTransactor) (*SwivelTransactor, error) {
	contract, err := bindSwivel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelTransactor{contract: contract}, nil
}

// NewSwivelFilterer creates a new log filterer instance of Swivel, bound to a specific deployed contract.
func NewSwivelFilterer(address common.Address, filterer bind.ContractFilterer) (*SwivelFilterer, error) {
	contract, err := bindSwivel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwivelFilterer{contract: contract}, nil
}

// bindSwivel binds a generic wrapper to an already deployed contract.
func bindSwivel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.SwivelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transact(opts, method, params...)
}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelCaller) DOMAIN(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "DOMAIN")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelSession) DOMAIN() ([32]byte, error) {
	return _Swivel.Contract.DOMAIN(&_Swivel.CallOpts)
}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelCallerSession) DOMAIN() ([32]byte, error) {
	return _Swivel.Contract.DOMAIN(&_Swivel.CallOpts)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCaller) HOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "HOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCallerSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCaller) NAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCallerSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCallerSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCallerSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCaller) Cancelled(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "cancelled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCallerSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCaller) Filled(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "filled", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCaller) MarketPlace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "marketPlace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCallerSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "withdrawals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns()
func (_Swivel *SwivelTransactor) BlockWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockWithdrawal", e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns()
func (_Swivel *SwivelSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns()
func (_Swivel *SwivelTransactorSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactor) Cancel(opts *bind.TransactOpts, o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "cancel", o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactorSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x0908ff2d.
//
// Solidity: function combineTokens(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) CombineTokens(opts *bind.TransactOpts, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "combineTokens", u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x0908ff2d.
//
// Solidity: function combineTokens(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) CombineTokens(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x0908ff2d.
//
// Solidity: function combineTokens(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) CombineTokens(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, u, m, a)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Exit(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "exit", o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Initiate(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "initiate", o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns()
func (_Swivel *SwivelTransactor) ScheduleWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleWithdrawal", e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns()
func (_Swivel *SwivelSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns()
func (_Swivel *SwivelTransactorSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x92ae3764.
//
// Solidity: function splitUnderlying(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) SplitUnderlying(opts *bind.TransactOpts, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "splitUnderlying", u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x92ae3764.
//
// Solidity: function splitUnderlying(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) SplitUnderlying(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x92ae3764.
//
// Solidity: function splitUnderlying(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) SplitUnderlying(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, u, m, a)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns()
func (_Swivel *SwivelTransactor) Withdraw(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "withdraw", e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns()
func (_Swivel *SwivelSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns()
func (_Swivel *SwivelTransactorSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// SwivelCancelIterator is returned from FilterCancel and is used to iterate over the raw logs and unpacked data for Cancel events raised by the Swivel contract.
type SwivelCancelIterator struct {
	Event *SwivelCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelCancel represents a Cancel event raised by the Swivel contract.
type SwivelCancel struct {
	Key [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCancel is a free log retrieval operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) FilterCancel(opts *bind.FilterOpts, key [][32]byte) (*SwivelCancelIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return &SwivelCancelIterator{contract: _Swivel.contract, event: "Cancel", logs: logs, sub: sub}, nil
}

// WatchCancel is a free log subscription operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) WatchCancel(opts *bind.WatchOpts, sink chan<- *SwivelCancel, key [][32]byte) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelCancel)
				if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancel is a log parse operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) ParseCancel(log types.Log) (*SwivelCancel, error) {
	event := new(SwivelCancel)
	if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelExitIterator is returned from FilterExit and is used to iterate over the raw logs and unpacked data for Exit events raised by the Swivel contract.
type SwivelExitIterator struct {
	Event *SwivelExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelExit represents a Exit event raised by the Swivel contract.
type SwivelExit struct {
	Key    [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExit is a free log retrieval operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterExit(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelExitIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelExitIterator{contract: _Swivel.contract, event: "Exit", logs: logs, sub: sub}, nil
}

// WatchExit is a free log subscription operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchExit(opts *bind.WatchOpts, sink chan<- *SwivelExit, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelExit)
				if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExit is a log parse operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseExit(log types.Log) (*SwivelExit, error) {
	event := new(SwivelExit)
	if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelInitiateIterator is returned from FilterInitiate and is used to iterate over the raw logs and unpacked data for Initiate events raised by the Swivel contract.
type SwivelInitiateIterator struct {
	Event *SwivelInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelInitiate represents a Initiate event raised by the Swivel contract.
type SwivelInitiate struct {
	Key    [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterInitiate is a free log retrieval operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterInitiate(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelInitiateIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelInitiateIterator{contract: _Swivel.contract, event: "Initiate", logs: logs, sub: sub}, nil
}

// WatchInitiate is a free log subscription operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchInitiate(opts *bind.WatchOpts, sink chan<- *SwivelInitiate, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelInitiate)
				if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiate is a log parse operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseInitiate(log types.Log) (*SwivelInitiate, error) {
	event := new(SwivelInitiate)
	if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelWithdrawalScheduledIterator is returned from FilterWithdrawalScheduled and is used to iterate over the raw logs and unpacked data for WithdrawalScheduled events raised by the Swivel contract.
type SwivelWithdrawalScheduledIterator struct {
	Event *SwivelWithdrawalScheduled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelWithdrawalScheduledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelWithdrawalScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelWithdrawalScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelWithdrawalScheduledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelWithdrawalScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelWithdrawalScheduled represents a WithdrawalScheduled event raised by the Swivel contract.
type SwivelWithdrawalScheduled struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalScheduled is a free log retrieval operation binding the contract event 0xd9cf0116e5bb6fbe3d257dc8d1ee7ae76c303efeae77f1e93024d2cb218bedd3.
//
// Solidity: event WithdrawalScheduled(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterWithdrawalScheduled(opts *bind.FilterOpts, token []common.Address) (*SwivelWithdrawalScheduledIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "WithdrawalScheduled", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelWithdrawalScheduledIterator{contract: _Swivel.contract, event: "WithdrawalScheduled", logs: logs, sub: sub}, nil
}

// WatchWithdrawalScheduled is a free log subscription operation binding the contract event 0xd9cf0116e5bb6fbe3d257dc8d1ee7ae76c303efeae77f1e93024d2cb218bedd3.
//
// Solidity: event WithdrawalScheduled(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchWithdrawalScheduled(opts *bind.WatchOpts, sink chan<- *SwivelWithdrawalScheduled, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "WithdrawalScheduled", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelWithdrawalScheduled)
				if err := _Swivel.contract.UnpackLog(event, "WithdrawalScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalScheduled is a log parse operation binding the contract event 0xd9cf0116e5bb6fbe3d257dc8d1ee7ae76c303efeae77f1e93024d2cb218bedd3.
//
// Solidity: event WithdrawalScheduled(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseWithdrawalScheduled(log types.Log) (*SwivelWithdrawalScheduled, error) {
	event := new(SwivelWithdrawalScheduled)
	if err := _Swivel.contract.UnpackLog(event, "WithdrawalScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
