// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package lender

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SwivelComponents is an auto generated low-level Go binding around an user-defined struct.
type SwivelComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelOrder is an auto generated low-level Go binding around an user-defined struct.
type SwivelOrder struct {
	Key        [32]byte
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// LenderABI is the input ABI used to generate the binding from.
const LenderABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"principal\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returned\",\"type\":\"uint256\"}],\"name\":\"Lend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"principal\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"illuminate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"y\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structSwivel.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSwivel.Components[]\",\"name\":\"s\",\"type\":\"tuple[]\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"i\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"y\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"x\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendleAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"f\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"i\",\"type\":\"address\"}],\"name\":\"setIlluminateAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swivelAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tempusAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// LenderBin is the compiled bytecode used for deploying new contracts.
var LenderBin = "0x60806040523480156200001157600080fd5b50604051620032eb380380620032eb8339810160408190526200003491620000a5565b600080546001600160a01b03199081163317909155600280546001600160a01b039586169083161790556003805493851693821693909317909255600480549190931691161790556103e8600555620000ef565b80516001600160a01b0381168114620000a057600080fd5b919050565b600080600060608486031215620000bb57600080fd5b620000c68462000088565b9250620000d66020850162000088565b9150620000e66040850162000088565b90509250925092565b6131ec80620000ff6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063d5907c3611610097578063ef60356911610066578063ef6035691461021a578063f1aa654e1461022d578063f3cf26f314610240578063f851a4401461025357600080fd5b8063d5907c36146101ce578063dc4c7ca9146101e1578063de1d3cb5146101f4578063ea08c0311461020757600080fd5b806369fe0e2d116100d357806369fe0e2d146101745780637431dfed146101875780639e6b51731461019a578063cbf7e670146101a357600080fd5b80630504bbbe146101055780630f07b2991461012b5780634135c9d11461014e5780635b1e5fc214610161575b600080fd5b6101186101133660046124b4565b610266565b6040519081526020015b60405180910390f35b61013e610139366004612524565b6105d5565b6040519015158152602001610122565b61011861015c366004612548565b61069e565b61011861016f366004612676565b610b70565b61013e610182366004612752565b610dc3565b610118610195366004612789565b610e43565b61011860055481565b6001546101b6906001600160a01b031681565b6040516001600160a01b039091168152602001610122565b6101186101dc3660046127f4565b611178565b61013e6101ef366004612869565b6115dd565b6004546101b6906001600160a01b031681565b6002546101b6906001600160a01b031681565b6003546101b6906001600160a01b031681565b61011861023b3660046128ad565b6117d5565b61011861024e366004612906565b611b4e565b6000546101b6906001600160a01b031681565b6001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820188905260009283929116906317b3bba790604401610100604051808303816000875af11580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190612a31565b9050876001600160a01b0316818a60ff166008811061031c5761031c612ab9565b60200201516001600160a01b0316631e5f74a16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190612ae8565b6001600160a01b0316146103f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f617077696e65207072696e6369706c6520213d207072696e6369706c6500000060448201526064015b60405180910390fd5b6000600554876104079190612b34565b905060006104158289612b6f565b600154909150610432908b9033906001600160a01b0316856120cc565b61043e8a3330846120cc565b6040517f5dde4ba6000000000000000000000000000000000000000000000000000000008152600481018690526001602482015260448101829052600060648201819052608482018990523060a4830152906001600160a01b03881690635dde4ba69060c4016020604051808303816000875af11580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190612b86565b905083600060200201516040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f19906044016020604051808303816000875af1158015610558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057c9190612bdc565b506040805160ff8e168152602081018390528b916001600160a01b038e16917f26e45da718e624ee4c0a2c979b1436c3b050d3ef1197fdb210e20002900457d9910160405180910390a39b9a5050505050505050505050565b600080546001600160a01b031633811461064b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a65640000000000000060448201526064016103ee565b6001546001600160a01b03161561066157600080fd5b600180546001600160a01b0385167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116178155915050919050565b6001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301526024820187905260009283929116906317b3bba790604401610100604051808303816000875af115801561070f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107339190612a31565b90506000818960ff166008811061074c5761074c612ab9565b602002015190506000819050886001600160a01b0316816001600160a01b03166376d5de856040518163ffffffff1660e01b81526004016020604051808303816000875af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190612ae8565b6001600160a01b031614610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f70656e646c6520756e6465726c79696e6720213d20756e6465726c79696e670060448201526064016103ee565b87816001600160a01b031663e184c9be6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b9190612b86565b14610902576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f70656e646c65206d6174757269747920213d206d61747572697479000000000060448201526064016103ee565b61090e8933308a6120cc565b604080516002808252606082018352600092602083019080368337019050509050898160008151811061094357610943612ab9565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061097757610977612ab9565b6001600160a01b0392831660209182029290920101526003546040517f38ed173900000000000000000000000000000000000000000000000000000000815260009291909116906338ed1739906109da908c908c90879030908e90600401612bf9565b6000604051808303816000875af11580156109f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a3f9190810190612c6a565b600081518110610a5157610a51612ab9565b6020026020010151905060008560006007811115610a7157610a71612b9f565b60ff1660088110610a8457610a84612ab9565b60200201516040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490529091506001600160a01b038216906340c10f19906044016020604051808303816000875af1158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190612bdc565b506040805160ff8f168152602081018490528c916001600160a01b038f16917f26e45da718e624ee4c0a2c979b1436c3b050d3ef1197fdb210e20002900457d9910160405180910390a3509b9a5050505050505050505050565b60008080805b88811015610d145760008a8a83818110610b9257610b92612ab9565b90506101200201803603810190610ba99190612d1b565b90508c8160e0015114610c18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f73776976656c206d6174757269747920213d206d61747572697479000000000060448201526064016103ee565b8d6001600160a01b031681604001516001600160a01b031614610c97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f73776976656c20756e6465726c79696e6720213d20756e6465726c79696e670060448201526064016103ee565b888883818110610ca957610ca9612ab9565b9050602002013584610cbb9190612db2565b93508060a001518160c00151610cd19190612b34565b898984818110610ce357610ce3612ab9565b90506020020135610cf49190612dca565b610cfe9084612db2565b9250508080610d0c90612e07565b915050610b76565b50610d218c3330856120cc565b6002546040517fd2144f580000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d2144f5890610d74908c908c908c908c908c908c90600401612ee3565b6020604051808303816000875af1158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db79190612bdc565b50610b168c8b8361219c565b600080546001600160a01b0316338114610e39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a65640000000000000060448201526064016103ee565b5050600555600190565b6001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820188905260009283929116906317b3bba790604401610100604051808303816000875af1158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190612a31565b8960ff1660088110610eec57610eec612ab9565b60200201519050876001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610f3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f619190612ae8565b6001600160a01b031614610fd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f73656e736520756e6465726c79696e6720213d20756e6465726c79696e67000060448201526064016103ee565b6000600554856fffffffffffffffffffffffffffffffff16610ff39190612b34565b90506000611013826fffffffffffffffffffffffffffffffff8816612b6f565b600154909150611030908b9033906001600160a01b0316856120cc565b61103c8a3330846120cc565b6040517f8f1f30f00000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018b90526044820183905260648201879052600091908a1690638f1f30f0906084016020604051808303816000875af11580156110b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110da9190612b86565b6001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152602482018e9052929350600092909116906317b3bba790604401610100604051808303816000875af115801561114d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111719190612a31565b6000610a84565b6001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526024820189905260009283929116906317b3bba790604401610100604051808303816000875af11580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d9190612a31565b8a60ff166008811061122157611221612ab9565b60200201519050886001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112969190612ae8565b6001600160a01b0316146112e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600060248201526044016103ee565b87816001600160a01b031663aa082a9d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113459190612b86565b14611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600060248201526044016103ee565b6001546005546113ad918b9133916001600160a01b0316906113a8908a612b34565b6120cc565b6113cb893330600554896113c19190612b34565b6113a8908a612b6f565b6040805160808101825230808252602082015260008183018190526060820181905282516101208101845260c0810184815292939192909182919061317760e08401398152602001898152602001600554896114279190612b34565b611431908a612b6f565b8152600060208201526001600160a01b03808e16604080840182905260015490517f17b3bba70000000000000000000000000000000000000000000000000000000081526004810192909252602482018f9052606090930192909116906317b3bba790604401610100604051808303816000875af11580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190612a31565b8e60ff16600881106114ef576114ef612ab9565b60200201516001600160a01b031681525090506000896001600160a01b03166369bbd8cd83858a8a6040518563ffffffff1660e01b8152600401611536949392919061300d565b6020604051808303816000875af1158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190612b86565b90508a8c6001600160a01b03167f26e45da718e624ee4c0a2c979b1436c3b050d3ef1197fdb210e20002900457d98f846040516115c592919060ff929092168252602082015260400190565b60405180910390a39c9b505050505050505050505050565b6001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820185905260009283929116906317b3bba790604401610100604051808303816000875af115801561164e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116729190612a31565b90506000600554846116849190612b34565b905060006116928286612b6f565b90506116b9838960ff16600881106116ac576116ac612ab9565b60200201513330846120cc565b6116ea838960ff16600881106116d1576116d1612ab9565b602002015160015433906001600160a01b0316856120cc565b82600060200201516040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f19906044016020604051808303816000875af1158015611759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177d9190612bdc565b506040805160ff8a1681526020810187905287916001600160a01b038a16917f309b03ba657e17f1beadbc6eb3c06ba79b38084eb8d0e5452cc222462a17f1f6910160405180910390a3506001979650505050505050565b600080839050856001600160a01b0316816001600160a01b0316635001f3b56040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118499190612ae8565b6001600160a01b0316146118b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7969656c64206261736520213d20756e6465726c79696e67000000000000000060448201526064016103ee565b84816001600160a01b031663204f83f96040518163ffffffff1660e01b81526004016020604051808303816000875af11580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e9190613133565b63ffffffff161461198b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7969656c64206d6174757269747920213d206d6174757269747900000000000060448201526064016103ee565b611997863330866120cc565b60006119a487868661219c565b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff891601611afa576001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526024820189905260009216906317b3bba790604401610100604051808303816000875af1158015611a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a629190612a31565b905080600060200201516040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b03909116906340c10f19906044016020604051808303816000875af1158015611ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af79190612bdc565b50505b6040805160ff8a1681526020810183905287916001600160a01b038a16917f26e45da718e624ee4c0a2c979b1436c3b050d3ef1197fdb210e20002900457d9910160405180910390a3979650505050505050565b6001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526024820189905260009283929116906317b3bba790604401610100604051808303816000875af1158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be39190612a31565b8a60ff1660088110611bf757611bf7612ab9565b60200201519050886001600160a01b0316816001600160a01b0316632d81f8386040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190612ae8565b6001600160a01b031614611cda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f74656d70757320756e6465726c79696e6720213d20756e6465726c79696e670060448201526064016103ee565b87816001600160a01b0316634e8bfdaa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3d9190612b86565b14611da4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f74656d707573206d6174757269747920213d206d61747572697479000000000060448201526064016103ee565b6001546005548a91611dca91839133916001600160a01b03909116906113a8908d612b34565b611de88133306005548c611dde9190612b34565b6113a8908d612b6f565b6001546040517f17b3bba70000000000000000000000000000000000000000000000000000000081526001600160a01b038c81166004830152602482018c905260009216906317b3bba790604401610100604051808303816000875af1158015611e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7a9190612a31565b600060200201516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0a9190612b86565b600460009054906101000a90046001600160a01b03166001600160a01b0316634f255a1f8a8a6005548f611f3e9190612b34565b8f611f499190612b6f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039384166004820152929091166024830152604482015260016064820152608481018d905260a481018a905260c4016020604051808303816000875af1158015611fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fee9190612b86565b611ff89190612b6f565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018290529091506001600160a01b038316906340c10f19906044016020604051808303816000875af1158015612061573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120859190612bdc565b506040805160ff8f168152602081018390528c916001600160a01b038f16917f26e45da718e624ee4c0a2c979b1436c3b050d3ef1197fdb210e20002900457d991016115c5565b60006040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526001600160a01b038416602482015282604482015260008060648360008a5af191505061212f81612317565b612195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7472616e736665722066726f6d206661696c656400000000000000000000000060448201526064016103ee565b5050505050565b600080836001600160a01b03166313e7bc8c6121b785612361565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526fffffffffffffffffffffffffffffffff90911660048201526024016020604051808303816000875af115801561221e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122429190613159565b90506122618585836fffffffffffffffffffffffffffffffff166123bb565b6040517fbcc1694f0000000000000000000000000000000000000000000000000000000081523060048201526fffffffffffffffffffffffffffffffff821660248201526001600160a01b0385169063bcc1694f906044016020604051808303816000875af11580156122d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fc9190613159565b506fffffffffffffffffffffffffffffffff16949350505050565b6000803d8361232a57806000803e806000fd5b80602081146123425780156123535760009250612358565b816000803e60005115159250612358565b600192505b50909392505050565b60006fffffffffffffffffffffffffffffffff8211156123b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600060248201526044016103ee565b5090565b60006040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201528260248201526000806044836000895af191505061240f81612317565b612475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016103ee565b50505050565b803560ff8116811461248c57600080fd5b919050565b6001600160a01b03811681146124a657600080fd5b50565b803561248c81612491565b600080600080600080600060e0888a0312156124cf57600080fd5b6124d88861247b565b965060208801356124e881612491565b955060408801359450606088013593506080880135925060a088013561250d81612491565b8092505060c0880135905092959891949750929550565b60006020828403121561253657600080fd5b813561254181612491565b9392505050565b60008060008060008060c0878903121561256157600080fd5b61256a8761247b565b9550602087013561257a81612491565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008083601f8401126125b157600080fd5b50813567ffffffffffffffff8111156125c957600080fd5b602083019150836020610120830285010111156125e557600080fd5b9250929050565b60008083601f8401126125fe57600080fd5b50813567ffffffffffffffff81111561261657600080fd5b6020830191508360208260051b85010111156125e557600080fd5b60008083601f84011261264357600080fd5b50813567ffffffffffffffff81111561265b57600080fd5b6020830191508360206060830285010111156125e557600080fd5b60008060008060008060008060008060e08b8d03121561269557600080fd5b61269e8b61247b565b995060208b01356126ae81612491565b985060408b0135975060608b01356126c581612491565b965060808b013567ffffffffffffffff808211156126e257600080fd5b6126ee8e838f0161259f565b909850965060a08d013591508082111561270757600080fd5b6127138e838f016125ec565b909650945060c08d013591508082111561272c57600080fd5b506127398d828e01612631565b915080935050809150509295989b9194979a5092959850565b60006020828403121561276457600080fd5b5035919050565b6fffffffffffffffffffffffffffffffff811681146124a657600080fd5b600080600080600080600060e0888a0312156127a457600080fd5b6127ad8861247b565b965060208801356127bd81612491565b95506040880135945060608801356127d481612491565b935060808801356127e481612491565b925060a088013561250d8161276b565b600080600080600080600080610100898b03121561281157600080fd5b61281a8961247b565b9750602089013561282a81612491565b965060408901359550606089013561284181612491565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b6000806000806080858703121561287f57600080fd5b6128888561247b565b9350602085013561289881612491565b93969395505050506040820135916060013590565b600080600080600060a086880312156128c557600080fd5b6128ce8661247b565b945060208601356128de81612491565b93506040860135925060608601356128f581612491565b949793965091946080013592915050565b600080600080600080600080610100898b03121561292357600080fd5b61292c8961247b565b9750602089013561293c81612491565b965060408901359550606089013594506080890135935060a089013561296181612491565b925060c089013561297181612491565b8092505060e089013590509295985092959890939650565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156129dc576129dc612989565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612a2957612a29612989565b604052919050565b6000610100808385031215612a4557600080fd5b83601f840112612a5457600080fd5b60405181810181811067ffffffffffffffff82111715612a7657612a76612989565b604052908301908085831115612a8b57600080fd5b845b83811015612aae578051612aa081612491565b825260209182019101612a8d565b509095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612afa57600080fd5b815161254181612491565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612b6a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015612b8157612b81612b05565b500390565b600060208284031215612b9857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b80151581146124a657600080fd5b600060208284031215612bee57600080fd5b815161254181612bce565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612c495784516001600160a01b031683529383019391830191600101612c24565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215612c7d57600080fd5b825167ffffffffffffffff80821115612c9557600080fd5b818501915085601f830112612ca957600080fd5b815181811115612cbb57612cbb612989565b8060051b9150612ccc8483016129e2565b8181529183018401918481019088841115612ce657600080fd5b938501935b83851015612d0457845182529385019390850190612ceb565b98975050505050505050565b803561248c81612bce565b60006101208284031215612d2e57600080fd5b612d366129b8565b82358152612d46602084016124a9565b6020820152612d57604084016124a9565b6040820152612d6860608401612d10565b6060820152612d7960808401612d10565b608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b60008219821115612dc557612dc5612b05565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e0257612e02612b05565b500290565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e3857612e38612b05565b5060010190565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612e7157600080fd5b8260051b8083602087013760009401602001938452509192915050565b8183526000602080850194508260005b85811015612ed85760ff612eb18361247b565b16875281830135838801526040808301359088015260609687019690910190600101612e9e565b509495945050505050565b606080825281810187905260009060808084018a845b8b811015612f995781358352602080830135612f1481612491565b6001600160a01b0316908401526040612f2e8382016124a9565b6001600160a01b031690840152612f46828601612d10565b151585840152612f57828501612d10565b15158484015260a0828101359084015260c0808301359084015260e0808301359084015261010080830135908401526101209283019290910190600101612ef9565b50508481036020860152612fae81898b612e3f565b925050508281036040840152612fc5818587612e8e565b9998505050505050505050565b60028110613009577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b60e081526000855160c060e08401528051806101a085015260005b818110156130465760208184018101516101c0878401015201613028565b818111156130595760006101c083870101525b506020880151610100850152604088015161012085015260608801519150613085610140850183612fd2565b60808801516001600160a01b038116610160860152915060a08801516001600160a01b0381166101808601529150601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01683016101c0019150613121905060208301866001600160a01b03808251168352806020830151166020840152506040810151151560408301526060810151151560608301525050565b60a082019390935260c0015292915050565b60006020828403121561314557600080fd5b815163ffffffff8116811461254157600080fd5b60006020828403121561316b57600080fd5b81516125418161276b56fe30783030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030a264697066735822122060ee57ef2aa36abc336b2b4881f6a1168e622c61c0d35f47eee59783e0d9f89864736f6c634300080d0033"

// DeployLender deploys a new Ethereum contract, binding an instance of Lender to it.
func DeployLender(auth *bind.TransactOpts, backend bind.ContractBackend, s common.Address, p common.Address, t common.Address) (common.Address, *types.Transaction, *Lender, error) {
	parsed, err := abi.JSON(strings.NewReader(LenderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LenderBin), backend, s, p, t)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Lender{LenderCaller: LenderCaller{contract: contract}, LenderTransactor: LenderTransactor{contract: contract}, LenderFilterer: LenderFilterer{contract: contract}}, nil
}

// Lender is an auto generated Go binding around an Ethereum contract.
type Lender struct {
	LenderCaller     // Read-only binding to the contract
	LenderTransactor // Write-only binding to the contract
	LenderFilterer   // Log filterer for contract events
}

// LenderCaller is an auto generated read-only Go binding around an Ethereum contract.
type LenderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LenderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LenderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LenderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LenderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LenderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LenderSession struct {
	Contract     *Lender           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LenderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LenderCallerSession struct {
	Contract *LenderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// LenderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LenderTransactorSession struct {
	Contract     *LenderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LenderRaw is an auto generated low-level Go binding around an Ethereum contract.
type LenderRaw struct {
	Contract *Lender // Generic contract binding to access the raw methods on
}

// LenderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LenderCallerRaw struct {
	Contract *LenderCaller // Generic read-only contract binding to access the raw methods on
}

// LenderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LenderTransactorRaw struct {
	Contract *LenderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLender creates a new instance of Lender, bound to a specific deployed contract.
func NewLender(address common.Address, backend bind.ContractBackend) (*Lender, error) {
	contract, err := bindLender(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Lender{LenderCaller: LenderCaller{contract: contract}, LenderTransactor: LenderTransactor{contract: contract}, LenderFilterer: LenderFilterer{contract: contract}}, nil
}

// NewLenderCaller creates a new read-only instance of Lender, bound to a specific deployed contract.
func NewLenderCaller(address common.Address, caller bind.ContractCaller) (*LenderCaller, error) {
	contract, err := bindLender(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LenderCaller{contract: contract}, nil
}

// NewLenderTransactor creates a new write-only instance of Lender, bound to a specific deployed contract.
func NewLenderTransactor(address common.Address, transactor bind.ContractTransactor) (*LenderTransactor, error) {
	contract, err := bindLender(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LenderTransactor{contract: contract}, nil
}

// NewLenderFilterer creates a new log filterer instance of Lender, bound to a specific deployed contract.
func NewLenderFilterer(address common.Address, filterer bind.ContractFilterer) (*LenderFilterer, error) {
	contract, err := bindLender(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LenderFilterer{contract: contract}, nil
}

// bindLender binds a generic wrapper to an already deployed contract.
func bindLender(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LenderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Lender *LenderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Lender.Contract.LenderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Lender *LenderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Lender.Contract.LenderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Lender *LenderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Lender.Contract.LenderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Lender *LenderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Lender.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Lender *LenderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Lender.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Lender *LenderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Lender.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Lender *LenderCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Lender.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Lender *LenderSession) Admin() (common.Address, error) {
	return _Lender.Contract.Admin(&_Lender.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Lender *LenderCallerSession) Admin() (common.Address, error) {
	return _Lender.Contract.Admin(&_Lender.CallOpts)
}

// Feenominator is a free data retrieval call binding the contract method 0x9e6b5173.
//
// Solidity: function feenominator() view returns(uint256)
func (_Lender *LenderCaller) Feenominator(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Lender.contract.Call(opts, &out, "feenominator")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Feenominator is a free data retrieval call binding the contract method 0x9e6b5173.
//
// Solidity: function feenominator() view returns(uint256)
func (_Lender *LenderSession) Feenominator() (*big.Int, error) {
	return _Lender.Contract.Feenominator(&_Lender.CallOpts)
}

// Feenominator is a free data retrieval call binding the contract method 0x9e6b5173.
//
// Solidity: function feenominator() view returns(uint256)
func (_Lender *LenderCallerSession) Feenominator() (*big.Int, error) {
	return _Lender.Contract.Feenominator(&_Lender.CallOpts)
}

// Illuminate is a free data retrieval call binding the contract method 0xcbf7e670.
//
// Solidity: function illuminate() view returns(address)
func (_Lender *LenderCaller) Illuminate(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Lender.contract.Call(opts, &out, "illuminate")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Illuminate is a free data retrieval call binding the contract method 0xcbf7e670.
//
// Solidity: function illuminate() view returns(address)
func (_Lender *LenderSession) Illuminate() (common.Address, error) {
	return _Lender.Contract.Illuminate(&_Lender.CallOpts)
}

// Illuminate is a free data retrieval call binding the contract method 0xcbf7e670.
//
// Solidity: function illuminate() view returns(address)
func (_Lender *LenderCallerSession) Illuminate() (common.Address, error) {
	return _Lender.Contract.Illuminate(&_Lender.CallOpts)
}

// PendleAddr is a free data retrieval call binding the contract method 0xef603569.
//
// Solidity: function pendleAddr() view returns(address)
func (_Lender *LenderCaller) PendleAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Lender.contract.Call(opts, &out, "pendleAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendleAddr is a free data retrieval call binding the contract method 0xef603569.
//
// Solidity: function pendleAddr() view returns(address)
func (_Lender *LenderSession) PendleAddr() (common.Address, error) {
	return _Lender.Contract.PendleAddr(&_Lender.CallOpts)
}

// PendleAddr is a free data retrieval call binding the contract method 0xef603569.
//
// Solidity: function pendleAddr() view returns(address)
func (_Lender *LenderCallerSession) PendleAddr() (common.Address, error) {
	return _Lender.Contract.PendleAddr(&_Lender.CallOpts)
}

// SwivelAddr is a free data retrieval call binding the contract method 0xea08c031.
//
// Solidity: function swivelAddr() view returns(address)
func (_Lender *LenderCaller) SwivelAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Lender.contract.Call(opts, &out, "swivelAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SwivelAddr is a free data retrieval call binding the contract method 0xea08c031.
//
// Solidity: function swivelAddr() view returns(address)
func (_Lender *LenderSession) SwivelAddr() (common.Address, error) {
	return _Lender.Contract.SwivelAddr(&_Lender.CallOpts)
}

// SwivelAddr is a free data retrieval call binding the contract method 0xea08c031.
//
// Solidity: function swivelAddr() view returns(address)
func (_Lender *LenderCallerSession) SwivelAddr() (common.Address, error) {
	return _Lender.Contract.SwivelAddr(&_Lender.CallOpts)
}

// TempusAddr is a free data retrieval call binding the contract method 0xde1d3cb5.
//
// Solidity: function tempusAddr() view returns(address)
func (_Lender *LenderCaller) TempusAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Lender.contract.Call(opts, &out, "tempusAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TempusAddr is a free data retrieval call binding the contract method 0xde1d3cb5.
//
// Solidity: function tempusAddr() view returns(address)
func (_Lender *LenderSession) TempusAddr() (common.Address, error) {
	return _Lender.Contract.TempusAddr(&_Lender.CallOpts)
}

// TempusAddr is a free data retrieval call binding the contract method 0xde1d3cb5.
//
// Solidity: function tempusAddr() view returns(address)
func (_Lender *LenderCallerSession) TempusAddr() (common.Address, error) {
	return _Lender.Contract.TempusAddr(&_Lender.CallOpts)
}

// Lend is a paid mutator transaction binding the contract method 0x0504bbbe.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, address pool, uint256 i) returns(uint256)
func (_Lender *LenderTransactor) Lend(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, pool common.Address, i *big.Int) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "lend", p, u, m, a, r, pool, i)
}

// Lend is a paid mutator transaction binding the contract method 0x0504bbbe.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, address pool, uint256 i) returns(uint256)
func (_Lender *LenderSession) Lend(p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, pool common.Address, i *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend(&_Lender.TransactOpts, p, u, m, a, r, pool, i)
}

// Lend is a paid mutator transaction binding the contract method 0x0504bbbe.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, address pool, uint256 i) returns(uint256)
func (_Lender *LenderTransactorSession) Lend(p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, pool common.Address, i *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend(&_Lender.TransactOpts, p, u, m, a, r, pool, i)
}

// Lend0 is a paid mutator transaction binding the contract method 0x4135c9d1.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, uint256 d) returns(uint256)
func (_Lender *LenderTransactor) Lend0(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, d *big.Int) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "lend0", p, u, m, a, r, d)
}

// Lend0 is a paid mutator transaction binding the contract method 0x4135c9d1.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, uint256 d) returns(uint256)
func (_Lender *LenderSession) Lend0(p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, d *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend0(&_Lender.TransactOpts, p, u, m, a, r, d)
}

// Lend0 is a paid mutator transaction binding the contract method 0x4135c9d1.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, uint256 d) returns(uint256)
func (_Lender *LenderTransactorSession) Lend0(p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, d *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend0(&_Lender.TransactOpts, p, u, m, a, r, d)
}

// Lend1 is a paid mutator transaction binding the contract method 0x5b1e5fc2.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address y, (bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] s) returns(uint256)
func (_Lender *LenderTransactor) Lend1(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, y common.Address, o []SwivelOrder, a []*big.Int, s []SwivelComponents) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "lend1", p, u, m, y, o, a, s)
}

// Lend1 is a paid mutator transaction binding the contract method 0x5b1e5fc2.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address y, (bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] s) returns(uint256)
func (_Lender *LenderSession) Lend1(p uint8, u common.Address, m *big.Int, y common.Address, o []SwivelOrder, a []*big.Int, s []SwivelComponents) (*types.Transaction, error) {
	return _Lender.Contract.Lend1(&_Lender.TransactOpts, p, u, m, y, o, a, s)
}

// Lend1 is a paid mutator transaction binding the contract method 0x5b1e5fc2.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address y, (bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] s) returns(uint256)
func (_Lender *LenderTransactorSession) Lend1(p uint8, u common.Address, m *big.Int, y common.Address, o []SwivelOrder, a []*big.Int, s []SwivelComponents) (*types.Transaction, error) {
	return _Lender.Contract.Lend1(&_Lender.TransactOpts, p, u, m, y, o, a, s)
}

// Lend2 is a paid mutator transaction binding the contract method 0x7431dfed.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address x, address s, uint128 a, uint256 r) returns(uint256)
func (_Lender *LenderTransactor) Lend2(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, x common.Address, s common.Address, a *big.Int, r *big.Int) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "lend2", p, u, m, x, s, a, r)
}

// Lend2 is a paid mutator transaction binding the contract method 0x7431dfed.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address x, address s, uint128 a, uint256 r) returns(uint256)
func (_Lender *LenderSession) Lend2(p uint8, u common.Address, m *big.Int, x common.Address, s common.Address, a *big.Int, r *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend2(&_Lender.TransactOpts, p, u, m, x, s, a, r)
}

// Lend2 is a paid mutator transaction binding the contract method 0x7431dfed.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address x, address s, uint128 a, uint256 r) returns(uint256)
func (_Lender *LenderTransactorSession) Lend2(p uint8, u common.Address, m *big.Int, x common.Address, s common.Address, a *big.Int, r *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend2(&_Lender.TransactOpts, p, u, m, x, s, a, r)
}

// Lend3 is a paid mutator transaction binding the contract method 0xd5907c36.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address e, bytes32 i, uint256 a, uint256 r, uint256 d) returns(uint256)
func (_Lender *LenderTransactor) Lend3(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, e common.Address, i [32]byte, a *big.Int, r *big.Int, d *big.Int) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "lend3", p, u, m, e, i, a, r, d)
}

// Lend3 is a paid mutator transaction binding the contract method 0xd5907c36.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address e, bytes32 i, uint256 a, uint256 r, uint256 d) returns(uint256)
func (_Lender *LenderSession) Lend3(p uint8, u common.Address, m *big.Int, e common.Address, i [32]byte, a *big.Int, r *big.Int, d *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend3(&_Lender.TransactOpts, p, u, m, e, i, a, r, d)
}

// Lend3 is a paid mutator transaction binding the contract method 0xd5907c36.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address e, bytes32 i, uint256 a, uint256 r, uint256 d) returns(uint256)
func (_Lender *LenderTransactorSession) Lend3(p uint8, u common.Address, m *big.Int, e common.Address, i [32]byte, a *big.Int, r *big.Int, d *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend3(&_Lender.TransactOpts, p, u, m, e, i, a, r, d)
}

// Lend4 is a paid mutator transaction binding the contract method 0xf1aa654e.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address y, uint256 a) returns(uint256)
func (_Lender *LenderTransactor) Lend4(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, y common.Address, a *big.Int) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "lend4", p, u, m, y, a)
}

// Lend4 is a paid mutator transaction binding the contract method 0xf1aa654e.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address y, uint256 a) returns(uint256)
func (_Lender *LenderSession) Lend4(p uint8, u common.Address, m *big.Int, y common.Address, a *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend4(&_Lender.TransactOpts, p, u, m, y, a)
}

// Lend4 is a paid mutator transaction binding the contract method 0xf1aa654e.
//
// Solidity: function lend(uint8 p, address u, uint256 m, address y, uint256 a) returns(uint256)
func (_Lender *LenderTransactorSession) Lend4(p uint8, u common.Address, m *big.Int, y common.Address, a *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend4(&_Lender.TransactOpts, p, u, m, y, a)
}

// Lend5 is a paid mutator transaction binding the contract method 0xf3cf26f3.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, address x, address t, uint256 d) returns(uint256)
func (_Lender *LenderTransactor) Lend5(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, x common.Address, t common.Address, d *big.Int) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "lend5", p, u, m, a, r, x, t, d)
}

// Lend5 is a paid mutator transaction binding the contract method 0xf3cf26f3.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, address x, address t, uint256 d) returns(uint256)
func (_Lender *LenderSession) Lend5(p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, x common.Address, t common.Address, d *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend5(&_Lender.TransactOpts, p, u, m, a, r, x, t, d)
}

// Lend5 is a paid mutator transaction binding the contract method 0xf3cf26f3.
//
// Solidity: function lend(uint8 p, address u, uint256 m, uint256 a, uint256 r, address x, address t, uint256 d) returns(uint256)
func (_Lender *LenderTransactorSession) Lend5(p uint8, u common.Address, m *big.Int, a *big.Int, r *big.Int, x common.Address, t common.Address, d *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Lend5(&_Lender.TransactOpts, p, u, m, a, r, x, t, d)
}

// Mint is a paid mutator transaction binding the contract method 0xdc4c7ca9.
//
// Solidity: function mint(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Lender *LenderTransactor) Mint(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "mint", p, u, m, a)
}

// Mint is a paid mutator transaction binding the contract method 0xdc4c7ca9.
//
// Solidity: function mint(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Lender *LenderSession) Mint(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Mint(&_Lender.TransactOpts, p, u, m, a)
}

// Mint is a paid mutator transaction binding the contract method 0xdc4c7ca9.
//
// Solidity: function mint(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Lender *LenderTransactorSession) Mint(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.Mint(&_Lender.TransactOpts, p, u, m, a)
}

// SetFee is a paid mutator transaction binding the contract method 0x69fe0e2d.
//
// Solidity: function setFee(uint256 f) returns(bool)
func (_Lender *LenderTransactor) SetFee(opts *bind.TransactOpts, f *big.Int) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "setFee", f)
}

// SetFee is a paid mutator transaction binding the contract method 0x69fe0e2d.
//
// Solidity: function setFee(uint256 f) returns(bool)
func (_Lender *LenderSession) SetFee(f *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.SetFee(&_Lender.TransactOpts, f)
}

// SetFee is a paid mutator transaction binding the contract method 0x69fe0e2d.
//
// Solidity: function setFee(uint256 f) returns(bool)
func (_Lender *LenderTransactorSession) SetFee(f *big.Int) (*types.Transaction, error) {
	return _Lender.Contract.SetFee(&_Lender.TransactOpts, f)
}

// SetIlluminateAddress is a paid mutator transaction binding the contract method 0x0f07b299.
//
// Solidity: function setIlluminateAddress(address i) returns(bool)
func (_Lender *LenderTransactor) SetIlluminateAddress(opts *bind.TransactOpts, i common.Address) (*types.Transaction, error) {
	return _Lender.contract.Transact(opts, "setIlluminateAddress", i)
}

// SetIlluminateAddress is a paid mutator transaction binding the contract method 0x0f07b299.
//
// Solidity: function setIlluminateAddress(address i) returns(bool)
func (_Lender *LenderSession) SetIlluminateAddress(i common.Address) (*types.Transaction, error) {
	return _Lender.Contract.SetIlluminateAddress(&_Lender.TransactOpts, i)
}

// SetIlluminateAddress is a paid mutator transaction binding the contract method 0x0f07b299.
//
// Solidity: function setIlluminateAddress(address i) returns(bool)
func (_Lender *LenderTransactorSession) SetIlluminateAddress(i common.Address) (*types.Transaction, error) {
	return _Lender.Contract.SetIlluminateAddress(&_Lender.TransactOpts, i)
}

// LenderLendIterator is returned from FilterLend and is used to iterate over the raw logs and unpacked data for Lend events raised by the Lender contract.
type LenderLendIterator struct {
	Event *LenderLend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LenderLendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LenderLend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LenderLend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LenderLendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LenderLendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LenderLend represents a Lend event raised by the Lender contract.
type LenderLend struct {
	Principal  uint8
	Underlying common.Address
	Maturity   *big.Int
	Returned   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterLend is a free log retrieval operation binding the contract event 0x26e45da718e624ee4c0a2c979b1436c3b050d3ef1197fdb210e20002900457d9.
//
// Solidity: event Lend(uint8 principal, address indexed underlying, uint256 indexed maturity, uint256 returned)
func (_Lender *LenderFilterer) FilterLend(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*LenderLendIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _Lender.contract.FilterLogs(opts, "Lend", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &LenderLendIterator{contract: _Lender.contract, event: "Lend", logs: logs, sub: sub}, nil
}

// WatchLend is a free log subscription operation binding the contract event 0x26e45da718e624ee4c0a2c979b1436c3b050d3ef1197fdb210e20002900457d9.
//
// Solidity: event Lend(uint8 principal, address indexed underlying, uint256 indexed maturity, uint256 returned)
func (_Lender *LenderFilterer) WatchLend(opts *bind.WatchOpts, sink chan<- *LenderLend, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _Lender.contract.WatchLogs(opts, "Lend", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LenderLend)
				if err := _Lender.contract.UnpackLog(event, "Lend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLend is a log parse operation binding the contract event 0x26e45da718e624ee4c0a2c979b1436c3b050d3ef1197fdb210e20002900457d9.
//
// Solidity: event Lend(uint8 principal, address indexed underlying, uint256 indexed maturity, uint256 returned)
func (_Lender *LenderFilterer) ParseLend(log types.Log) (*LenderLend, error) {
	event := new(LenderLend)
	if err := _Lender.contract.UnpackLog(event, "Lend", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LenderMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Lender contract.
type LenderMintIterator struct {
	Event *LenderMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LenderMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LenderMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LenderMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LenderMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LenderMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LenderMint represents a Mint event raised by the Lender contract.
type LenderMint struct {
	Principal  uint8
	Underlying common.Address
	Maturity   *big.Int
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x309b03ba657e17f1beadbc6eb3c06ba79b38084eb8d0e5452cc222462a17f1f6.
//
// Solidity: event Mint(uint8 principal, address indexed underlying, uint256 indexed maturity, uint256 amount)
func (_Lender *LenderFilterer) FilterMint(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*LenderMintIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _Lender.contract.FilterLogs(opts, "Mint", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &LenderMintIterator{contract: _Lender.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x309b03ba657e17f1beadbc6eb3c06ba79b38084eb8d0e5452cc222462a17f1f6.
//
// Solidity: event Mint(uint8 principal, address indexed underlying, uint256 indexed maturity, uint256 amount)
func (_Lender *LenderFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *LenderMint, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _Lender.contract.WatchLogs(opts, "Mint", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LenderMint)
				if err := _Lender.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x309b03ba657e17f1beadbc6eb3c06ba79b38084eb8d0e5452cc222462a17f1f6.
//
// Solidity: event Mint(uint8 principal, address indexed underlying, uint256 indexed maturity, uint256 amount)
func (_Lender *LenderFilterer) ParseMint(log types.Log) (*LenderMint, error) {
	event := new(LenderMint)
	if err := _Lender.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
