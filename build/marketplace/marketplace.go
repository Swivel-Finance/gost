// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package marketplace

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketPlaceABI is the input ABI used to generate the binding from.
const MarketPlaceABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultTracker\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodialExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodialInitiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matured\",\"type\":\"uint256\"}],\"name\":\"Mature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2pVaultExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2pZcTokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RedeemVaultInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemZcToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferVaultNotional\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"burnZcTokenRemovingNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"cTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"custodialExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"custodialInitiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zcTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"matureMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maturityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"mintZcTokenAddingNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"p2pVaultExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"p2pZcTokenExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"redeemVaultInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"redeemZcToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"}],\"name\":\"setSwivelAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swivel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"transferVaultNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"transferVaultNotionalFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MarketPlaceBin is the compiled bytecode used for deploying new contracts.
var MarketPlaceBin = "0x608060405234801561001057600080fd5b50600380546001600160a01b03191633179055615fcd806100326000396000f3fe60806040523480156200001157600080fd5b5060043610620001a15760003560e01c80638c6b9b4111620000e9578063c5ee114d1162000097578063ef267f2c116200006e578063ef267f2c1462000453578063f851a440146200046a578063f8e51bcb146200047e57600080fd5b8063c5ee114d14620003f7578063c86adf7c146200040e578063e5a2aa62146200043c57600080fd5b8063a11f485611620000cc578063a11f485614620003a3578063b50a66f714620003c9578063bddbfbe414620003e057600080fd5b80638c6b9b4114620003755780639f5e472f146200038c57600080fd5b80633cf9a4e311620001535780635db0ae58116200012a5780635db0ae58146200033057806365a963aa146200034757806375829def146200035e57600080fd5b80633cf9a4e314620002ed5780635292ecf214620003045780635c975abb146200031b57600080fd5b806305e1dc25116200018857806305e1dc2514620001ff57806317b3bba7146200023657806327ee93be14620002bc57600080fd5b8063012b264a14620001a657806302329a2914620001d7575b600080fd5b600454620001ba906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001ee620001e836600462002c28565b62000495565b6040519015158152602001620001ce565b620001ba6200021036600462002b07565b6001600160a01b0391821660009081526020818152604080832093835292905220541690565b620002866200024736600462002b07565b600060208181529281526040808220909352908152208054600182015460028301546003909301546001600160a01b0392831693918316929091169084565b604051620001ce94939291906001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b620001ee620002cd36600462002b07565b600160209081526000928352604080842090915290825290205460ff1681565b620001ee620002fe36600462002bdc565b62000537565b620001ee6200031536600462002bdc565b62000664565b600454620001ee90600160a01b900460ff1681565b620001ee6200034136600462002b07565b6200082f565b620001ee6200035836600462002b7b565b62000c55565b620001ee6200036f36600462002ac2565b62000f88565b620001ee6200038636600462002b7b565b62001027565b620001ee6200039d36600462002c7f565b6200134a565b620003ba620003b436600462002b35565b620017f1565b604051908152602001620001ce565b620001ee620003da36600462002bdc565b620019b0565b620001ee620003f136600462002b7b565b62001c90565b620003ba6200040836600462002bdc565b62001eaf565b620003ba6200041f36600462002b07565b600260209081526000928352604080842090915290825290205481565b620001ee6200044d36600462002ac2565b6200219e565b620001ee6200046436600462002bdc565b620022be565b600354620001ba906001600160a01b031681565b620001ee6200048f36600462002b7b565b62002592565b6003546000906001600160a01b0316338114620004f95760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a65640000000000000060448201526064015b60405180910390fd5b60048054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9091161790556001915050919050565b6004546000906001600160a01b0316338114620005975760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b6001600160a01b03868116600090815260208181526040808320898452909152908190206002015490517fb326258d00000000000000000000000000000000000000000000000000000000815286831660048201526024810186905291169063b326258d90604401602060405180830381600087803b1580156200061a57600080fd5b505af11580156200062f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000655919062002c47565b50600191505b50949350505050565b600454600090600160a01b900460ff1615620006c35760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b03858116600090815260208181526040808320888452909152908190206002015490517f17794673000000000000000000000000000000000000000000000000000000008152336004820152858316602482015260448101859052911690631779467390606401602060405180830381600087803b1580156200074c57600080fd5b505af115801562000761573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000787919062002c47565b620007d55760405162461bcd60e51b815260206004820152601560248201527f7661756c74207472616e73666572206661696c656400000000000000000000006044820152606401620004f0565b604080513381526001600160a01b03858116602083015291810184905285918716907f1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf30989060600160405180910390a3506001949350505050565b600454600090600160a01b900460ff16156200088e5760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b038316600090815260016020908152604080832085845290915290205460ff1615620009045760405162461bcd60e51b815260206004820152601660248201527f6d61726b657420616c7265616479206d617475726564000000000000000000006044820152606401620004f0565b6001600160a01b038084166000908152602081815260408083208684528252918290206001015482517f204f83f9000000000000000000000000000000000000000000000000000000008152925193169263204f83f9926004808201939291829003018186803b1580156200097857600080fd5b505afa1580156200098d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009b3919062002c66565b42101562000a045760405162461bcd60e51b815260206004820152601460248201527f6d61747572697479206e6f7420726561636865640000000000000000000000006044820152606401620004f0565b6001600160a01b0380841660009081526020818152604080832086845282528083205481517fbd6d894d00000000000000000000000000000000000000000000000000000000815291519394169263bd6d894d9260048084019391929182900301818787803b15801562000a7757600080fd5b505af115801562000a8c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ab2919062002c66565b6001600160a01b0380861660008181526002602081815260408084208a8552825280842087905584845260018083528185208b8652835281852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909117905593835282815283832089845281528383209091015483517f6b868d51000000000000000000000000000000000000000000000000000000008152935195965090931693636b868d51936004808501949193918390030190829087803b15801562000b7e57600080fd5b505af115801562000b93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bb9919062002c47565b62000c075760405162461bcd60e51b815260206004820152601460248201527f6d61747572697479206e6f7420726561636865640000000000000000000000006044820152606401620004f0565b6040805182815242602082015284916001600160a01b038716917e80e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4910160405180910390a35060019392505050565b6004546000906001600160a01b031633811462000cb55760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff161562000d115760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b038781166000908152602081815260408083208a8452909152908190206001015490517f9dc29fac000000000000000000000000000000000000000000000000000000008152878316600482015260248101869052911690639dc29fac90604401602060405180830381600087803b15801562000d9457600080fd5b505af115801562000da9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dcf919062002c47565b62000e1d5760405162461bcd60e51b815260206004820152601360248201527f7a63546f6b656e206275726e206661696c6564000000000000000000000000006044820152606401620004f0565b6001600160a01b038781166000908152602081815260408083208a8452909152908190206001015490517f40c10f190000000000000000000000000000000000000000000000000000000081528683166004820152602481018690529116906340c10f1990604401602060405180830381600087803b15801562000ea057600080fd5b505af115801562000eb5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000edb919062002c47565b62000f295760405162461bcd60e51b815260206004820152601360248201527f7a63546f6b656e206d696e74206661696c6564000000000000000000000000006044820152606401620004f0565b604080516001600160a01b038781168252868116602083015291810185905287918916907f86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422906060015b60405180910390a35060019695505050505050565b6003546000906001600160a01b031633811462000fe85760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600380546001600160a01b0385167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001915050919050565b6004546000906001600160a01b0316338114620010875760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff1615620010e35760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b038781166000908152602081815260408083208a8452909152908190206001015490517f9dc29fac000000000000000000000000000000000000000000000000000000008152878316600482015260248101869052911690639dc29fac90604401602060405180830381600087803b1580156200116657600080fd5b505af11580156200117b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011a1919062002c47565b620011ef5760405162461bcd60e51b815260206004820152600b60248201527f6275726e206661696c65640000000000000000000000000000000000000000006044820152606401620004f0565b6001600160a01b038781166000908152602081815260408083208a8452909152908190206002015490517f613a28d100000000000000000000000000000000000000000000000000000000815286831660048201526024810186905291169063613a28d190604401602060405180830381600087803b1580156200127257600080fd5b505af115801562001287573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ad919062002c47565b620012fb5760405162461bcd60e51b815260206004820152601660248201527f72656d6f7665206e6f74696f6e616c206661696c6564000000000000000000006044820152606401620004f0565b604080516001600160a01b038781168252868116602083015291810185905287918916907f219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb599060600162000f73565b6003546000906001600160a01b0316338114620013aa5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff1615620014065760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6004546001600160a01b0316620014605760405162461bcd60e51b815260206004820152601f60248201527f73776976656c20636f6e74726163742061646472657373206e6f7420736574006044820152606401620004f0565b6000856001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200149e57600080fd5b505af1158015620014b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014d9919062002ae8565b6001600160a01b038082166000908152602081815260408083208c84529091529020600201549192501615620015525760405162461bcd60e51b815260206004820152601560248201527f6d61726b657420616c72656164792065786973747300000000000000000000006044820152606401620004f0565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200159057600080fd5b505af1158015620015a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015cb919062002d05565b905060008289888885604051620015e290620029f9565b620015f295949392919062002d94565b604051809103906000f0801580156200160f573d6000803e3d6000fd5b50905060008989600460009054906101000a90046001600160a01b03166040516200163a9062002a07565b9283526001600160a01b039182166020840152166040820152606001604051809103906000f08015801562001673573d6000803e3d6000fd5b50905060405180608001604052808a6001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b031681526020016000815250600080866001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015590505089846001600160a01b03167f1747a3ed83b35b999b9000df0690f6563f6b016a1cce0c8dfc911866d3b921778b8585604051620017d9939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60405180910390a35060019998505050505050505050565b6004546000906001600160a01b0316338114620018515760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff1615620018ad5760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b038581166000908152602081815260408083208884529091528082206002015490517f19caf46c0000000000000000000000000000000000000000000000000000000081528684166004820152919216906319caf46c90602401602060405180830381600087803b1580156200192957600080fd5b505af11580156200193e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001964919062002c66565b9050836001600160a01b031685876001600160a01b03167f646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c27987460405160405180910390a495945050505050565b6004546000906001600160a01b031633811462001a105760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff161562001a6c5760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b03868116600090815260208181526040808320898452909152908190206001015490517f9dc29fac000000000000000000000000000000000000000000000000000000008152868316600482015260248101869052911690639dc29fac90604401602060405180830381600087803b15801562001aef57600080fd5b505af115801562001b04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b2a919062002c47565b62001b785760405162461bcd60e51b815260206004820152600b60248201527f6275726e206661696c65640000000000000000000000000000000000000000006044820152606401620004f0565b6001600160a01b03868116600090815260208181526040808320898452909152908190206002015490517f613a28d100000000000000000000000000000000000000000000000000000000815286831660048201526024810186905291169063613a28d190604401602060405180830381600087803b15801562001bfb57600080fd5b505af115801562001c10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c36919062002c47565b62001c845760405162461bcd60e51b815260206004820152601660248201527f72656d6f7665206e6f74696f6e616c206661696c6564000000000000000000006044820152606401620004f0565b50600195945050505050565b6004546000906001600160a01b031633811462001cf05760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff161562001d4c5760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b038781166000908152602081815260408083208a8452909152908190206002015490517f177946730000000000000000000000000000000000000000000000000000000081528783166004820152868316602482015260448101869052911690631779467390606401602060405180830381600087803b15801562001dd757600080fd5b505af115801562001dec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e12919062002c47565b62001e605760405162461bcd60e51b815260206004820152601860248201527f7472616e73666572206e6f74696f6e616c206661696c656400000000000000006044820152606401620004f0565b604080516001600160a01b038781168252868116602083015291810185905287918916907f31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f1529060600162000f73565b6004546000906001600160a01b031633811462001f0f5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff161562001f6b5760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b038087166000818152602081815260408083208a84528252808320815160808101835281548716815260018083015488168286015260028301549097168184015260039091015460608201529383529381528382208983529052919091205460ff1680620020345762001fe688886200082f565b620020345760405162461bcd60e51b815260206004820152601b60248201527f6661696c656420746f206d617475726520746865206d61726b657400000000006044820152606401620004f0565b60208201516040517f9dc29fac0000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820188905290911690639dc29fac90604401602060405180830381600087803b1580156200209e57600080fd5b505af1158015620020b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020d9919062002c47565b620021275760405162461bcd60e51b815260206004820152600e60248201527f636f756c64206e6f74206275726e0000000000000000000000000000000000006044820152606401620004f0565b856001600160a01b031687896001600160a01b03167f49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45886040516200216e91815260200190565b60405180910390a480620021875784935050506200065b565b62002194888887620028b5565b935050506200065b565b6003546000906001600160a01b0316338114620021fe5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b6004546001600160a01b0316156200227f5760405162461bcd60e51b815260206004820152602360248201527f73776976656c20636f6e7472616374206164647265737320616c72656164792060448201527f73657400000000000000000000000000000000000000000000000000000000006064820152608401620004f0565b600480546001600160a01b0385167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001915050919050565b6004546000906001600160a01b03163381146200231e5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff16156200237a5760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b03868116600090815260208181526040808320898452909152908190206001015490517f40c10f190000000000000000000000000000000000000000000000000000000081528683166004820152602481018690529116906340c10f1990604401602060405180830381600087803b158015620023fd57600080fd5b505af115801562002412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002438919062002c47565b620024865760405162461bcd60e51b815260206004820152601360248201527f6d696e74207a63546f6b656e206661696c6564000000000000000000000000006044820152606401620004f0565b6001600160a01b03868116600090815260208181526040808320898452909152908190206002015490517fa01cfffb00000000000000000000000000000000000000000000000000000000815286831660048201526024810186905291169063a01cfffb90604401602060405180830381600087803b1580156200250957600080fd5b505af11580156200251e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002544919062002c47565b62001c845760405162461bcd60e51b815260206004820152601360248201527f616464206e6f74696f6e616c206661696c6564000000000000000000000000006044820152606401620004f0565b6004546000906001600160a01b0316338114620025f25760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401620004f0565b600454600160a01b900460ff16156200264e5760405162461bcd60e51b815260206004820152601260248201527f6d61726b657473206172652070617573656400000000000000000000000000006044820152606401620004f0565b6001600160a01b038781166000908152602081815260408083208a8452909152908190206001015490517f40c10f190000000000000000000000000000000000000000000000000000000081528783166004820152602481018690529116906340c10f1990604401602060405180830381600087803b158015620026d157600080fd5b505af1158015620026e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200270c919062002c47565b6200275a5760405162461bcd60e51b815260206004820152600b60248201527f6d696e74206661696c65640000000000000000000000000000000000000000006044820152606401620004f0565b6001600160a01b038781166000908152602081815260408083208a8452909152908190206002015490517fa01cfffb00000000000000000000000000000000000000000000000000000000815286831660048201526024810186905291169063a01cfffb90604401602060405180830381600087803b158015620027dd57600080fd5b505af1158015620027f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002818919062002c47565b620028665760405162461bcd60e51b815260206004820152601360248201527f616464206e6f74696f6e616c206661696c6564000000000000000000000000006044820152606401620004f0565b604080516001600160a01b038781168252868116602083015291810185905287918916907f8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c5169060600162000f73565b6001600160a01b03808416600081815260026020908152604080832087845282528083205493835282825280832087845282528083205481517fbd6d894d0000000000000000000000000000000000000000000000000000000081529151939586956a52b7d2dcc80cd2e4000000959094929091169263bd6d894d92600480830193919282900301818987803b1580156200294f57600080fd5b505af115801562002964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200298a919062002c66565b620029a1906a52b7d2dcc80cd2e400000062002e3d565b620029ad919062002e03565b620029b9919062002e7d565b905060006a52b7d2dcc80cd2e4000000620029d5858462002e3d565b620029e1919062002e03565b9050620029ef818562002de8565b9695505050505050565b6117c68062002f1e83390190565b6118b480620046e483390190565b600082601f83011262002a26578081fd5b813567ffffffffffffffff8082111562002a445762002a4462002ec6565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562002a8d5762002a8d62002ec6565b8160405283815286602085880101111562002aa6578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121562002ad4578081fd5b813562002ae18162002ef5565b9392505050565b60006020828403121562002afa578081fd5b815162002ae18162002ef5565b6000806040838503121562002b1a578081fd5b823562002b278162002ef5565b946020939093013593505050565b60008060006060848603121562002b4a578081fd5b833562002b578162002ef5565b925060208401359150604084013562002b708162002ef5565b809150509250925092565b600080600080600060a0868803121562002b93578081fd5b853562002ba08162002ef5565b945060208601359350604086013562002bb98162002ef5565b9250606086013562002bcb8162002ef5565b949793965091946080013592915050565b6000806000806080858703121562002bf2578384fd5b843562002bff8162002ef5565b935060208501359250604085013562002c188162002ef5565b9396929550929360600135925050565b60006020828403121562002c3a578081fd5b813562002ae18162002f0e565b60006020828403121562002c59578081fd5b815162002ae18162002f0e565b60006020828403121562002c78578081fd5b5051919050565b6000806000806080858703121562002c95578384fd5b84359350602085013562002ca98162002ef5565b9250604085013567ffffffffffffffff8082111562002cc6578384fd5b62002cd48883890162002a15565b9350606087013591508082111562002cea578283fd5b5062002cf98782880162002a15565b91505092959194509250565b60006020828403121562002d17578081fd5b815160ff8116811462002ae1578182fd5b60008151808452815b8181101562002d4f5760208185018101518683018201520162002d31565b8181111562002d615782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6001600160a01b038616815284602082015260a06040820152600062002dbe60a083018662002d28565b828103606084015262002dd2818662002d28565b91505060ff831660808301529695505050505050565b6000821982111562002dfe5762002dfe62002e97565b500190565b60008262002e38577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562002e785762002e7862002e97565b500290565b60008282101562002e925762002e9262002e97565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b038116811462002f0b57600080fd5b50565b801515811462002f0b57600080fdfe6101006040523480156200001257600080fd5b50604051620017c6380380620017c6833981016040819052620000359162000296565b8282828282828260049080519060200190620000539291906200013d565b508151620000699060059060208501906200013d565b5080600260006101000a81548160ff021916908360ff160217905550505050620000ba83604051806040016040528060018152602001603160f81b8152504630620000e660201b62000a1a1760201c565b60805250505033606090811b60a0529490941b6001600160601b03191660c052505060e0525062000394565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b8280546200014b9062000341565b90600052602060002090601f0160209004810192826200016f5760008555620001ba565b82601f106200018a57805160ff1916838001178555620001ba565b82800160010185558215620001ba579182015b82811115620001ba5782518255916020019190600101906200019d565b50620001c8929150620001cc565b5090565b5b80821115620001c85760008155600101620001cd565b600082601f830112620001f4578081fd5b81516001600160401b03808211156200021157620002116200037e565b604051601f8301601f19908116603f011681019082821181831017156200023c576200023c6200037e565b8160405283815260209250868385880101111562000258578485fd5b8491505b838210156200027b57858201830151818301840152908201906200025c565b838211156200028c57848385830101525b9695505050505050565b600080600080600060a08688031215620002ae578081fd5b85516001600160a01b0381168114620002c5578182fd5b6020870151604088015191965094506001600160401b0380821115620002e9578283fd5b620002f789838a01620001e3565b945060608801519150808211156200030d578283fd5b506200031c88828901620001e3565b925050608086015160ff8116811462000333578182fd5b809150509295509295909350565b600181811c908216806200035657607f821691505b602082108114156200037857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160601c60c05160601c60e0516113dd620003e960003960006101b3015260006102320152600081816103970152818161057d015261062601526000818161031501526108af01526113dd6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806370a08231116100cd578063a9059cbb11610081578063d505accf11610066578063d505accf14610337578063dd62ed3e1461034c578063f851a4401461039257600080fd5b8063a9059cbb146102fd578063c2fb26a61461031057600080fd5b806395d89b41116100b257806395d89b41146102cf5780639dc29fac146102d7578063a457c2d7146102ea57600080fd5b806370a08231146102795780637ecebe00146102af57600080fd5b806323b872dd116101245780633950935111610109578063395093511461020757806340c10f191461021a5780636f307dc31461022d57600080fd5b806323b872dd146101d5578063313ce567146101e857600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd14610197578063204f83f9146101ae575b600080fd5b61015e6103b9565b60405161016b919061124b565b60405180910390f35b610187610182366004611222565b610447565b604051901515815260200161016b565b6101a060035481565b60405190815260200161016b565b6101a07f000000000000000000000000000000000000000000000000000000000000000081565b6101876101e3366004611176565b61045d565b6002546101f59060ff1681565b60405160ff909116815260200161016b565b610187610215366004611222565b610535565b610187610228366004611222565b610579565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161016b565b6101a0610287366004611123565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101a06102bd366004611123565b60066020526000908152604090205481565b61015e610615565b6101876102e5366004611222565b610622565b6101876102f8366004611222565b6106b4565b61018761030b366004611222565b610769565b6101a07f000000000000000000000000000000000000000000000000000000000000000081565b61034a6103453660046111b1565b610776565b005b6101a061035a366004611144565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b600480546103c6906112eb565b80601f01602080910402602001604051908101604052809291908181526020018280546103f2906112eb565b801561043f5780601f106104145761010080835404028352916020019161043f565b820191906000526020600020905b81548152906001019060200180831161042257829003601f168201915b505050505081565b6000610454338484610a71565b50600192915050565b600061046a848484610bf2565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160209081526040808320338452909152902054828110156105165760405162461bcd60e51b815260206004820152602760248201527f6572633230207472616e7366657220616d6f756e74206578636565647320616c60448201527f6c6f77616e63650000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61052a853361052586856112d4565b610a71565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916104549185906105259086906112bc565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146106015760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e000000000000000000000000604482015260640161050d565b61060b8484610e60565b5060019392505050565b600580546103c6906112eb565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146106aa5760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e000000000000000000000000604482015260640161050d565b61060b8484610f66565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091528120548281101561075a5760405162461bcd60e51b8152602060048201526024808201527f65726332302064656372656173656420616c6c6f77616e63652062656c6f772060448201527f7a65726f00000000000000000000000000000000000000000000000000000000606482015260840161050d565b61060b338561052586856112d4565b6000610454338484610bf2565b428410156107c65760405162461bcd60e51b815260206004820152601860248201527f65726332363132206578706972656420646561646c696e650000000000000000604482015260640161050d565b73ffffffffffffffffffffffffffffffffffffffff871660009081526006602052604081208054610887918a918a918a9190866108028361133f565b90915550604080517f80772249b4aef1688b30651778f4249b05cb73b517d98482439b9d8999b3060260208083019190915273ffffffffffffffffffffffffffffffffffffffff96871682840152949095166060860152608085019290925260a084015260c08084018a90528151808503909101815260e09093019052815191012090565b6040517f190100000000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600282015260228101829052604290209091506000906040805160008082526020820180845284905260ff89169282019290925260608101879052608081018690529192509060019060a0016020604051602081039080840390855afa15801561093c573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906109b757508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610a035760405162461bcd60e51b815260206004820152601960248201527f6572633236313220696e76616c6964207369676e617475726500000000000000604482015260640161050d565b610a0e8a8a8a610a71565b50505050505050505050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b73ffffffffffffffffffffffffffffffffffffffff8316610afa5760405162461bcd60e51b815260206004820152602360248201527f657263323020617070726f76652066726f6d20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161050d565b73ffffffffffffffffffffffffffffffffffffffff8216610b835760405162461bcd60e51b815260206004820152602160248201527f657263323020617070726f766520746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161050d565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610c7a5760405162461bcd60e51b8152602060048201526024808201527f6572633230207472616e736665722066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161050d565b73ffffffffffffffffffffffffffffffffffffffff8216610d035760405162461bcd60e51b815260206004820152602260248201527f6572633230207472616e7366657220746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161050d565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610d9f5760405162461bcd60e51b815260206004820152602560248201527f6572633230207472616e7366657220616d6f756e74206578636565647320626160448201527f6c616e6365000000000000000000000000000000000000000000000000000000606482015260840161050d565b610da982826112d4565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152602081905260408082209390935590851681529081208054849290610dec9084906112bc565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e5291815260200190565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff8216610ec35760405162461bcd60e51b815260206004820152601e60248201527f6572633230206d696e7420746f20746865207a65726f20616464726573730000604482015260640161050d565b8060036000828254610ed591906112bc565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290610f0f9084906112bc565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610fc95760405162461bcd60e51b815260206004820181905260248201527f6572633230206275726e2066726f6d20746865207a65726f2061646472657373604482015260640161050d565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054818110156110655760405162461bcd60e51b815260206004820152602160248201527f6572633230206275726e20616d6f756e7420657863656564732062616c616e6360448201527f6500000000000000000000000000000000000000000000000000000000000000606482015260840161050d565b61106f82826112d4565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208190526040812091909155600380548492906110aa9084906112d4565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610be5565b803573ffffffffffffffffffffffffffffffffffffffff8116811461111e57600080fd5b919050565b600060208284031215611134578081fd5b61113d826110fa565b9392505050565b60008060408385031215611156578081fd5b61115f836110fa565b915061116d602084016110fa565b90509250929050565b60008060006060848603121561118a578081fd5b611193846110fa565b92506111a1602085016110fa565b9150604084013590509250925092565b600080600080600080600060e0888a0312156111cb578283fd5b6111d4886110fa565b96506111e2602089016110fa565b95506040880135945060608801359350608088013560ff81168114611205578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611234578182fd5b61123d836110fa565b946020939093013593505050565b6000602080835283518082850152825b818110156112775785810183015185820160400152820161125b565b818111156112885783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600082198211156112cf576112cf611378565b500190565b6000828210156112e6576112e6611378565b500390565b600181811c908216806112ff57607f821691505b60208210811415611339577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561137157611371611378565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220dc191fbfff517bbaaa9e699a2426526fcf037db80a336b200b7bfe934b8056a064736f6c6343000804003361010060405234801561001157600080fd5b50604051620018b4380380620018b48339810160408190526100329161007a565b33606090811b60805260e0939093526001600160601b031991831b821660a05290911b1660c0526100b5565b80516001600160a01b038116811461007557600080fd5b919050565b60008060006060848603121561008e578283fd5b8351925061009e6020850161005e565b91506100ac6040850161005e565b90509250925092565b60805160601c60a05160601c60c05160601c60e05161175462000160600039600081816101920152610e1501526000818160f4015281816112fa01526115120152600081816102a4015281816104c2015281816108c301528181610b7101528181610eed0152818161100401526113630152600081816102cb015281816102f1015281816107c701528181610a4c01528181610d3c01528181610f7c015261122c01526117546000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636392a51f1161008c578063a622ee7c11610066578063a622ee7c14610242578063b326258d1461028c578063b7dd34831461029f578063f851a440146102c657600080fd5b80636392a51f146101d45780636b868d5114610227578063a01cfffb1461022f57600080fd5b806319caf46c116100c857806319caf46c1461017a578063204f83f91461018d578063454c87b3146101b4578063613a28d1146101c157600080fd5b8063012b264a146100ef57806311554c43146101405780631779467314610157575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61014960025481565b604051908152602001610137565b61016a6101653660046115ce565b6102ed565b6040519015158152602001610137565b6101496101883660046115ad565b6107c3565b6101497f000000000000000000000000000000000000000000000000000000000000000081565b60015461016a9060ff1681565b61016a6101cf366004611609565b610a48565b6102126101e23660046115ad565b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902080546001909101549091565b60408051928352602083019190915201610137565b61016a610d38565b61016a61023d366004611609565b610f78565b6102716102503660046115ad565b60006020819052908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610137565b61016a61029a366004611609565b611228565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff82161461037a5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a65640000000000000060448201526064015b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156103f65760405162461bcd60e51b815260206004820181905260248201527f63616e6e6f74207472616e73666572206e6f74696f6e616c20746f2073656c666044820152606401610371565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208181526040808320815160608082018452825482526001808401548387015260029384015483860152968b168652858552948390208351958601845280548652958601549385019390935293909301549282019290925281518511156104bd5760405162461bcd60e51b815260206004820181905260248201527f616d6f756e74206578636565647320617661696c61626c652062616c616e63656044820152606401610371565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561052857600080fd5b505af115801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190611632565b60015490915060ff16156105b3576a52b7d2dcc80cd2e400000084604001516002546a52b7d2dcc80cd2e4000000610598919061169b565b6105a29190611662565b6105ac91906116d8565b91506105e6565b60408401516a52b7d2dcc80cd2e4000000906105cf838361169b565b6105d99190611662565b6105e391906116d8565b91505b83516000906a52b7d2dcc80cd2e400000090610602908561169b565b61060c9190611662565b90508085602001818151610620919061164a565b9052508451889086906106349083906116d8565b905250604080860183815273ffffffffffffffffffffffffffffffffffffffff8c166000908152602081815292902087518155918701516001830155516002909101558351156107595760015460ff16156106ce576a52b7d2dcc80cd2e400000084604001516002546a52b7d2dcc80cd2e40000006106b3919061169b565b6106bd9190611662565b6106c791906116d8565b9250610701565b60408401516a52b7d2dcc80cd2e4000000906106ea848361169b565b6106f49190611662565b6106fe91906116d8565b92505b83516000906a52b7d2dcc80cd2e40000009061071d908661169b565b6107279190611662565b9050808560200181815161073b919061164a565b90525084518990869061074f90839061164a565b90525061076f9050565b878460000181815161076b919061164a565b9052505b50604080840191825273ffffffffffffffffffffffffffffffffffffffff89166000908152602081815291902084518155930151600180850191909155905160029093019290925550925050509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff82161461084b5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610371565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526020818152604080832081516060810183528154815260018201548185018190526002909201548184015282517fbd6d894d0000000000000000000000000000000000000000000000000000000081529251909591949384937f00000000000000000000000000000000000000000000000000000000000000009093169263bd6d894d926004808301939282900301818787803b15801561090857600080fd5b505af115801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190611632565b60015490915060ff1615610993576a52b7d2dcc80cd2e400000084604001516002546a52b7d2dcc80cd2e4000000610978919061169b565b6109829190611662565b61098c91906116d8565b91506109c6565b60408401516a52b7d2dcc80cd2e4000000906109af838361169b565b6109b99190611662565b6109c391906116d8565b91505b83516000906a52b7d2dcc80cd2e4000000906109e2908561169b565b6109ec9190611662565b604080870184815260006020808a0182815273ffffffffffffffffffffffffffffffffffffffff8e168352908290529290208851815591516001830155516002909101559050610a3c818561164a565b98975050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610ad05760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610371565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208181526040918290208251606081018452815480825260018301549382019390935260029091015492810192909252841115610b6c5760405162461bcd60e51b815260206004820152601c60248201527f616d6f756e742065786365656473207661756c742062616c616e6365000000006044820152606401610371565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bd757600080fd5b505af1158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190611632565b60015490915060ff1615610c62576a52b7d2dcc80cd2e400000083604001516002546a52b7d2dcc80cd2e4000000610c47919061169b565b610c519190611662565b610c5b91906116d8565b9150610c95565b60408301516a52b7d2dcc80cd2e400000090610c7e838361169b565b610c889190611662565b610c9291906116d8565b91505b82516000906a52b7d2dcc80cd2e400000090610cb1908561169b565b610cbb9190611662565b90508084602001818151610ccf919061164a565b905250835187908590610ce39083906116d8565b90525050604080840191825273ffffffffffffffffffffffffffffffffffffffff8816600090815260208181529190208451815593015160018085019190915590516002909301929092555091505092915050565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610dc05760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610371565b60015460ff1615610e135760405162461bcd60e51b815260206004820152600f60248201527f616c7265616479206d61747572656400000000000000000000000000000000006044820152606401610371565b7f0000000000000000000000000000000000000000000000000000000000000000421015610e835760405162461bcd60e51b815260206004820152601d60248201527f6d6174757269747920686173206e6f74206265656e20726561636865640000006044820152606401610371565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001681179055604080517fbd6d894d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163bd6d894d9160048083019260209291908290030181600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6d9190611632565b600255600191505090565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146110005760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610371565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561106a57600080fd5b505af115801561107e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a29190611632565b73ffffffffffffffffffffffffffffffffffffffff861660009081526020818152604091829020825160608101845281548082526001830154938201939093526002909101549281019290925291925090156111d75760015460009060ff161561114b576a52b7d2dcc80cd2e400000082604001516002546a52b7d2dcc80cd2e4000000611130919061169b565b61113a9190611662565b61114491906116d8565b905061117e565b60408201516a52b7d2dcc80cd2e400000090611167858361169b565b6111719190611662565b61117b91906116d8565b90505b81516000906a52b7d2dcc80cd2e40000009061119a908461169b565b6111a49190611662565b905080836020018181516111b8919061164a565b9052508251879084906111cc90839061164a565b9052506111db915050565b8481525b604080820192835273ffffffffffffffffffffffffffffffffffffffff87166000908152602081815291902082518155910151600180830191909155915160029091015591505092915050565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146112b05760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610371565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081815260408083208151606080820184528254825260018084015483870152600293840154838601527f0000000000000000000000000000000000000000000000000000000000000000909716865285855294839020835195860184528054865295860154938501939093529390930154928201929092528151859083906113589083906116d8565b9150818152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114019190611632565b90506000818360400151146114e4576040830151156114dc5760015460ff161561146a576a52b7d2dcc80cd2e400000083604001516002546a52b7d2dcc80cd2e400000061144f919061169b565b6114599190611662565b61146391906116d8565b905061149d565b60408301516a52b7d2dcc80cd2e400000090611486848361169b565b6114909190611662565b61149a91906116d8565b90505b82516000906a52b7d2dcc80cd2e4000000906114b9908461169b565b6114c39190611662565b905080846020018181516114d7919061164a565b905250505b604083018290525b86836000018181516114f6919061164a565b905250505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600090815260208181526040808320855181558286015160018083019190915595820151600291820155938a1683529182902085518155908501518185015593015192019190915591505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146115a857600080fd5b919050565b6000602082840312156115be578081fd5b6115c782611584565b9392505050565b6000806000606084860312156115e2578182fd5b6115eb84611584565b92506115f960208501611584565b9150604084013590509250925092565b6000806040838503121561161b578182fd5b61162483611584565b946020939093013593505050565b600060208284031215611643578081fd5b5051919050565b6000821982111561165d5761165d6116ef565b500190565b600082611696577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116d3576116d36116ef565b500290565b6000828210156116ea576116ea6116ef565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212205515bd2ae8db859309b84a6a0030912befc08d02fef9ad6cc998f7f0f572dd5a64736f6c63430008040033a26469706673582212201c7df636053bdfb58bb356dece9e15d540e71cc8dda38f1d42fec99e37b0b46864736f6c63430008040033"

// DeployMarketPlace deploys a new Ethereum contract, binding an instance of MarketPlace to it.
func DeployMarketPlace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MarketPlace, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketPlaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// MarketPlace is an auto generated Go binding around an Ethereum contract.
type MarketPlace struct {
	MarketPlaceCaller     // Read-only binding to the contract
	MarketPlaceTransactor // Write-only binding to the contract
	MarketPlaceFilterer   // Log filterer for contract events
}

// MarketPlaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketPlaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketPlaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketPlaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketPlaceSession struct {
	Contract     *MarketPlace      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketPlaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketPlaceCallerSession struct {
	Contract *MarketPlaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MarketPlaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketPlaceTransactorSession struct {
	Contract     *MarketPlaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MarketPlaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketPlaceRaw struct {
	Contract *MarketPlace // Generic contract binding to access the raw methods on
}

// MarketPlaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketPlaceCallerRaw struct {
	Contract *MarketPlaceCaller // Generic read-only contract binding to access the raw methods on
}

// MarketPlaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketPlaceTransactorRaw struct {
	Contract *MarketPlaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarketPlace creates a new instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlace(address common.Address, backend bind.ContractBackend) (*MarketPlace, error) {
	contract, err := bindMarketPlace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// NewMarketPlaceCaller creates a new read-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceCaller(address common.Address, caller bind.ContractCaller) (*MarketPlaceCaller, error) {
	contract, err := bindMarketPlace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCaller{contract: contract}, nil
}

// NewMarketPlaceTransactor creates a new write-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketPlaceTransactor, error) {
	contract, err := bindMarketPlace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransactor{contract: contract}, nil
}

// NewMarketPlaceFilterer creates a new log filterer instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketPlaceFilterer, error) {
	contract, err := bindMarketPlace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceFilterer{contract: contract}, nil
}

// bindMarketPlace binds a generic wrapper to an already deployed contract.
func bindMarketPlace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.MarketPlaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceCaller) CTokenAddress(opts *bind.CallOpts, a common.Address, m *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "cTokenAddress", a, m)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceSession) CTokenAddress(a common.Address, m *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.CTokenAddress(&_MarketPlace.CallOpts, a, m)
}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) CTokenAddress(a common.Address, m *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.CTokenAddress(&_MarketPlace.CallOpts, a, m)
}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr, uint256 maturityRate)
func (_MarketPlace *MarketPlaceCaller) Markets(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr   common.Address
	ZcTokenAddr  common.Address
	VaultAddr    common.Address
	MaturityRate *big.Int
}, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "markets", arg0, arg1)

	outstruct := new(struct {
		CTokenAddr   common.Address
		ZcTokenAddr  common.Address
		VaultAddr    common.Address
		MaturityRate *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CTokenAddr = out[0].(common.Address)
	outstruct.ZcTokenAddr = out[1].(common.Address)
	outstruct.VaultAddr = out[2].(common.Address)
	outstruct.MaturityRate = out[3].(*big.Int)

	return *outstruct, err

}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr, uint256 maturityRate)
func (_MarketPlace *MarketPlaceSession) Markets(arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr   common.Address
	ZcTokenAddr  common.Address
	VaultAddr    common.Address
	MaturityRate *big.Int
}, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1)
}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr, uint256 maturityRate)
func (_MarketPlace *MarketPlaceCallerSession) Markets(arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr   common.Address
	ZcTokenAddr  common.Address
	VaultAddr    common.Address
	MaturityRate *big.Int
}, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1)
}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCaller) Mature(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "mature", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceSession) Mature(arg0 common.Address, arg1 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Mature(&_MarketPlace.CallOpts, arg0, arg1)
}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCallerSession) Mature(arg0 common.Address, arg1 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Mature(&_MarketPlace.CallOpts, arg0, arg1)
}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceCaller) MaturityRate(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "maturityRate", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceSession) MaturityRate(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _MarketPlace.Contract.MaturityRate(&_MarketPlace.CallOpts, arg0, arg1)
}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceCallerSession) MaturityRate(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _MarketPlace.Contract.MaturityRate(&_MarketPlace.CallOpts, arg0, arg1)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MarketPlace *MarketPlaceCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MarketPlace *MarketPlaceSession) Paused() (bool, error) {
	return _MarketPlace.Contract.Paused(&_MarketPlace.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MarketPlace *MarketPlaceCallerSession) Paused() (bool, error) {
	return _MarketPlace.Contract.Paused(&_MarketPlace.CallOpts)
}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Swivel(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "swivel")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceSession) Swivel() (common.Address, error) {
	return _MarketPlace.Contract.Swivel(&_MarketPlace.CallOpts)
}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Swivel() (common.Address, error) {
	return _MarketPlace.Contract.Swivel(&_MarketPlace.CallOpts)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0xb50a66f7.
//
// Solidity: function burnZcTokenRemovingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) BurnZcTokenRemovingNotional(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "burnZcTokenRemovingNotional", u, m, t, a)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0xb50a66f7.
//
// Solidity: function burnZcTokenRemovingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) BurnZcTokenRemovingNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnZcTokenRemovingNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0xb50a66f7.
//
// Solidity: function burnZcTokenRemovingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) BurnZcTokenRemovingNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnZcTokenRemovingNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x9f5e472f.
//
// Solidity: function createMarket(uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CreateMarket(opts *bind.TransactOpts, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "createMarket", m, c, n, s)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x9f5e472f.
//
// Solidity: function createMarket(uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceSession) CreateMarket(m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, m, c, n, s)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x9f5e472f.
//
// Solidity: function createMarket(uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CreateMarket(m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, m, c, n, s)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CustodialExit(opts *bind.TransactOpts, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "custodialExit", u, m, z, n, a)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) CustodialExit(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialExit(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CustodialExit(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialExit(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CustodialInitiate(opts *bind.TransactOpts, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "custodialInitiate", u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) CustodialInitiate(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialInitiate(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CustodialInitiate(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialInitiate(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) MatureMarket(opts *bind.TransactOpts, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "matureMarket", u, m)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceSession) MatureMarket(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MatureMarket(&_MarketPlace.TransactOpts, u, m)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) MatureMarket(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MatureMarket(&_MarketPlace.TransactOpts, u, m)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0xef267f2c.
//
// Solidity: function mintZcTokenAddingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) MintZcTokenAddingNotional(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "mintZcTokenAddingNotional", u, m, t, a)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0xef267f2c.
//
// Solidity: function mintZcTokenAddingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) MintZcTokenAddingNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintZcTokenAddingNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0xef267f2c.
//
// Solidity: function mintZcTokenAddingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) MintZcTokenAddingNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintZcTokenAddingNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) P2pVaultExchange(opts *bind.TransactOpts, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "p2pVaultExchange", u, m, f, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) P2pVaultExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pVaultExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) P2pVaultExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pVaultExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) P2pZcTokenExchange(opts *bind.TransactOpts, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "p2pZcTokenExchange", u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) P2pZcTokenExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pZcTokenExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) P2pZcTokenExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pZcTokenExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// Pause is a paid mutator transaction binding the contract method 0x02329a29.
//
// Solidity: function pause(bool b) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) Pause(opts *bind.TransactOpts, b bool) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "pause", b)
}

// Pause is a paid mutator transaction binding the contract method 0x02329a29.
//
// Solidity: function pause(bool b) returns(bool)
func (_MarketPlace *MarketPlaceSession) Pause(b bool) (*types.Transaction, error) {
	return _MarketPlace.Contract.Pause(&_MarketPlace.TransactOpts, b)
}

// Pause is a paid mutator transaction binding the contract method 0x02329a29.
//
// Solidity: function pause(bool b) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) Pause(b bool) (*types.Transaction, error) {
	return _MarketPlace.Contract.Pause(&_MarketPlace.TransactOpts, b)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa11f4856.
//
// Solidity: function redeemVaultInterest(address u, uint256 m, address t) returns(uint256)
func (_MarketPlace *MarketPlaceTransactor) RedeemVaultInterest(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "redeemVaultInterest", u, m, t)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa11f4856.
//
// Solidity: function redeemVaultInterest(address u, uint256 m, address t) returns(uint256)
func (_MarketPlace *MarketPlaceSession) RedeemVaultInterest(u common.Address, m *big.Int, t common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemVaultInterest(&_MarketPlace.TransactOpts, u, m, t)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa11f4856.
//
// Solidity: function redeemVaultInterest(address u, uint256 m, address t) returns(uint256)
func (_MarketPlace *MarketPlaceTransactorSession) RedeemVaultInterest(u common.Address, m *big.Int, t common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemVaultInterest(&_MarketPlace.TransactOpts, u, m, t)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xc5ee114d.
//
// Solidity: function redeemZcToken(address u, uint256 m, address t, uint256 a) returns(uint256)
func (_MarketPlace *MarketPlaceTransactor) RedeemZcToken(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "redeemZcToken", u, m, t, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xc5ee114d.
//
// Solidity: function redeemZcToken(address u, uint256 m, address t, uint256 a) returns(uint256)
func (_MarketPlace *MarketPlaceSession) RedeemZcToken(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemZcToken(&_MarketPlace.TransactOpts, u, m, t, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xc5ee114d.
//
// Solidity: function redeemZcToken(address u, uint256 m, address t, uint256 a) returns(uint256)
func (_MarketPlace *MarketPlaceTransactorSession) RedeemZcToken(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemZcToken(&_MarketPlace.TransactOpts, u, m, t, a)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) SetSwivelAddress(opts *bind.TransactOpts, s common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "setSwivelAddress", s)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceSession) SetSwivelAddress(s common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetSwivelAddress(&_MarketPlace.TransactOpts, s)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) SetSwivelAddress(s common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetSwivelAddress(&_MarketPlace.TransactOpts, s)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) TransferAdmin(opts *bind.TransactOpts, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "transferAdmin", a)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address a) returns(bool)
func (_MarketPlace *MarketPlaceSession) TransferAdmin(a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferAdmin(&_MarketPlace.TransactOpts, a)
}

// TransferAdmin is a paid mutator transaction binding the contract method 0x75829def.
//
// Solidity: function transferAdmin(address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) TransferAdmin(a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferAdmin(&_MarketPlace.TransactOpts, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) TransferVaultNotional(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "transferVaultNotional", u, m, t, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) TransferVaultNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) TransferVaultNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0x3cf9a4e3.
//
// Solidity: function transferVaultNotionalFee(address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) TransferVaultNotionalFee(opts *bind.TransactOpts, u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "transferVaultNotionalFee", u, m, f, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0x3cf9a4e3.
//
// Solidity: function transferVaultNotionalFee(address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) TransferVaultNotionalFee(u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotionalFee(&_MarketPlace.TransactOpts, u, m, f, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0x3cf9a4e3.
//
// Solidity: function transferVaultNotionalFee(address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) TransferVaultNotionalFee(u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotionalFee(&_MarketPlace.TransactOpts, u, m, f, a)
}

// MarketPlaceCreateIterator is returned from FilterCreate and is used to iterate over the raw logs and unpacked data for Create events raised by the MarketPlace contract.
type MarketPlaceCreateIterator struct {
	Event *MarketPlaceCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCreate represents a Create event raised by the MarketPlace contract.
type MarketPlaceCreate struct {
	Underlying   common.Address
	Maturity     *big.Int
	CToken       common.Address
	ZcToken      common.Address
	VaultTracker common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreate is a free log retrieval operation binding the contract event 0x1747a3ed83b35b999b9000df0690f6563f6b016a1cce0c8dfc911866d3b92177.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken, address vaultTracker)
func (_MarketPlace *MarketPlaceFilterer) FilterCreate(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCreateIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "Create", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCreateIterator{contract: _MarketPlace.contract, event: "Create", logs: logs, sub: sub}, nil
}

// WatchCreate is a free log subscription operation binding the contract event 0x1747a3ed83b35b999b9000df0690f6563f6b016a1cce0c8dfc911866d3b92177.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken, address vaultTracker)
func (_MarketPlace *MarketPlaceFilterer) WatchCreate(opts *bind.WatchOpts, sink chan<- *MarketPlaceCreate, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "Create", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCreate)
				if err := _MarketPlace.contract.UnpackLog(event, "Create", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreate is a log parse operation binding the contract event 0x1747a3ed83b35b999b9000df0690f6563f6b016a1cce0c8dfc911866d3b92177.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken, address vaultTracker)
func (_MarketPlace *MarketPlaceFilterer) ParseCreate(log types.Log) (*MarketPlaceCreate, error) {
	event := new(MarketPlaceCreate)
	if err := _MarketPlace.contract.UnpackLog(event, "Create", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceCustodialExitIterator is returned from FilterCustodialExit and is used to iterate over the raw logs and unpacked data for CustodialExit events raised by the MarketPlace contract.
type MarketPlaceCustodialExitIterator struct {
	Event *MarketPlaceCustodialExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCustodialExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCustodialExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCustodialExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCustodialExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCustodialExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCustodialExit represents a CustodialExit event raised by the MarketPlace contract.
type MarketPlaceCustodialExit struct {
	Underlying common.Address
	Maturity   *big.Int
	ZcTarget   common.Address
	NTarget    common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCustodialExit is a free log retrieval operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterCustodialExit(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCustodialExitIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CustodialExit", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCustodialExitIterator{contract: _MarketPlace.contract, event: "CustodialExit", logs: logs, sub: sub}, nil
}

// WatchCustodialExit is a free log subscription operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchCustodialExit(opts *bind.WatchOpts, sink chan<- *MarketPlaceCustodialExit, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CustodialExit", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCustodialExit)
				if err := _MarketPlace.contract.UnpackLog(event, "CustodialExit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodialExit is a log parse operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseCustodialExit(log types.Log) (*MarketPlaceCustodialExit, error) {
	event := new(MarketPlaceCustodialExit)
	if err := _MarketPlace.contract.UnpackLog(event, "CustodialExit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceCustodialInitiateIterator is returned from FilterCustodialInitiate and is used to iterate over the raw logs and unpacked data for CustodialInitiate events raised by the MarketPlace contract.
type MarketPlaceCustodialInitiateIterator struct {
	Event *MarketPlaceCustodialInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCustodialInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCustodialInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCustodialInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCustodialInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCustodialInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCustodialInitiate represents a CustodialInitiate event raised by the MarketPlace contract.
type MarketPlaceCustodialInitiate struct {
	Underlying common.Address
	Maturity   *big.Int
	ZcTarget   common.Address
	NTarget    common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCustodialInitiate is a free log retrieval operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterCustodialInitiate(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCustodialInitiateIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CustodialInitiate", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCustodialInitiateIterator{contract: _MarketPlace.contract, event: "CustodialInitiate", logs: logs, sub: sub}, nil
}

// WatchCustodialInitiate is a free log subscription operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchCustodialInitiate(opts *bind.WatchOpts, sink chan<- *MarketPlaceCustodialInitiate, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CustodialInitiate", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCustodialInitiate)
				if err := _MarketPlace.contract.UnpackLog(event, "CustodialInitiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodialInitiate is a log parse operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseCustodialInitiate(log types.Log) (*MarketPlaceCustodialInitiate, error) {
	event := new(MarketPlaceCustodialInitiate)
	if err := _MarketPlace.contract.UnpackLog(event, "CustodialInitiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceMatureIterator is returned from FilterMature and is used to iterate over the raw logs and unpacked data for Mature events raised by the MarketPlace contract.
type MarketPlaceMatureIterator struct {
	Event *MarketPlaceMature // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceMatureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceMature)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceMature)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceMatureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceMatureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceMature represents a Mature event raised by the MarketPlace contract.
type MarketPlaceMature struct {
	Underlying   common.Address
	Maturity     *big.Int
	MaturityRate *big.Int
	Matured      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMature is a free log retrieval operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) FilterMature(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceMatureIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "Mature", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceMatureIterator{contract: _MarketPlace.contract, event: "Mature", logs: logs, sub: sub}, nil
}

// WatchMature is a free log subscription operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) WatchMature(opts *bind.WatchOpts, sink chan<- *MarketPlaceMature, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "Mature", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceMature)
				if err := _MarketPlace.contract.UnpackLog(event, "Mature", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMature is a log parse operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) ParseMature(log types.Log) (*MarketPlaceMature, error) {
	event := new(MarketPlaceMature)
	if err := _MarketPlace.contract.UnpackLog(event, "Mature", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceP2pVaultExchangeIterator is returned from FilterP2pVaultExchange and is used to iterate over the raw logs and unpacked data for P2pVaultExchange events raised by the MarketPlace contract.
type MarketPlaceP2pVaultExchangeIterator struct {
	Event *MarketPlaceP2pVaultExchange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceP2pVaultExchangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceP2pVaultExchange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceP2pVaultExchange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceP2pVaultExchangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceP2pVaultExchangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceP2pVaultExchange represents a P2pVaultExchange event raised by the MarketPlace contract.
type MarketPlaceP2pVaultExchange struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterP2pVaultExchange is a free log retrieval operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterP2pVaultExchange(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceP2pVaultExchangeIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "P2pVaultExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceP2pVaultExchangeIterator{contract: _MarketPlace.contract, event: "P2pVaultExchange", logs: logs, sub: sub}, nil
}

// WatchP2pVaultExchange is a free log subscription operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchP2pVaultExchange(opts *bind.WatchOpts, sink chan<- *MarketPlaceP2pVaultExchange, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "P2pVaultExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceP2pVaultExchange)
				if err := _MarketPlace.contract.UnpackLog(event, "P2pVaultExchange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseP2pVaultExchange is a log parse operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseP2pVaultExchange(log types.Log) (*MarketPlaceP2pVaultExchange, error) {
	event := new(MarketPlaceP2pVaultExchange)
	if err := _MarketPlace.contract.UnpackLog(event, "P2pVaultExchange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceP2pZcTokenExchangeIterator is returned from FilterP2pZcTokenExchange and is used to iterate over the raw logs and unpacked data for P2pZcTokenExchange events raised by the MarketPlace contract.
type MarketPlaceP2pZcTokenExchangeIterator struct {
	Event *MarketPlaceP2pZcTokenExchange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceP2pZcTokenExchange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceP2pZcTokenExchange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceP2pZcTokenExchange represents a P2pZcTokenExchange event raised by the MarketPlace contract.
type MarketPlaceP2pZcTokenExchange struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterP2pZcTokenExchange is a free log retrieval operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterP2pZcTokenExchange(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceP2pZcTokenExchangeIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "P2pZcTokenExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceP2pZcTokenExchangeIterator{contract: _MarketPlace.contract, event: "P2pZcTokenExchange", logs: logs, sub: sub}, nil
}

// WatchP2pZcTokenExchange is a free log subscription operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchP2pZcTokenExchange(opts *bind.WatchOpts, sink chan<- *MarketPlaceP2pZcTokenExchange, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "P2pZcTokenExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceP2pZcTokenExchange)
				if err := _MarketPlace.contract.UnpackLog(event, "P2pZcTokenExchange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseP2pZcTokenExchange is a log parse operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseP2pZcTokenExchange(log types.Log) (*MarketPlaceP2pZcTokenExchange, error) {
	event := new(MarketPlaceP2pZcTokenExchange)
	if err := _MarketPlace.contract.UnpackLog(event, "P2pZcTokenExchange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceRedeemVaultInterestIterator is returned from FilterRedeemVaultInterest and is used to iterate over the raw logs and unpacked data for RedeemVaultInterest events raised by the MarketPlace contract.
type MarketPlaceRedeemVaultInterestIterator struct {
	Event *MarketPlaceRedeemVaultInterest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceRedeemVaultInterestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceRedeemVaultInterest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceRedeemVaultInterest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceRedeemVaultInterestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceRedeemVaultInterestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceRedeemVaultInterest represents a RedeemVaultInterest event raised by the MarketPlace contract.
type MarketPlaceRedeemVaultInterest struct {
	Underlying common.Address
	Maturity   *big.Int
	Sender     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemVaultInterest is a free log retrieval operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) FilterRedeemVaultInterest(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int, sender []common.Address) (*MarketPlaceRedeemVaultInterestIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "RedeemVaultInterest", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceRedeemVaultInterestIterator{contract: _MarketPlace.contract, event: "RedeemVaultInterest", logs: logs, sub: sub}, nil
}

// WatchRedeemVaultInterest is a free log subscription operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) WatchRedeemVaultInterest(opts *bind.WatchOpts, sink chan<- *MarketPlaceRedeemVaultInterest, underlying []common.Address, maturity []*big.Int, sender []common.Address) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "RedeemVaultInterest", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceRedeemVaultInterest)
				if err := _MarketPlace.contract.UnpackLog(event, "RedeemVaultInterest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemVaultInterest is a log parse operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) ParseRedeemVaultInterest(log types.Log) (*MarketPlaceRedeemVaultInterest, error) {
	event := new(MarketPlaceRedeemVaultInterest)
	if err := _MarketPlace.contract.UnpackLog(event, "RedeemVaultInterest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceRedeemZcTokenIterator is returned from FilterRedeemZcToken and is used to iterate over the raw logs and unpacked data for RedeemZcToken events raised by the MarketPlace contract.
type MarketPlaceRedeemZcTokenIterator struct {
	Event *MarketPlaceRedeemZcToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceRedeemZcTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceRedeemZcToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceRedeemZcToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceRedeemZcTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceRedeemZcTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceRedeemZcToken represents a RedeemZcToken event raised by the MarketPlace contract.
type MarketPlaceRedeemZcToken struct {
	Underlying common.Address
	Maturity   *big.Int
	Sender     common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemZcToken is a free log retrieval operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterRedeemZcToken(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int, sender []common.Address) (*MarketPlaceRedeemZcTokenIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "RedeemZcToken", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceRedeemZcTokenIterator{contract: _MarketPlace.contract, event: "RedeemZcToken", logs: logs, sub: sub}, nil
}

// WatchRedeemZcToken is a free log subscription operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchRedeemZcToken(opts *bind.WatchOpts, sink chan<- *MarketPlaceRedeemZcToken, underlying []common.Address, maturity []*big.Int, sender []common.Address) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "RedeemZcToken", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceRedeemZcToken)
				if err := _MarketPlace.contract.UnpackLog(event, "RedeemZcToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemZcToken is a log parse operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseRedeemZcToken(log types.Log) (*MarketPlaceRedeemZcToken, error) {
	event := new(MarketPlaceRedeemZcToken)
	if err := _MarketPlace.contract.UnpackLog(event, "RedeemZcToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceTransferVaultNotionalIterator is returned from FilterTransferVaultNotional and is used to iterate over the raw logs and unpacked data for TransferVaultNotional events raised by the MarketPlace contract.
type MarketPlaceTransferVaultNotionalIterator struct {
	Event *MarketPlaceTransferVaultNotional // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceTransferVaultNotionalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceTransferVaultNotional)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceTransferVaultNotional)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceTransferVaultNotionalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceTransferVaultNotionalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceTransferVaultNotional represents a TransferVaultNotional event raised by the MarketPlace contract.
type MarketPlaceTransferVaultNotional struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransferVaultNotional is a free log retrieval operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterTransferVaultNotional(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceTransferVaultNotionalIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "TransferVaultNotional", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransferVaultNotionalIterator{contract: _MarketPlace.contract, event: "TransferVaultNotional", logs: logs, sub: sub}, nil
}

// WatchTransferVaultNotional is a free log subscription operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchTransferVaultNotional(opts *bind.WatchOpts, sink chan<- *MarketPlaceTransferVaultNotional, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "TransferVaultNotional", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceTransferVaultNotional)
				if err := _MarketPlace.contract.UnpackLog(event, "TransferVaultNotional", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferVaultNotional is a log parse operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseTransferVaultNotional(log types.Log) (*MarketPlaceTransferVaultNotional, error) {
	event := new(MarketPlaceTransferVaultNotional)
	if err := _MarketPlace.contract.UnpackLog(event, "TransferVaultNotional", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
