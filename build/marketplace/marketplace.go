// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package marketplace

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketPlaceMetaData contains all meta data concerning the MarketPlace contract.
var MarketPlaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"r\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Exists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Invalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"burnForUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"}],\"name\":\"buyPrincipalToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"}],\"name\":\"buyUnderlying\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address[8]\",\"name\":\"t\",\"type\":\"address[8]\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"d\",\"type\":\"uint8\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ptBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"mintWithUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"}],\"name\":\"sellPrincipalToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"}],\"name\":\"sellUnderlying\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setPrincipal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101c0604052600060a081815260c082905260e08290526101008290526101208290526101408290526101608290526101808290526101a0919091526200004b906003906009620000a0565b503480156200005957600080fd5b5060405162003b6c38038062003b6c8339810160408190526200007c9162000150565b600280546001600160a01b031916331790556001600160a01b031660805262000182565b600183019183908215620001275791602002820160005b83821115620000f657835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302620000b7565b8015620001255782816101000a81549060ff0219169055600101602081600001049283019260010302620000f6565b505b506200013592915062000139565b5090565b5b808211156200013557600081556001016200013a565b6000602082840312156200016357600080fd5b81516001600160a01b03811681146200017b57600080fd5b9392505050565b6080516139c7620001a5600039600081816101d801526113cd01526139c76000f3fe60806040523480156200001157600080fd5b5060043610620001315760003560e01c80638ef6c83e11620000c0578063cef26d43116200008b578063dfc8fff6116200006e578063dfc8fff61462000345578063f851a440146200035c578063fe3ee169146200037d57600080fd5b8063cef26d431462000317578063de7bf0a2146200032e57600080fd5b80638ef6c83e146200028e5780638f38a55514620002a5578063ad31b19814620002e9578063c9ac53b1146200030057600080fd5b806334503b1a116200010157806334503b1a14620001fa57806366eb4bf814620002335780636d605fcf146200024a5780637674535d146200026157600080fd5b8062dde10e1462000136578063125cf47f146200016257806323f86bef146200019f5780632ba29d3814620001d2575b600080fd5b6200014d6200014736600462001b01565b62000394565b60405190151581526020015b60405180910390f35b620001796200017336600462001b53565b620003bf565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200162000159565b620001b6620001b036600462001b8b565b62000408565b6040805193845260208401929092529082015260600162000159565b620001797f000000000000000000000000000000000000000000000000000000000000000081565b620002116200020b36600462001c0b565b6200058e565b6040516fffffffffffffffffffffffffffffffff909116815260200162000159565b6200014d6200024436600462001c63565b62000860565b6200014d6200025b36600462001cb0565b62000a13565b620002786200027236600462001cf7565b62000b68565b6040805192835260208301919091520162000159565b620002116200029f36600462001c0b565b62000c36565b62000179620002b636600462001d35565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b62000211620002fa36600462001c0b565b62000e81565b620002116200031136600462001c0b565b62001019565b6200014d6200032836600462001ddf565b620011b1565b620001b66200033f36600462001cf7565b62001490565b620001b66200035636600462001b8b565b6200156c565b600254620001799073ffffffffffffffffffffffffffffffffffffffff1681565b6200014d6200038e36600462001f06565b620016e7565b60038160098110620003a557600080fd5b60209182820401919006915054906101000a900460ff1681565b60006020528260005260406000206020528160005260406000208160098110620003e857600080fd5b015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260016020908152604080832089845282528083205481517f6f307dc300000000000000000000000000000000000000000000000000000000815291519394859485949290911692620004cb928492636f307dc3926004808201939291829003018189875af11580156200049c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004c2919062001f46565b33838b62001781565b6040517f50ed70740000000000000000000000000000000000000000000000000000000081523360048201819052602482015260448101889052606481018790526084810186905273ffffffffffffffffffffffffffffffffffffffff8216906350ed70749060a4015b6060604051808303816000875af115801562000555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200057b919062001f6d565b9350935093505096509650969350505050565b60008460038160ff1660098110620005aa57620005aa62001f9c565b602081049091015460ff601f9092166101000a900416156200062d576040517f53a2556c00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7072696e6370616c20706175736564000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845282528083205481517fdbc162de0000000000000000000000000000000000000000000000000000000081529151941693620006fb93859363dbc162de9360048082019492939183900301908290875af1158015620006bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006e1919062001f46565b82866fffffffffffffffffffffffffffffffff166200186f565b6040517f0a7e546e0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff82169063134df58b9033908390630a7e546e906024015b6020604051808303816000875af115801562000785573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007ab919062001fcb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526fffffffffffffffffffffffffffffffff1660248201526044015b6020604051808303816000875af11580156200082f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000855919062001fcb565b979650505050505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff16338114620008b6576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260208181526040808320878452909152812060ff881660098110620008fb57620008fb62001f9c565b015473ffffffffffffffffffffffffffffffffffffffff16146200097c576040517f1ed713cc00000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d61726b657420616c7265616479206578697374730000000000000000000000604482015260640162000624565b73ffffffffffffffffffffffffffffffffffffffff85166000908152602081815260408083208784529091529020839060ff881660098110620009c357620009c362001f9c565b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550600195945050505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff1633811462000a69576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600160209081526040808320888452909152902054161562000b05576040517f1ed713cc00000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20616c72656164792065786973747300000000000000000000000000604482015260640162000624565b505073ffffffffffffffffffffffffffffffffffffffff928316600090815260016020818152604080842095845294905292902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016919093161790915590565b73ffffffffffffffffffffffffffffffffffffffff84811660009081526001602090815260408083208784529091528082205490517f584c019200000000000000000000000000000000000000000000000000000000815233600482015260248101869052604481018590529192839291169063584c01929060640160408051808303816000875af115801562000c03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c29919062001feb565b9150915094509492505050565b60008460038160ff166009811062000c525762000c5262001f9c565b602081049091015460ff601f9092166101000a9004161562000cd1576040517f53a2556c00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7072696e6370616c207061757365640000000000000000000000000000000000604482015260640162000624565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845282528083205481517f6f307dc3000000000000000000000000000000000000000000000000000000008152915194169362000d5f938593636f307dc39360048082019492939183900301908290875af1158015620006bb573d6000803e3d6000fd5b6040517fc9c917d70000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff82169063b03ceb15903390839063c9c917d7906024015b6020604051808303816000875af115801562000de9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e0f919062001fcb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526fffffffffffffffffffffffffffffffff9081166024830152871660448201526064016200080f565b60008460038160ff166009811062000e9d5762000e9d62001f9c565b602081049091015460ff601f9092166101000a9004161562000f1c576040517f53a2556c00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7072696e6370616c207061757365640000000000000000000000000000000000604482015260640162000624565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845282528083205481517fdbc162de000000000000000000000000000000000000000000000000000000008152915194169362000faa93859363dbc162de9360048082019492939183900301908290875af1158015620006bb573d6000803e3d6000fd5b6040517f76a912530000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff82169063e78a9b0c90339083906376a912539060240162000dc9565b60008460038160ff166009811062001035576200103562001f9c565b602081049091015460ff601f9092166101000a90041615620010b4576040517f53a2556c00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7072696e6370616c207061757365640000000000000000000000000000000000604482015260640162000624565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845282528083205481517f6f307dc3000000000000000000000000000000000000000000000000000000008152915194169362001142938593636f307dc39360048082019492939183900301908290875af1158015620006bb573d6000803e3d6000fd5b6040517ff332ea5e0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff821690633e232091903390839063f332ea5e9060240162000765565b60025460009073ffffffffffffffffffffffffffffffffffffffff1633811462001207576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8a81166000908152602081815260408083208d84529091529020541615620012a1576040517f1ed713cc00000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d61726b657420616c7265616479206578697374730000000000000000000000604482015260640162000624565b60008a8a8989898989604051620012b89062001a5a565b620012ca979695949392919062002059565b604051809103906000f080158015620012e7573d6000803e3d6000fd5b50604080516101208101825273ffffffffffffffffffffffffffffffffffffffff83811682528c5181166020808401919091528d0151811682840152918c015182166060808301919091528c015182166080808301919091528c0151821660a0808301919091528c0151821660c0808301919091528c0151821660e0808301919091528c01519091166101008201529091507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60005b60088160ff161015620013fc57620013f3838260ff1660098110620013c657620013c662001f9c565b60200201517f00000000000000000000000000000000000000000000000000000000000000008462001940565b6001016200139d565b5073ffffffffffffffffffffffffffffffffffffffff8d166000908152602081815260408083208f84529091529020620014399083600962001a68565b506040518c9073ffffffffffffffffffffffffffffffffffffffff8f16907f0ce205d5fda43f489af3d143ec11073757d0079e07852a6c1799f1e29e72e1ee90600090a35060019c9b505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84811660009081526001602090815260408083208784529091528082205490517fd7020d0a0000000000000000000000000000000000000000000000000000000081523360048201819052602482015260448101869052606481018590529192839283929091169063d7020d0a906084016060604051808303816000875af115801562001536573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200155c919062001f6d565b9250925092509450945094915050565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260016020908152604080832089845282528083205481517f6f307dc30000000000000000000000000000000000000000000000000000000081529151939485948594929091169262001600928492636f307dc3926004808201939291829003018189875af11580156200049c573d6000803e3d6000fd5b6200167f8173ffffffffffffffffffffffffffffffffffffffff1663d94073d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001650573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001676919062001f46565b33838a62001781565b6040517fb3f1c93d00000000000000000000000000000000000000000000000000000000815233600482018190526024820152604481018790526064810186905273ffffffffffffffffffffffffffffffffffffffff82169063b3f1c93d9060840162000535565b60025460009073ffffffffffffffffffffffffffffffffffffffff163381146200173d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260038560ff166009811062001757576200175762001f9c565b602091828204019190066101000a81548160ff021916908315150217905550600191505092915050565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260008060648360008a5af1915050620018008162001a0b565b62001868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7472616e736665722066726f6d206661696c6564000000000000000000000000604482015260640162000624565b5050505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af1915050620018d28162001a0b565b6200193a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c65640000000000000000000000000000000000604482015260640162000624565b50505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af1915050620019a38162001a0b565b6200193a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f617070726f7665206661696c6564000000000000000000000000000000000000604482015260640162000624565b6000803d8362001a1f57806000803e806000fd5b806020811462001a3a57801562001a4c576000925062001a51565b816000803e6000511515925062001a51565b600192505b50909392505050565b6118d380620020bf83390190565b826009810192821562001ad8579160200282015b8281111562001ad857825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019062001a7c565b5062001ae692915062001aea565b5090565b5b8082111562001ae6576000815560010162001aeb565b60006020828403121562001b1457600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811462001b3e57600080fd5b50565b803562001b4e8162001b1b565b919050565b60008060006060848603121562001b6957600080fd5b833562001b768162001b1b565b95602085013595506040909401359392505050565b60008060008060008060c0878903121562001ba557600080fd5b863562001bb28162001b1b565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b803560ff8116811462001b4e57600080fd5b6fffffffffffffffffffffffffffffffff8116811462001b3e57600080fd5b6000806000806080858703121562001c2257600080fd5b62001c2d8562001bda565b9350602085013562001c3f8162001b1b565b925060408501359150606085013562001c588162001bec565b939692955090935050565b6000806000806080858703121562001c7a57600080fd5b62001c858562001bda565b9350602085013562001c978162001b1b565b925060408501359150606085013562001c588162001b1b565b60008060006060848603121562001cc657600080fd5b833562001cd38162001b1b565b925060208401359150604084013562001cec8162001b1b565b809150509250925092565b6000806000806080858703121562001d0e57600080fd5b843562001d1b8162001b1b565b966020860135965060408601359560600135945092505050565b6000806040838503121562001d4957600080fd5b823562001d568162001b1b565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f84011262001da657600080fd5b50813567ffffffffffffffff81111562001dbf57600080fd5b60208301915083602082850101111562001dd857600080fd5b9250929050565b6000806000806000806000806101a0898b03121562001dfd57600080fd5b883562001e0a8162001b1b565b97506020898101359750605f8a018b1362001e2457600080fd5b604051610100810167ffffffffffffffff828210818311171562001e4c5762001e4c62001d64565b816040528291506101408d018e81111562001e6657600080fd5b60408e015b8181101562001e8d5762001e7f8162001b41565b845292850192850162001e6b565b50839a5080359450508084111562001ea457600080fd5b62001eb28e858f0162001d93565b90995097506101608d013593508892508084111562001ed057600080fd5b50505062001ee18b828c0162001d93565b909450925062001ef790506101808a0162001bda565b90509295985092959890939650565b6000806040838503121562001f1a57600080fd5b62001f258362001bda565b91506020830135801515811462001f3b57600080fd5b809150509250929050565b60006020828403121562001f5957600080fd5b815162001f668162001b1b565b9392505050565b60008060006060848603121562001f8357600080fd5b8351925060208401519150604084015190509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121562001fde57600080fd5b815162001f668162001bec565b6000806040838503121562001fff57600080fd5b505080516020909101519092909150565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8816815286602082015260a0604082015260006200209160a08301878962002010565b8281036060840152620020a681868862002010565b91505060ff831660808301529897505050505050505056fe6101006040523480156200001257600080fd5b50604051620018d3380380620018d38339810160408190526200003591620002a9565b82828282828282600490805190602001906200005392919062000136565b5081516200006990600590602085019062000136565b5080600260006101000a81548160ff021916908360ff160217905550505050620000ba83604051806040016040528060018152602001603160f81b8152504630620000df60201b62000a561760201c565b60805250503360a052505050506001600160a01b039190911660c05260e05262000395565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b828054620001449062000359565b90600052602060002090601f016020900481019282620001685760008555620001b3565b82601f106200018357805160ff1916838001178555620001b3565b82800160010185558215620001b3579182015b82811115620001b357825182559160200191906001019062000196565b50620001c1929150620001c5565b5090565b5b80821115620001c15760008155600101620001c6565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200020457600080fd5b81516001600160401b0380821115620002215762000221620001dc565b604051601f8301601f19908116603f011681019082821181831017156200024c576200024c620001dc565b816040528381526020925086838588010111156200026957600080fd5b600091505b838210156200028d57858201830151818301840152908201906200026e565b838211156200029f5760008385830101525b9695505050505050565b600080600080600060a08688031215620002c257600080fd5b85516001600160a01b0381168114620002da57600080fd5b6020870151604088015191965094506001600160401b0380821115620002ff57600080fd5b6200030d89838a01620001f2565b945060608801519150808211156200032457600080fd5b506200033388828901620001f2565b925050608086015160ff811681146200034b57600080fd5b809150509295509295909350565b600181811c908216806200036e57607f821691505b6020821081036200038f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516114ef620003e460003960006101b30152600061023201526000818161039701528181610597015261062a01526000818161031501526108d101526114ef6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806370a08231116100cd578063a9059cbb11610081578063d505accf11610066578063d505accf14610337578063dd62ed3e1461034c578063f851a4401461039257600080fd5b8063a9059cbb146102fd578063c2fb26a61461031057600080fd5b806395d89b41116100b257806395d89b41146102cf5780639dc29fac146102d7578063a457c2d7146102ea57600080fd5b806370a08231146102795780637ecebe00146102af57600080fd5b806323b872dd116101245780633950935111610109578063395093511461020757806340c10f191461021a5780636f307dc31461022d57600080fd5b806323b872dd146101d5578063313ce567146101e857600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd14610197578063204f83f9146101ae575b600080fd5b61015e6103b9565b60405161016b9190611206565b60405180910390f35b6101876101823660046112a2565b610447565b604051901515815260200161016b565b6101a060035481565b60405190815260200161016b565b6101a07f000000000000000000000000000000000000000000000000000000000000000081565b6101876101e33660046112cc565b61045d565b6002546101f59060ff1681565b60405160ff909116815260200161016b565b6101876102153660046112a2565b61054f565b6101876102283660046112a2565b610593565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161016b565b6101a0610287366004611308565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101a06102bd366004611308565b60066020526000908152604090205481565b61015e610619565b6101876102e53660046112a2565b610626565b6101876102f83660046112a2565b6106a2565b61018761030b3660046112a2565b610771565b6101a07f000000000000000000000000000000000000000000000000000000000000000081565b61034a61034536600461132a565b61077e565b005b6101a061035a36600461139d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b600480546103c6906113d0565b80601f01602080910402602001604051908101604052809291908181526020018280546103f2906113d0565b801561043f5780601f106104145761010080835404028352916020019161043f565b820191906000526020600020905b81548152906001019060200180831161042257829003601f168201915b505050505081565b6000610454338484610aad565b50600192915050565b600061046a848484610c62565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020908152604080832033845290915290205482811015610530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f6572633230207472616e7366657220616d6f756e74206578636565647320616c60448201527f6c6f77616e63650000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610544853361053f8685611452565b610aad565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161045491859061053f908690611469565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610605576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61060f8484610f1e565b5060019392505050565b600580546103c6906113d0565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610698576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61060f848461103e565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205482811015610762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f65726332302064656372656173656420616c6c6f77616e63652062656c6f772060448201527f7a65726f000000000000000000000000000000000000000000000000000000006064820152608401610527565b61060f338561053f8685611452565b6000610454338484610c62565b428410156107e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f65726332363132206578706972656420646561646c696e6500000000000000006044820152606401610527565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260066020526040812080546108a9918a918a918a91908661082483611481565b90915550604080517f80772249b4aef1688b30651778f4249b05cb73b517d98482439b9d8999b3060260208083019190915273ffffffffffffffffffffffffffffffffffffffff96871682840152949095166060860152608085019290925260a084015260c08084018a90528151808503909101815260e09093019052815191012090565b6040517f190100000000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600282015260228101829052604290209091506000906040805160008082526020820180845284905260ff89169282019290925260608101879052608081018690529192509060019060a0016020604051602081039080840390855afa15801561095e573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906109d957508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610a3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6572633236313220696e76616c6964207369676e6174757265000000000000006044820152606401610527565b610a4a8a8a8a610aad565b50505050505050505050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b73ffffffffffffffffffffffffffffffffffffffff8316610b50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f657263323020617070726f76652066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610527565b73ffffffffffffffffffffffffffffffffffffffff8216610bf3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f657263323020617070726f766520746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610527565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6572633230207472616e736665722066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610527565b73ffffffffffffffffffffffffffffffffffffffff8216610da7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6572633230207472616e7366657220746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610527565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610e5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f6572633230207472616e7366657220616d6f756e74206578636565647320626160448201527f6c616e63650000000000000000000000000000000000000000000000000000006064820152608401610527565b610e678282611452565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152602081905260408082209390935590851681529081208054849290610eaa908490611469565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f1091815260200190565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff8216610f9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6572633230206d696e7420746f20746865207a65726f206164647265737300006044820152606401610527565b8060036000828254610fad9190611469565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081208054839290610fe7908490611469565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff82166110bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f6572633230206275726e2066726f6d20746865207a65726f20616464726573736044820152606401610527565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015611171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f6572633230206275726e20616d6f756e7420657863656564732062616c616e6360448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608401610527565b61117b8282611452565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208190526040812091909155600380548492906111b6908490611452565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610c55565b600060208083528351808285015260005b8181101561123357858101830151858201604001528201611217565b81811115611245576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461129d57600080fd5b919050565b600080604083850312156112b557600080fd5b6112be83611279565b946020939093013593505050565b6000806000606084860312156112e157600080fd5b6112ea84611279565b92506112f860208501611279565b9150604084013590509250925092565b60006020828403121561131a57600080fd5b61132382611279565b9392505050565b600080600080600080600060e0888a03121561134557600080fd5b61134e88611279565b965061135c60208901611279565b95506040880135945060608801359350608088013560ff8116811461138057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156113b057600080fd5b6113b983611279565b91506113c760208401611279565b90509250929050565b600181811c908216806113e457607f821691505b60208210810361141d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561146457611464611423565b500390565b6000821982111561147c5761147c611423565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114b2576114b2611423565b506001019056fea264697066735822122056c45e6866305e314b822fc826538aee224e637e8fa2a38d3c35efe4b2b81b2c64736f6c634300080d0033a26469706673582212207919d2c37c633bfd92eec446f807459dfdd088d2aeaba1044475b0e40e90816c64736f6c634300080d0033",
}

// MarketPlaceABI is the input ABI used to generate the binding from.
// Deprecated: Use MarketPlaceMetaData.ABI instead.
var MarketPlaceABI = MarketPlaceMetaData.ABI

// MarketPlaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MarketPlaceMetaData.Bin instead.
var MarketPlaceBin = MarketPlaceMetaData.Bin

// DeployMarketPlace deploys a new Ethereum contract, binding an instance of MarketPlace to it.
func DeployMarketPlace(auth *bind.TransactOpts, backend bind.ContractBackend, r common.Address) (common.Address, *types.Transaction, *MarketPlace, error) {
	parsed, err := MarketPlaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MarketPlaceBin), backend, r)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// MarketPlace is an auto generated Go binding around an Ethereum contract.
type MarketPlace struct {
	MarketPlaceCaller     // Read-only binding to the contract
	MarketPlaceTransactor // Write-only binding to the contract
	MarketPlaceFilterer   // Log filterer for contract events
}

// MarketPlaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketPlaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketPlaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketPlaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketPlaceSession struct {
	Contract     *MarketPlace      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketPlaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketPlaceCallerSession struct {
	Contract *MarketPlaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MarketPlaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketPlaceTransactorSession struct {
	Contract     *MarketPlaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MarketPlaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketPlaceRaw struct {
	Contract *MarketPlace // Generic contract binding to access the raw methods on
}

// MarketPlaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketPlaceCallerRaw struct {
	Contract *MarketPlaceCaller // Generic read-only contract binding to access the raw methods on
}

// MarketPlaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketPlaceTransactorRaw struct {
	Contract *MarketPlaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarketPlace creates a new instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlace(address common.Address, backend bind.ContractBackend) (*MarketPlace, error) {
	contract, err := bindMarketPlace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// NewMarketPlaceCaller creates a new read-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceCaller(address common.Address, caller bind.ContractCaller) (*MarketPlaceCaller, error) {
	contract, err := bindMarketPlace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCaller{contract: contract}, nil
}

// NewMarketPlaceTransactor creates a new write-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketPlaceTransactor, error) {
	contract, err := bindMarketPlace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransactor{contract: contract}, nil
}

// NewMarketPlaceFilterer creates a new log filterer instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketPlaceFilterer, error) {
	contract, err := bindMarketPlace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceFilterer{contract: contract}, nil
}

// bindMarketPlace binds a generic wrapper to an already deployed contract.
func bindMarketPlace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.MarketPlaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// Markets is a free data retrieval call binding the contract method 0x125cf47f.
//
// Solidity: function markets(address , uint256 , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceCaller) Markets(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "markets", arg0, arg1, arg2)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Markets is a free data retrieval call binding the contract method 0x125cf47f.
//
// Solidity: function markets(address , uint256 , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceSession) Markets(arg0 common.Address, arg1 *big.Int, arg2 *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1, arg2)
}

// Markets is a free data retrieval call binding the contract method 0x125cf47f.
//
// Solidity: function markets(address , uint256 , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Markets(arg0 common.Address, arg1 *big.Int, arg2 *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1, arg2)
}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCaller) Paused(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "paused", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceSession) Paused(arg0 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Paused(&_MarketPlace.CallOpts, arg0)
}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCallerSession) Paused(arg0 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Paused(&_MarketPlace.CallOpts, arg0)
}

// Pools is a free data retrieval call binding the contract method 0x8f38a555.
//
// Solidity: function pools(address , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceCaller) Pools(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "pools", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Pools is a free data retrieval call binding the contract method 0x8f38a555.
//
// Solidity: function pools(address , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceSession) Pools(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.Pools(&_MarketPlace.CallOpts, arg0, arg1)
}

// Pools is a free data retrieval call binding the contract method 0x8f38a555.
//
// Solidity: function pools(address , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Pools(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.Pools(&_MarketPlace.CallOpts, arg0, arg1)
}

// Redeemer is a free data retrieval call binding the contract method 0x2ba29d38.
//
// Solidity: function redeemer() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Redeemer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "redeemer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Redeemer is a free data retrieval call binding the contract method 0x2ba29d38.
//
// Solidity: function redeemer() view returns(address)
func (_MarketPlace *MarketPlaceSession) Redeemer() (common.Address, error) {
	return _MarketPlace.Contract.Redeemer(&_MarketPlace.CallOpts)
}

// Redeemer is a free data retrieval call binding the contract method 0x2ba29d38.
//
// Solidity: function redeemer() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Redeemer() (common.Address, error) {
	return _MarketPlace.Contract.Redeemer(&_MarketPlace.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0xde7bf0a2.
//
// Solidity: function burn(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactor) Burn(opts *bind.TransactOpts, u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "burn", u, m, minRatio, maxRatio)
}

// Burn is a paid mutator transaction binding the contract method 0xde7bf0a2.
//
// Solidity: function burn(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceSession) Burn(u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.Burn(&_MarketPlace.TransactOpts, u, m, minRatio, maxRatio)
}

// Burn is a paid mutator transaction binding the contract method 0xde7bf0a2.
//
// Solidity: function burn(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactorSession) Burn(u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.Burn(&_MarketPlace.TransactOpts, u, m, minRatio, maxRatio)
}

// BurnForUnderlying is a paid mutator transaction binding the contract method 0x7674535d.
//
// Solidity: function burnForUnderlying(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256)
func (_MarketPlace *MarketPlaceTransactor) BurnForUnderlying(opts *bind.TransactOpts, u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "burnForUnderlying", u, m, minRatio, maxRatio)
}

// BurnForUnderlying is a paid mutator transaction binding the contract method 0x7674535d.
//
// Solidity: function burnForUnderlying(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256)
func (_MarketPlace *MarketPlaceSession) BurnForUnderlying(u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnForUnderlying(&_MarketPlace.TransactOpts, u, m, minRatio, maxRatio)
}

// BurnForUnderlying is a paid mutator transaction binding the contract method 0x7674535d.
//
// Solidity: function burnForUnderlying(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256)
func (_MarketPlace *MarketPlaceTransactorSession) BurnForUnderlying(u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnForUnderlying(&_MarketPlace.TransactOpts, u, m, minRatio, maxRatio)
}

// BuyPrincipalToken is a paid mutator transaction binding the contract method 0x8ef6c83e.
//
// Solidity: function buyPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactor) BuyPrincipalToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "buyPrincipalToken", p, u, m, a)
}

// BuyPrincipalToken is a paid mutator transaction binding the contract method 0x8ef6c83e.
//
// Solidity: function buyPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceSession) BuyPrincipalToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BuyPrincipalToken(&_MarketPlace.TransactOpts, p, u, m, a)
}

// BuyPrincipalToken is a paid mutator transaction binding the contract method 0x8ef6c83e.
//
// Solidity: function buyPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactorSession) BuyPrincipalToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BuyPrincipalToken(&_MarketPlace.TransactOpts, p, u, m, a)
}

// BuyUnderlying is a paid mutator transaction binding the contract method 0xad31b198.
//
// Solidity: function buyUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactor) BuyUnderlying(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "buyUnderlying", p, u, m, a)
}

// BuyUnderlying is a paid mutator transaction binding the contract method 0xad31b198.
//
// Solidity: function buyUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceSession) BuyUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BuyUnderlying(&_MarketPlace.TransactOpts, p, u, m, a)
}

// BuyUnderlying is a paid mutator transaction binding the contract method 0xad31b198.
//
// Solidity: function buyUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactorSession) BuyUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BuyUnderlying(&_MarketPlace.TransactOpts, p, u, m, a)
}

// CreateMarket is a paid mutator transaction binding the contract method 0xcef26d43.
//
// Solidity: function createMarket(address u, uint256 m, address[8] t, string n, string s, uint8 d) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CreateMarket(opts *bind.TransactOpts, u common.Address, m *big.Int, t [8]common.Address, n string, s string, d uint8) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "createMarket", u, m, t, n, s, d)
}

// CreateMarket is a paid mutator transaction binding the contract method 0xcef26d43.
//
// Solidity: function createMarket(address u, uint256 m, address[8] t, string n, string s, uint8 d) returns(bool)
func (_MarketPlace *MarketPlaceSession) CreateMarket(u common.Address, m *big.Int, t [8]common.Address, n string, s string, d uint8) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, u, m, t, n, s, d)
}

// CreateMarket is a paid mutator transaction binding the contract method 0xcef26d43.
//
// Solidity: function createMarket(address u, uint256 m, address[8] t, string n, string s, uint8 d) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CreateMarket(u common.Address, m *big.Int, t [8]common.Address, n string, s string, d uint8) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, u, m, t, n, s, d)
}

// Mint is a paid mutator transaction binding the contract method 0xdfc8fff6.
//
// Solidity: function mint(address u, uint256 m, uint256 underlyingAmount, uint256 principalTokenAmount, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactor) Mint(opts *bind.TransactOpts, u common.Address, m *big.Int, underlyingAmount *big.Int, principalTokenAmount *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "mint", u, m, underlyingAmount, principalTokenAmount, minRatio, maxRatio)
}

// Mint is a paid mutator transaction binding the contract method 0xdfc8fff6.
//
// Solidity: function mint(address u, uint256 m, uint256 underlyingAmount, uint256 principalTokenAmount, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceSession) Mint(u common.Address, m *big.Int, underlyingAmount *big.Int, principalTokenAmount *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.Mint(&_MarketPlace.TransactOpts, u, m, underlyingAmount, principalTokenAmount, minRatio, maxRatio)
}

// Mint is a paid mutator transaction binding the contract method 0xdfc8fff6.
//
// Solidity: function mint(address u, uint256 m, uint256 underlyingAmount, uint256 principalTokenAmount, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactorSession) Mint(u common.Address, m *big.Int, underlyingAmount *big.Int, principalTokenAmount *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.Mint(&_MarketPlace.TransactOpts, u, m, underlyingAmount, principalTokenAmount, minRatio, maxRatio)
}

// MintWithUnderlying is a paid mutator transaction binding the contract method 0x23f86bef.
//
// Solidity: function mintWithUnderlying(address u, uint256 m, uint256 a, uint256 ptBought, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactor) MintWithUnderlying(opts *bind.TransactOpts, u common.Address, m *big.Int, a *big.Int, ptBought *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "mintWithUnderlying", u, m, a, ptBought, minRatio, maxRatio)
}

// MintWithUnderlying is a paid mutator transaction binding the contract method 0x23f86bef.
//
// Solidity: function mintWithUnderlying(address u, uint256 m, uint256 a, uint256 ptBought, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceSession) MintWithUnderlying(u common.Address, m *big.Int, a *big.Int, ptBought *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintWithUnderlying(&_MarketPlace.TransactOpts, u, m, a, ptBought, minRatio, maxRatio)
}

// MintWithUnderlying is a paid mutator transaction binding the contract method 0x23f86bef.
//
// Solidity: function mintWithUnderlying(address u, uint256 m, uint256 a, uint256 ptBought, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactorSession) MintWithUnderlying(u common.Address, m *big.Int, a *big.Int, ptBought *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintWithUnderlying(&_MarketPlace.TransactOpts, u, m, a, ptBought, minRatio, maxRatio)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) Pause(opts *bind.TransactOpts, p uint8, s bool) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "pause", p, s)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool s) returns(bool)
func (_MarketPlace *MarketPlaceSession) Pause(p uint8, s bool) (*types.Transaction, error) {
	return _MarketPlace.Contract.Pause(&_MarketPlace.TransactOpts, p, s)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) Pause(p uint8, s bool) (*types.Transaction, error) {
	return _MarketPlace.Contract.Pause(&_MarketPlace.TransactOpts, p, s)
}

// SellPrincipalToken is a paid mutator transaction binding the contract method 0x34503b1a.
//
// Solidity: function sellPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactor) SellPrincipalToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "sellPrincipalToken", p, u, m, a)
}

// SellPrincipalToken is a paid mutator transaction binding the contract method 0x34503b1a.
//
// Solidity: function sellPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceSession) SellPrincipalToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.SellPrincipalToken(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SellPrincipalToken is a paid mutator transaction binding the contract method 0x34503b1a.
//
// Solidity: function sellPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactorSession) SellPrincipalToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.SellPrincipalToken(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SellUnderlying is a paid mutator transaction binding the contract method 0xc9ac53b1.
//
// Solidity: function sellUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactor) SellUnderlying(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "sellUnderlying", p, u, m, a)
}

// SellUnderlying is a paid mutator transaction binding the contract method 0xc9ac53b1.
//
// Solidity: function sellUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceSession) SellUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.SellUnderlying(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SellUnderlying is a paid mutator transaction binding the contract method 0xc9ac53b1.
//
// Solidity: function sellUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactorSession) SellUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.SellUnderlying(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SetPool is a paid mutator transaction binding the contract method 0x6d605fcf.
//
// Solidity: function setPool(address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) SetPool(opts *bind.TransactOpts, u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "setPool", u, m, a)
}

// SetPool is a paid mutator transaction binding the contract method 0x6d605fcf.
//
// Solidity: function setPool(address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceSession) SetPool(u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetPool(&_MarketPlace.TransactOpts, u, m, a)
}

// SetPool is a paid mutator transaction binding the contract method 0x6d605fcf.
//
// Solidity: function setPool(address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) SetPool(u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetPool(&_MarketPlace.TransactOpts, u, m, a)
}

// SetPrincipal is a paid mutator transaction binding the contract method 0x66eb4bf8.
//
// Solidity: function setPrincipal(uint8 p, address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) SetPrincipal(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "setPrincipal", p, u, m, a)
}

// SetPrincipal is a paid mutator transaction binding the contract method 0x66eb4bf8.
//
// Solidity: function setPrincipal(uint8 p, address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceSession) SetPrincipal(p uint8, u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetPrincipal(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SetPrincipal is a paid mutator transaction binding the contract method 0x66eb4bf8.
//
// Solidity: function setPrincipal(uint8 p, address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) SetPrincipal(p uint8, u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetPrincipal(&_MarketPlace.TransactOpts, p, u, m, a)
}

// MarketPlaceCreateMarketIterator is returned from FilterCreateMarket and is used to iterate over the raw logs and unpacked data for CreateMarket events raised by the MarketPlace contract.
type MarketPlaceCreateMarketIterator struct {
	Event *MarketPlaceCreateMarket // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCreateMarketIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCreateMarket)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCreateMarket)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCreateMarketIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCreateMarketIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCreateMarket represents a CreateMarket event raised by the MarketPlace contract.
type MarketPlaceCreateMarket struct {
	Underlying common.Address
	Maturity   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCreateMarket is a free log retrieval operation binding the contract event 0x0ce205d5fda43f489af3d143ec11073757d0079e07852a6c1799f1e29e72e1ee.
//
// Solidity: event CreateMarket(address indexed underlying, uint256 indexed maturity)
func (_MarketPlace *MarketPlaceFilterer) FilterCreateMarket(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCreateMarketIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CreateMarket", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCreateMarketIterator{contract: _MarketPlace.contract, event: "CreateMarket", logs: logs, sub: sub}, nil
}

// WatchCreateMarket is a free log subscription operation binding the contract event 0x0ce205d5fda43f489af3d143ec11073757d0079e07852a6c1799f1e29e72e1ee.
//
// Solidity: event CreateMarket(address indexed underlying, uint256 indexed maturity)
func (_MarketPlace *MarketPlaceFilterer) WatchCreateMarket(opts *bind.WatchOpts, sink chan<- *MarketPlaceCreateMarket, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CreateMarket", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCreateMarket)
				if err := _MarketPlace.contract.UnpackLog(event, "CreateMarket", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateMarket is a log parse operation binding the contract event 0x0ce205d5fda43f489af3d143ec11073757d0079e07852a6c1799f1e29e72e1ee.
//
// Solidity: event CreateMarket(address indexed underlying, uint256 indexed maturity)
func (_MarketPlace *MarketPlaceFilterer) ParseCreateMarket(log types.Log) (*MarketPlaceCreateMarket, error) {
	event := new(MarketPlaceCreateMarket)
	if err := _MarketPlace.contract.UnpackLog(event, "CreateMarket", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
