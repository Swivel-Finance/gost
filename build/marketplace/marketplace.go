// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package marketplace

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketPlaceMetaData contains all meta data concerning the MarketPlace contract.
var MarketPlaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Exception\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultTracker\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodialExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodialInitiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matured\",\"type\":\"uint256\"}],\"name\":\"Mature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2pVaultExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2pZcTokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RedeemVaultInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemZcToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferVaultNotional\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"burnZcTokenRemovingNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"cTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"custodialExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"custodialInitiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultTracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturityRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"matureMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"mintZcTokenAddingNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"p2pVaultExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"p2pZcTokenExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"redeemVaultInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"redeemZcToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"}],\"name\":\"setSwivel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swivel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"transferVaultNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"transferVaultNotionalFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600280546001600160a01b03191633179055615fd1806100326000396000f3fe60806040523480156200001157600080fd5b5060043610620001895760003560e01c80637dcad27811620000dd578063c06760c7116200008b578063f851a440116200006e578063f851a440146200043b578063fcbaab2e146200044f578063fe3ee169146200046657600080fd5b8063c06760c7146200040d578063db850901146200042457600080fd5b806387e157c111620000c057806387e157c114620003c85780639f6eddc414620003df578063b79eb92614620003f657600080fd5b80637dcad278146200039a578063872e9f6c14620003b157600080fd5b8063305a21bf116200013b5780633a660bd8116200011e5780633a660bd814620003375780635ac86ab7146200035d578063704b6c02146200038357600080fd5b8063305a21bf146200022c57806335bdafab14620002ba57600080fd5b80630f0016b611620001705780630f0016b614620001e757806315042ddf14620001fe578063174d2548146200021557600080fd5b8063012b264a146200018e57806301cc644814620001bf575b600080fd5b600354620001a2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620001d6620001d0366004620029b3565b6200047d565b6040519015158152602001620001b6565b620001d6620001f836600462002a15565b6200071b565b620001d66200020f36600462002a15565b62000a0b565b620001d66200022636600462002b39565b62000c1d565b620002846200023d36600462002bd7565b6000602081815293815260408082208552928152828120909352825290208054600182015460028301546003909301546001600160a01b0392831693918316929091169084565b604051620001b694939291906001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b620001a2620002cb36600462002bd7565b60ff929092166000908152602081815260408083206001600160a01b039485168452825280832094835293815290839020835160808101855281548416808252600183015485169382019390935260028201549093169383019390935260039092015460609091015290565b6200034e6200034836600462002c1d565b62001050565b604051908152602001620001b6565b620001d66200036e36600462002c77565b60016020526000908152604090205460ff1681565b620001d66200039436600462002c9e565b62001204565b620001d6620003ab366004620029b3565b6200129a565b620001d6620003c236600462002bd7565b62001451565b620001d6620003d9366004620029b3565b620016b7565b6200034e620003f0366004620029b3565b62001940565b620001d66200040736600462002c9e565b62001bda565b620001d66200041e36600462002a15565b62001cca565b620001d662000435366004620029b3565b62001fa7565b600254620001a2906001600160a01b031681565b620001d66200046036600462002a15565b620020c6565b620001d66200047736600462002ccd565b6200238a565b6003546000906001600160a01b0316338114620004d857604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a4015b60405180910390fd5b60ff808816600090815260016020526040902054889116156200052e57604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff88166000908152602081815260408083206001600160a01b038b811685529083528184208a85528352928190208151608081018352815485168152600182015485169381018490526002820154851681840152600390910154606082015290516340c10f1960e01b8152928816600484015260248301879052916340c10f19906044016020604051808303816000875af1158015620005d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f9919062002d0b565b6200063757604051636d4c6c8960e01b8152601c60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60408082015190517fa01cfffb0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018890529091169063a01cfffb906044016020604051808303816000875af1158015620006a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006cc919062002d0b565b6200070a57604051636d4c6c8960e01b8152601960048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60019350505b505095945050505050565b6003546000906001600160a01b03163381146200077257604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff80891660009081526001602052604090205489911615620007c857604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff89166000908152602081815260408083206001600160a01b038c811685529083528184208b8552835292819020815160808101835281548516815260018201548516938101849052600282015485168184015260039091015460608201529051632770a7eb60e21b815292891660048401526024830187905291639dc29fac906044016020604051808303816000875af11580156200086d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000893919062002d0b565b620008d157604051636d4c6c8960e01b8152601d60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60408082015190517f613a28d10000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018890529091169063613a28d1906044016020604051808303816000875af115801562000940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000966919062002d0b565b620009a457604051636d4c6c8960e01b8152601a60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b604080516001600160a01b038981168252888116602083015291810187905289918b169060ff8d16907f34fa475e6431f76e8146368a631a5a0ef8ee78b77d3359d0f8e50de4d7a4ff8b906060015b60405180910390a45060019998505050505050505050565b6003546000906001600160a01b031633811462000a6257604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff8089166000908152600160205260409020548991161562000ab857604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff89166000908152602081815260408083206001600160a01b038c811685529083528184208b8552909252918290206002015491517f1779467300000000000000000000000000000000000000000000000000000000815288821660048201528782166024820152604481018790529116906317794673906064016020604051808303816000875af115801562000b54573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b7a919062002d0b565b62000bb857604051636d4c6c8960e01b8152601b60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b604080516001600160a01b038881168252878116602083015291810186905288918a169060ff8c16907f4a50decadd365d7ca023f61a307490ce8e696b1b81e112ae6f743b3366d13b6c9060600160405180910390a450600198975050505050505050565b6002546000906001600160a01b031633811462000c7457604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff8088166000908152600160205260409020548891161562000cca57604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b6003546001600160a01b031662000d1457604051636d4c6c8960e01b8152601560048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b600062000d2289886200242b565b60ff8a166000908152602081815260408083206001600160a01b0380861685529083528184208d855290925290912060020154919250161562000d9857604051636d4c6c8960e01b8152601660048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b6000806000836001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af115801562000dde573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e04919062002d2b565b9050838b8a8a8460405162000e19906200296e565b62000e2995949392919062002d9b565b604051809103906000f08015801562000e46573d6000803e3d6000fd5b5092508b8b8b600360009054906101000a90046001600160a01b031660405162000e70906200297c565b60ff909416845260208401929092526001600160a01b039081166040840152166060820152608001604051809103906000f08015801562000eb5573d6000803e3d6000fd5b5091505060405180608001604052808a6001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b0316815260200160008152506000808d60ff1660ff1681526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015590505089836001600160a01b03168c60ff167f39fc19388929259a60a8806c6aecb45c336e28e3295fa6fed5813474e6d2b7e88c868660405162001037939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60405180910390a45060019a9950505050505050505050565b6003546000906001600160a01b0316338114620010a757604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff80871660009081526001602052604090205487911615620010fd57604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff87166000908152602081815260408083206001600160a01b038a811685529083528184208985529092528083206002015490517f19caf46c00000000000000000000000000000000000000000000000000000000815287831660048201529116906319caf46c906024016020604051808303816000875af115801562001189573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011af919062002def565b6040516001600160a01b038781168252919250879189169060ff8b16907f602f2da12d1008cffacf50314af0e5f78e8759bba815d4221b390e0b9e73639a9060200160405180910390a4979650505050505050565b6002546000906001600160a01b03163381146200125b57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b600280546001600160a01b0385167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001915050919050565b60ff808616600090815260016020526040812054909187911615620012f257604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff87166000908152602081815260408083206001600160a01b038a81168552908352818420898552909252918290206002015491517f177946730000000000000000000000000000000000000000000000000000000081523360048201528682166024820152604481018690529116906317794673906064016020604051808303816000875af11580156200138c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013b2919062002d0b565b620013f057604051636d4c6c8960e01b8152601b60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b604080513381526001600160a01b038681166020830152918101859052869188169060ff8a16907fe401e2d61a180e97aba5ebeb66d643bbc7e6516b91281ff0e480dac7e206c88f9060600160405180910390a45060019695505050505050565b60ff808416600090815260016020526040812054909185911615620014a957604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff85166000908152602081815260408083206001600160a01b03808916855290835281842087855283529281902081516080810183528154851681526001820154851693810193909352600281015490931690820152600390910154606082018190521562001552576060810151604051636d4c6c8960e01b815260176004820152602481019190915260006044820181905260648201819052608482015260a401620004cf565b834210156200159357604051636d4c6c8960e01b81526018600482015242602482015260448101859052600060648201819052608482015260a401620004cf565b6000620015a5878360000151620025d0565b60ff88166000908152602081815260408083206001600160a01b038b811685529083528184208a8552909252918290206003018390558482015191517f64ae3c9d0000000000000000000000000000000000000000000000000000000081526004810184905292935016906364ae3c9d906024016020604051808303816000875af115801562001639573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200165f919062002d0b565b506040805182815242602082015286916001600160a01b0389169160ff8b16917fa43c0392e4bc23fcadd5a4c4d6d69a1148b6bcec3ac53d7654921bcc33f5addf910160405180910390a45060019695505050505050565b6003546000906001600160a01b03163381146200170e57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff808816600090815260016020526040902054889116156200176457604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff88166000908152602081815260408083206001600160a01b038b811685529083528184208a8552835292819020815160808101835281548516815260018201548516938101849052600282015485168184015260039091015460608201529051632770a7eb60e21b815292881660048401526024830187905291639dc29fac906044016020604051808303816000875af115801562001809573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200182f919062002d0b565b6200186d57604051636d4c6c8960e01b8152601d60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60408082015190517f613a28d10000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018890529091169063613a28d1906044016020604051808303816000875af1158015620018dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001902919062002d0b565b6200070a57604051636d4c6c8960e01b8152601a60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b6003546000906001600160a01b03163381146200199757604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff80881660009081526001602052604090205488911615620019ed57604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff88166000908152602081815260408083206001600160a01b03808c1685529083528184208a8552835281842082516080810184528154831681526001820154831694810194909452600281015490911691830191909152600301546060820181905290910362001aa45762001a6689898962001451565b62001aa457604051636d4c6c8960e01b8152601e60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b6020810151604051632770a7eb60e21b81526001600160a01b0388811660048301526024820188905290911690639dc29fac906044016020604051808303816000875af115801562001afa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b20919062002d0b565b62001b5e57604051636d4c6c8960e01b8152601d60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b604080516001600160a01b038881168252602082018890528992908b169160ff8d16917f1d3b3ead9f6b17c584914d99c0019883ab43e6e354df48d46185e166f43c68b4910160405180910390a4806060015160000362001bc3578493505062000710565b62001bd189898988620028ce565b93505062000710565b6002546000906001600160a01b031633811462001c3157604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b6003546001600160a01b03161562001c8b57600354604051636d4c6c8960e01b815260146004820152600060248201819052604482018190526001600160a01b039092166064820152608481019190915260a401620004cf565b600380546001600160a01b0385167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001915050919050565b6003546000906001600160a01b031633811462001d2157604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff8089166000908152600160205260409020548991161562001d7757604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff89166000908152602081815260408083206001600160a01b038c811685529083528184208b85528352928190208151608081018352815485168152600182015485169381018490526002820154851681840152600390910154606082015290516340c10f1960e01b8152928916600484015260248301879052916340c10f19906044016020604051808303816000875af115801562001e1c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e42919062002d0b565b62001e8057604051636d4c6c8960e01b8152601c60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60408082015190517fa01cfffb0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152602482018890529091169063a01cfffb906044016020604051808303816000875af115801562001eef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f15919062002d0b565b62001f5357604051636d4c6c8960e01b8152601960048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b604080516001600160a01b038981168252888116602083015291810187905289918b169060ff8d16907f4ccb07dd34f02abf1c514fa611ba589e66ca2f7bcdb3c0cb3b65852354da439890606001620009f3565b6003546000906001600160a01b031633811462001ffe57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff87166000908152602081815260408083206001600160a01b038a81168552908352818420898552909252918290206002015491517fb326258d00000000000000000000000000000000000000000000000000000000815286821660048201526024810186905291169063b326258d906044016020604051808303816000875af115801562002092573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020b8919062002d0b565b506001979650505050505050565b6003546000906001600160a01b03163381146200211d57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff808916600090815260016020526040902054899116156200217357604051636d4c6c8960e01b8152600160048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60ff89166000908152602081815260408083206001600160a01b038c811685529083528184208b8552835292819020815160808101835281548516815260018201548516938101849052600282015485168184015260039091015460608201529051632770a7eb60e21b815292891660048401526024830187905291639dc29fac906044016020604051808303816000875af115801562002218573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200223e919062002d0b565b6200227c57604051636d4c6c8960e01b8152601d60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b60208101516040516340c10f1960e01b81526001600160a01b03888116600483015260248201889052909116906340c10f19906044016020604051808303816000875af1158015620022d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022f8919062002d0b565b6200233657604051636d4c6c8960e01b8152601c60048201526000602482018190526044820181905260648201819052608482015260a401620004cf565b604080516001600160a01b038981168252888116602083015291810187905289918b169060ff8d16907f0c5d0fa58187faeb475ea625004aed68162ededc2acf69844eed15a090a02b3290606001620009f3565b6002546000906001600160a01b0316338114620023e157604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401620004cf565b60ff8416600090815260016020819052604090912080548515157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911617905591505092915050565b600060001960ff841601620024a757816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002479573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200249f919062002e09565b9050620025ca565b60021960ff841601620024f357816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002479573d6000803e3d6000fd5b60031960ff8416016200253f57816001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002479573d6000803e3d6000fd5b60041960ff8416016200258b57816001600160a01b0316637158da7c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002479573d6000803e3d6000fd5b816001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002479573d6000803e3d6000fd5b92915050565b600060001960ff8416016200264457816001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200261e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200249f919062002def565b60021960ff8416016200269057816001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200261e573d6000803e3d6000fd5b60031960ff84160162002806576000829050806001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa158015620026e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002707919062002e09565b6001600160a01b031663d15e0053826001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200277a919062002e09565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015620027d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027fd919062002def565b915050620025ca565b60041960ff8416016200287d576040517f010ad6d10000000000000000000000000000000000000000000000000000000081526a52b7d2dcc80cd2e400000060048201526001600160a01b0383169063010ad6d1906024015b602060405180830381865afa1580156200261e573d6000803e3d6000fd5b6040517f07a2d13a0000000000000000000000000000000000000000000000000000000081526a52b7d2dcc80cd2e400000060048201526001600160a01b038316906307a2d13a906024016200285f565b60ff84166000908152602081815260408083206001600160a01b03808816855290835281842086855283528184208251608081018452815483168082526001830154841695820195909552600282015490921692820192909252600390910154606082015290829062002943908890620025d0565b606083015190915062002957828662002e29565b62002963919062002e57565b979650505050505050565b6116058062002e7b83390190565b611b1c806200448083390190565b60ff811681146200299a57600080fd5b50565b6001600160a01b03811681146200299a57600080fd5b600080600080600060a08688031215620029cc57600080fd5b8535620029d9816200298a565b94506020860135620029eb816200299d565b935060408601359250606086013562002a04816200299d565b949793965091946080013592915050565b60008060008060008060c0878903121562002a2f57600080fd5b863562002a3c816200298a565b9550602087013562002a4e816200299d565b945060408701359350606087013562002a67816200299d565b9250608087013562002a79816200299d565b8092505060a087013590509295509295509295565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262002ab657600080fd5b813567ffffffffffffffff8082111562002ad45762002ad462002a8e565b604051601f8301601f19908116603f0116810190828211818310171562002aff5762002aff62002a8e565b8160405283815286602085880101111562002b1957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a0868803121562002b5257600080fd5b853562002b5f816200298a565b945060208601359350604086013562002b78816200299d565b9250606086013567ffffffffffffffff8082111562002b9657600080fd5b62002ba489838a0162002aa4565b9350608088013591508082111562002bbb57600080fd5b5062002bca8882890162002aa4565b9150509295509295909350565b60008060006060848603121562002bed57600080fd5b833562002bfa816200298a565b9250602084013562002c0c816200299d565b929592945050506040919091013590565b6000806000806080858703121562002c3457600080fd5b843562002c41816200298a565b9350602085013562002c53816200299d565b925060408501359150606085013562002c6c816200299d565b939692955090935050565b60006020828403121562002c8a57600080fd5b813562002c97816200298a565b9392505050565b60006020828403121562002cb157600080fd5b813562002c97816200299d565b80151581146200299a57600080fd5b6000806040838503121562002ce157600080fd5b823562002cee816200298a565b9150602083013562002d008162002cbe565b809150509250929050565b60006020828403121562002d1e57600080fd5b815162002c978162002cbe565b60006020828403121562002d3e57600080fd5b815162002c97816200298a565b6000815180845260005b8181101562002d735760208185018101518683018201520162002d55565b8181111562002d86576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038616815284602082015260a06040820152600062002dc560a083018662002d4b565b828103606084015262002dd9818662002d4b565b91505060ff831660808301529695505050505050565b60006020828403121562002e0257600080fd5b5051919050565b60006020828403121562002e1c57600080fd5b815162002c97816200299d565b600081600019048311821515161562002e5257634e487b7160e01b600052601160045260246000fd5b500290565b60008262002e7557634e487b7160e01b600052601260045260246000fd5b50049056fe6101006040523480156200001257600080fd5b5060405162001605380380620016058339810160408190526200003591620002a9565b82828282828282600490805190602001906200005392919062000136565b5081516200006990600590602085019062000136565b5080600260006101000a81548160ff021916908360ff160217905550505050620000ba83604051806040016040528060018152602001603160f81b8152504630620000df60201b620009531760201c565b60805250503360a052505050506001600160a01b039190911660c05260e05262000395565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b828054620001449062000359565b90600052602060002090601f016020900481019282620001685760008555620001b3565b82601f106200018357805160ff1916838001178555620001b3565b82800160010185558215620001b3579182015b82811115620001b357825182559160200191906001019062000196565b50620001c1929150620001c5565b5090565b5b80821115620001c15760008155600101620001c6565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200020457600080fd5b81516001600160401b0380821115620002215762000221620001dc565b604051601f8301601f19908116603f011681019082821181831017156200024c576200024c620001dc565b816040528381526020925086838588010111156200026957600080fd5b600091505b838210156200028d57858201830151818301840152908201906200026e565b838211156200029f5760008385830101525b9695505050505050565b600080600080600060a08688031215620002c257600080fd5b85516001600160a01b0381168114620002da57600080fd5b6020870151604088015191965094506001600160401b0380821115620002ff57600080fd5b6200030d89838a01620001f2565b945060608801519150808211156200032457600080fd5b506200033388828901620001f2565b925050608086015160ff811681146200034b57600080fd5b809150509295509295909350565b600181811c908216806200036e57607f821691505b6020821081036200038f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051611221620003e460003960006101b3015260006102320152600081816103700152818161053c01526105d80152600081816102fb015261082d01526112216000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806370a08231116100cd578063a9059cbb11610081578063d505accf11610066578063d505accf1461031d578063dd62ed3e14610332578063f851a4401461036b57600080fd5b8063a9059cbb146102e3578063c2fb26a6146102f657600080fd5b806395d89b41116100b257806395d89b41146102b55780639dc29fac146102bd578063a457c2d7146102d057600080fd5b806370a082311461026c5780637ecebe001461029557600080fd5b806323b872dd116101245780633950935111610109578063395093511461020757806340c10f191461021a5780636f307dc31461022d57600080fd5b806323b872dd146101d5578063313ce567146101e857600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd14610197578063204f83f9146101ae575b600080fd5b61015e610392565b60405161016b9190610f63565b60405180910390f35b610187610182366004610fd4565b610420565b604051901515815260200161016b565b6101a060035481565b60405190815260200161016b565b6101a07f000000000000000000000000000000000000000000000000000000000000000081565b6101876101e3366004610ffe565b610436565b6002546101f59060ff1681565b60405160ff909116815260200161016b565b610187610215366004610fd4565b610501565b610187610228366004610fd4565b610538565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016b565b6101a061027a36600461103a565b6001600160a01b031660009081526020819052604090205490565b6101a06102a336600461103a565b60066020526000908152604090205481565b61015e6105c7565b6101876102cb366004610fd4565b6105d4565b6101876102de366004610fd4565b610659565b6101876102f1366004610fd4565b610701565b6101a07f000000000000000000000000000000000000000000000000000000000000000081565b61033061032b36600461105c565b61070e565b005b6101a06103403660046110cf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102547f000000000000000000000000000000000000000000000000000000000000000081565b6004805461039f90611102565b80601f01602080910402602001604051908101604052809291908181526020018280546103cb90611102565b80156104185780601f106103ed57610100808354040283529160200191610418565b820191906000526020600020905b8154815290600101906020018083116103fb57829003601f168201915b505050505081565b600061042d3384846109aa565b50600192915050565b6000610443848484610b04565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104e25760405162461bcd60e51b815260206004820152602760248201527f6572633230207472616e7366657220616d6f756e74206578636565647320616c60448201527f6c6f77616e63650000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6104f685336104f18685611184565b6109aa565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161042d9185906104f190869061119b565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146105b35760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e00000000000000000000000060448201526064016104d9565b6105bd8484610d24565b5060019392505050565b6005805461039f90611102565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461064f5760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e00000000000000000000000060448201526064016104d9565b6105bd8484610e03565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156106f25760405162461bcd60e51b8152602060048201526024808201527f65726332302064656372656173656420616c6c6f77616e63652062656c6f772060448201527f7a65726f0000000000000000000000000000000000000000000000000000000060648201526084016104d9565b6105bd33856104f18685611184565b600061042d338484610b04565b4284101561075e5760405162461bcd60e51b815260206004820152601860248201527f65726332363132206578706972656420646561646c696e65000000000000000060448201526064016104d9565b6001600160a01b03871660009081526006602052604081208054610805918a918a918a91908661078d836111b3565b90915550604080517f80772249b4aef1688b30651778f4249b05cb73b517d98482439b9d8999b306026020808301919091526001600160a01b0396871682840152949095166060860152608085019290925260a084015260c08084018a90528151808503909101815260e09093019052815191012090565b6040517f190100000000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600282015260228101829052604290209091506000906040805160008082526020820180845284905260ff89169282019290925260608101879052608081018690529192509060019060a0016020604051602081039080840390855afa1580156108ba573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906108f05750896001600160a01b0316816001600160a01b0316145b61093c5760405162461bcd60e51b815260206004820152601960248201527f6572633236313220696e76616c6964207369676e61747572650000000000000060448201526064016104d9565b6109478a8a8a6109aa565b50505050505050505050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b6001600160a01b038316610a265760405162461bcd60e51b815260206004820152602360248201527f657263323020617070726f76652066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016104d9565b6001600160a01b038216610aa25760405162461bcd60e51b815260206004820152602160248201527f657263323020617070726f766520746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016104d9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610b7f5760405162461bcd60e51b8152602060048201526024808201527f6572633230207472616e736665722066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104d9565b6001600160a01b038216610bfb5760405162461bcd60e51b815260206004820152602260248201527f6572633230207472616e7366657220746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016104d9565b6001600160a01b03831660009081526020819052604090205481811015610c8a5760405162461bcd60e51b815260206004820152602560248201527f6572633230207472616e7366657220616d6f756e74206578636565647320626160448201527f6c616e636500000000000000000000000000000000000000000000000000000060648201526084016104d9565b610c948282611184565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290610cca90849061119b565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d1691815260200190565b60405180910390a350505050565b6001600160a01b038216610d7a5760405162461bcd60e51b815260206004820152601e60248201527f6572633230206d696e7420746f20746865207a65726f2061646472657373000060448201526064016104d9565b8060036000828254610d8c919061119b565b90915550506001600160a01b03821660009081526020819052604081208054839290610db990849061119b565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610e595760405162461bcd60e51b815260206004820181905260248201527f6572633230206275726e2066726f6d20746865207a65726f206164647265737360448201526064016104d9565b6001600160a01b03821660009081526020819052604090205481811015610ee85760405162461bcd60e51b815260206004820152602160248201527f6572633230206275726e20616d6f756e7420657863656564732062616c616e6360448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016104d9565b610ef28282611184565b6001600160a01b03841660009081526020819052604081209190915560038054849290610f20908490611184565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610af7565b600060208083528351808285015260005b81811015610f9057858101830151858201604001528201610f74565b81811115610fa2576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610fcf57600080fd5b919050565b60008060408385031215610fe757600080fd5b610ff083610fb8565b946020939093013593505050565b60008060006060848603121561101357600080fd5b61101c84610fb8565b925061102a60208501610fb8565b9150604084013590509250925092565b60006020828403121561104c57600080fd5b61105582610fb8565b9392505050565b600080600080600080600060e0888a03121561107757600080fd5b61108088610fb8565b965061108e60208901610fb8565b95506040880135945060608801359350608088013560ff811681146110b257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156110e257600080fd5b6110eb83610fb8565b91506110f960208401610fb8565b90509250929050565b600181811c9082168061111657607f821691505b60208210810361114f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561119657611196611155565b500390565b600082198211156111ae576111ae611155565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111e4576111e4611155565b506001019056fea2646970667358221220d679b5fe4371c87189bd63f5b3cf6be1e8603d4de1af4daa1769de315b801a7064736f6c634300080d00336101206040523480156200001257600080fd5b5060405162001b1c38038062001b1c8339810160408190526200003591620003aa565b3360805260ff84166101005260e08390526001600160a01b0382811660a052811660c05260408051606081018252600080825260208281019190915290918201906200008e9087908690620010de620000cb821b17901c565b90526001600160a01b0390911660009081526020818152604091829020835181559083015160018201559101516002909101555062000445915050565b600060001960ff8416016200014757816001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000119573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013f919062000406565b905062000387565b60021960ff8416016200019357816001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000119573d6000803e3d6000fd5b60031960ff841601620002f1576000829050806001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020a919062000420565b6001600160a01b031663d15e0053826001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000257573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027d919062000420565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015620002c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e8919062000406565b91505062000387565b60041960ff8416016200034f5760405163010ad6d160e01b81526a52b7d2dcc80cd2e400000060048201526001600160a01b0383169063010ad6d1906024015b602060405180830381865afa15801562000119573d6000803e3d6000fd5b6040516303d1689d60e11b81526a52b7d2dcc80cd2e400000060048201526001600160a01b038316906307a2d13a9060240162000331565b92915050565b80516001600160a01b0381168114620003a557600080fd5b919050565b60008060008060808587031215620003c157600080fd5b845160ff81168114620003d357600080fd5b60208601519094509250620003eb604086016200038d565b9150620003fb606086016200038d565b905092959194509250565b6000602082840312156200041957600080fd5b5051919050565b6000602082840312156200043357600080fd5b6200043e826200038d565b9392505050565b60805160a05160c05160e051610100516116156200050760003960008181610236015281816104ad015281816107db01528181610a1601528181610c6c0152610f310152600061018501526000818160f401528181610ec9015261106c0152600081816102df015281816104ce015281816107fc01528181610a3701528181610c8d0152610f520152600081816103060152818161032c0152818161072a0152818161091f01528181610b7b01528181610bf70152610e1e01526116156000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806364ae3c9d1161008c578063a622ee7c11610066578063a622ee7c1461027d578063b326258d146102c7578063b7dd3483146102da578063f851a4401461030157600080fd5b806364ae3c9d1461021e5780638ce7442614610231578063a01cfffb1461026a57600080fd5b806319caf46c116100c857806319caf46c1461016d578063204f83f914610180578063613a28d1146101a75780636392a51f146101ba57600080fd5b8063012b264a146100ef57806311554c4314610133578063177946731461014a575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013c60015481565b60405190815260200161012a565b61015d610158366004611447565b610328565b604051901515815260200161012a565b61013c61017b366004611488565b610726565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b61015d6101b53660046114ac565b61091b565b6102096101c8366004611488565b6001600160a01b0316600090815260208181526040918290208251606081018452815480825260018301549382018490526002909201549301929092529091565b6040805192835260208301919091520161012a565b61015d61022c3660046114d8565b610b77565b6102587f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161012a565b61015d6102783660046114ac565b610bf3565b6102ac61028b366004611488565b60006020819052908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161012a565b61015d6102d53660046114ac565b610e1a565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461039f57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a4015b60405180910390fd5b836001600160a01b0316856001600160a01b0316036103f957604051636d4c6c8960e01b81526020600482015260006024820181905260448201526001600160a01b0380871660648301528516608482015260a401610396565b6001600160a01b03808616600090815260208181526040808320815160608082018452825482526001808401548387015260029384015483860152968b168652858552948390208351958601845280548652958601549385019390935293909301549282019290925281518511156104a6578151604051636d4c6c8960e01b8152601f6004820152602481018790526044810191909152600060648201819052608482015260a401610396565b60006104f27f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006110de565b90506000806001541115610545576a52b7d2dcc80cd2e400000084604001516001546a52b7d2dcc80cd2e400000061052a9190611520565b610534919061153f565b61053e919061157a565b9050610578565b60408401516a52b7d2dcc80cd2e4000000906105618483611520565b61056b919061153f565b610575919061157a565b90505b83516000906a52b7d2dcc80cd2e4000000906105949084611520565b61059e919061153f565b905080856020018181516105b29190611591565b9052508451889086906105c690839061157a565b90525060408086018481526001600160a01b038c166000908152602081815292902087518155918701516001830155516002909101558351156106db5760015415610650576a52b7d2dcc80cd2e400000084604001516001546a52b7d2dcc80cd2e40000006106359190611520565b61063f919061153f565b610649919061157a565b9150610683565b60408401516a52b7d2dcc80cd2e40000009061066c8583611520565b610676919061153f565b610680919061157a565b91505b83516000906a52b7d2dcc80cd2e40000009061069f9085611520565b6106a9919061153f565b905080856020018181516106bd9190611591565b9052508451899086906106d1908390611591565b9052506106df9050565b8784525b505060408083019182526001600160a01b03881660009081526020818152919020835181559201516001808401919091559051600290920191909155925050509392505050565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461079857604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610396565b6001600160a01b038316600090815260208181526040808320815160608101835281548152600182015493810184905260029091015491810191909152916108207f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006110de565b90506000806001541115610873576a52b7d2dcc80cd2e400000084604001516001546a52b7d2dcc80cd2e40000006108589190611520565b610862919061153f565b61086c919061157a565b90506108a6565b60408401516a52b7d2dcc80cd2e40000009061088f8483611520565b610899919061153f565b6108a3919061157a565b90505b83516000906a52b7d2dcc80cd2e4000000906108c29084611520565b6108cc919061153f565b604080870185815260006020808a018281526001600160a01b038e16835290829052929020885181559151600183015551600290910155905061090f8185611591565b98975050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461098d57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610396565b6001600160a01b038416600090815260208181526040918290208251606081018452815480825260018301549382019390935260029091015492810192909252841115610a0f578051604051636d4c6c8960e01b8152601f6004820152602481018690526044810191909152600060648201819052608482015260a401610396565b6000610a5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006110de565b90506000806001541115610aae576a52b7d2dcc80cd2e400000083604001516001546a52b7d2dcc80cd2e4000000610a939190611520565b610a9d919061153f565b610aa7919061157a565b9050610ae1565b60408301516a52b7d2dcc80cd2e400000090610aca8483611520565b610ad4919061153f565b610ade919061157a565b90505b82516000906a52b7d2dcc80cd2e400000090610afd9084611520565b610b07919061153f565b90508084602001818151610b1b9190611591565b905250835187908590610b2f90839061157a565b905250505060408083019182526001600160a01b0387166000908152602081815291902083518155920151600180840191909155905160029092019190915591505092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610be957604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610396565b5050600190815590565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610c6557604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610396565b6000610cb17f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006110de565b6001600160a01b0386166000908152602081815260409182902082516060810184528154808252600183015493820193909352600290910154928101929092529192509015610dd65760015460009015610d4a576a52b7d2dcc80cd2e400000082604001516001546a52b7d2dcc80cd2e4000000610d2f9190611520565b610d39919061153f565b610d43919061157a565b9050610d7d565b60408201516a52b7d2dcc80cd2e400000090610d668583611520565b610d70919061153f565b610d7a919061157a565b90505b81516000906a52b7d2dcc80cd2e400000090610d999084611520565b610da3919061153f565b90508083602001818151610db79190611591565b905250825187908490610dcb908390611591565b905250610dda915050565b8481525b60408082019283526001600160a01b0387166000908152602081815291902082518155910151600180830191909155915160029091015591505092915050565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b03821614610e8c57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610396565b6001600160a01b038085166000908152602081815260408083208151606080820184528254825260018084015483870152600293840154838601527f000000000000000000000000000000000000000000000000000000000000000090971686528585529483902083519586018452805486529586015493850193909352939093015492820192909252815185908390610f2790839061157a565b9052506000610f767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006110de565b905060008183604001511461104b5760015415610fd2576a52b7d2dcc80cd2e400000083604001516001546a52b7d2dcc80cd2e4000000610fb79190611520565b610fc1919061153f565b610fcb919061157a565b9050611005565b60408301516a52b7d2dcc80cd2e400000090610fee8483611520565b610ff8919061153f565b611002919061157a565b90505b82516000906a52b7d2dcc80cd2e4000000906110219084611520565b61102b919061153f565b9050808460200181815161103f9190611591565b90525050604083018290525b868360000181815161105d9190611591565b90525050506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600090815260208181526040808320855181558286015160018083019190915595820151600291820155938a1683529182902085518155908501518185015593015192019190915591505092915050565b600060001960ff84160161115557816001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e91906115a9565b9050611429565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff8416016111bd57816001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112a573d6000803e3d6000fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff841601611346576000829050806001600160a01b0316637535d2466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e91906115c2565b6001600160a01b031663d15e0053826001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561129a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112be91906115c2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561131a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133e91906115a9565b915050611429565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60ff8416016113d9576040517f010ad6d10000000000000000000000000000000000000000000000000000000081526a52b7d2dcc80cd2e400000060048201526001600160a01b0383169063010ad6d1906024015b602060405180830381865afa15801561112a573d6000803e3d6000fd5b6040517f07a2d13a0000000000000000000000000000000000000000000000000000000081526a52b7d2dcc80cd2e400000060048201526001600160a01b038316906307a2d13a906024016113bc565b92915050565b6001600160a01b038116811461144457600080fd5b50565b60008060006060848603121561145c57600080fd5b83356114678161142f565b925060208401356114778161142f565b929592945050506040919091013590565b60006020828403121561149a57600080fd5b81356114a58161142f565b9392505050565b600080604083850312156114bf57600080fd5b82356114ca8161142f565b946020939093013593505050565b6000602082840312156114ea57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600081600019048311821515161561153a5761153a6114f1565b500290565b600082611575577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008282101561158c5761158c6114f1565b500390565b600082198211156115a4576115a46114f1565b500190565b6000602082840312156115bb57600080fd5b5051919050565b6000602082840312156115d457600080fd5b81516114a58161142f56fea26469706673582212204d60ba47136b948d3da1f9a1d548cf3e6ebd322bb4e5d29fb042b4dbb472787c64736f6c634300080d0033a2646970667358221220ac211532cb42d4e78f423d6d73337944af58d6b35c9553c7936f465217dbbd2564736f6c634300080d0033",
}

// MarketPlaceABI is the input ABI used to generate the binding from.
// Deprecated: Use MarketPlaceMetaData.ABI instead.
var MarketPlaceABI = MarketPlaceMetaData.ABI

// MarketPlaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MarketPlaceMetaData.Bin instead.
var MarketPlaceBin = MarketPlaceMetaData.Bin

// DeployMarketPlace deploys a new Ethereum contract, binding an instance of MarketPlace to it.
func DeployMarketPlace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MarketPlace, error) {
	parsed, err := MarketPlaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MarketPlaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// MarketPlace is an auto generated Go binding around an Ethereum contract.
type MarketPlace struct {
	MarketPlaceCaller     // Read-only binding to the contract
	MarketPlaceTransactor // Write-only binding to the contract
	MarketPlaceFilterer   // Log filterer for contract events
}

// MarketPlaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketPlaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketPlaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketPlaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketPlaceSession struct {
	Contract     *MarketPlace      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketPlaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketPlaceCallerSession struct {
	Contract *MarketPlaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MarketPlaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketPlaceTransactorSession struct {
	Contract     *MarketPlaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MarketPlaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketPlaceRaw struct {
	Contract *MarketPlace // Generic contract binding to access the raw methods on
}

// MarketPlaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketPlaceCallerRaw struct {
	Contract *MarketPlaceCaller // Generic read-only contract binding to access the raw methods on
}

// MarketPlaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketPlaceTransactorRaw struct {
	Contract *MarketPlaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarketPlace creates a new instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlace(address common.Address, backend bind.ContractBackend) (*MarketPlace, error) {
	contract, err := bindMarketPlace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// NewMarketPlaceCaller creates a new read-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceCaller(address common.Address, caller bind.ContractCaller) (*MarketPlaceCaller, error) {
	contract, err := bindMarketPlace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCaller{contract: contract}, nil
}

// NewMarketPlaceTransactor creates a new write-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketPlaceTransactor, error) {
	contract, err := bindMarketPlace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransactor{contract: contract}, nil
}

// NewMarketPlaceFilterer creates a new log filterer instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketPlaceFilterer, error) {
	contract, err := bindMarketPlace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceFilterer{contract: contract}, nil
}

// bindMarketPlace binds a generic wrapper to an already deployed contract.
func bindMarketPlace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.MarketPlaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// CTokenAddress is a free data retrieval call binding the contract method 0x35bdafab.
//
// Solidity: function cTokenAddress(uint8 p, address u, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceCaller) CTokenAddress(opts *bind.CallOpts, p uint8, u common.Address, m *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "cTokenAddress", p, u, m)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CTokenAddress is a free data retrieval call binding the contract method 0x35bdafab.
//
// Solidity: function cTokenAddress(uint8 p, address u, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceSession) CTokenAddress(p uint8, u common.Address, m *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.CTokenAddress(&_MarketPlace.CallOpts, p, u, m)
}

// CTokenAddress is a free data retrieval call binding the contract method 0x35bdafab.
//
// Solidity: function cTokenAddress(uint8 p, address u, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) CTokenAddress(p uint8, u common.Address, m *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.CTokenAddress(&_MarketPlace.CallOpts, p, u, m)
}

// Markets is a free data retrieval call binding the contract method 0x305a21bf.
//
// Solidity: function markets(uint8 , address , uint256 ) view returns(address cTokenAddr, address zcToken, address vaultTracker, uint256 maturityRate)
func (_MarketPlace *MarketPlaceCaller) Markets(opts *bind.CallOpts, arg0 uint8, arg1 common.Address, arg2 *big.Int) (struct {
	CTokenAddr   common.Address
	ZcToken      common.Address
	VaultTracker common.Address
	MaturityRate *big.Int
}, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "markets", arg0, arg1, arg2)

	outstruct := new(struct {
		CTokenAddr   common.Address
		ZcToken      common.Address
		VaultTracker common.Address
		MaturityRate *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CTokenAddr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.ZcToken = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.VaultTracker = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.MaturityRate = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Markets is a free data retrieval call binding the contract method 0x305a21bf.
//
// Solidity: function markets(uint8 , address , uint256 ) view returns(address cTokenAddr, address zcToken, address vaultTracker, uint256 maturityRate)
func (_MarketPlace *MarketPlaceSession) Markets(arg0 uint8, arg1 common.Address, arg2 *big.Int) (struct {
	CTokenAddr   common.Address
	ZcToken      common.Address
	VaultTracker common.Address
	MaturityRate *big.Int
}, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1, arg2)
}

// Markets is a free data retrieval call binding the contract method 0x305a21bf.
//
// Solidity: function markets(uint8 , address , uint256 ) view returns(address cTokenAddr, address zcToken, address vaultTracker, uint256 maturityRate)
func (_MarketPlace *MarketPlaceCallerSession) Markets(arg0 uint8, arg1 common.Address, arg2 *big.Int) (struct {
	CTokenAddr   common.Address
	ZcToken      common.Address
	VaultTracker common.Address
	MaturityRate *big.Int
}, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1, arg2)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 ) view returns(bool)
func (_MarketPlace *MarketPlaceCaller) Paused(opts *bind.CallOpts, arg0 uint8) (bool, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "paused", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 ) view returns(bool)
func (_MarketPlace *MarketPlaceSession) Paused(arg0 uint8) (bool, error) {
	return _MarketPlace.Contract.Paused(&_MarketPlace.CallOpts, arg0)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 ) view returns(bool)
func (_MarketPlace *MarketPlaceCallerSession) Paused(arg0 uint8) (bool, error) {
	return _MarketPlace.Contract.Paused(&_MarketPlace.CallOpts, arg0)
}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Swivel(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "swivel")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceSession) Swivel() (common.Address, error) {
	return _MarketPlace.Contract.Swivel(&_MarketPlace.CallOpts)
}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Swivel() (common.Address, error) {
	return _MarketPlace.Contract.Swivel(&_MarketPlace.CallOpts)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0x87e157c1.
//
// Solidity: function burnZcTokenRemovingNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) BurnZcTokenRemovingNotional(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "burnZcTokenRemovingNotional", p, u, m, t, a)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0x87e157c1.
//
// Solidity: function burnZcTokenRemovingNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) BurnZcTokenRemovingNotional(p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnZcTokenRemovingNotional(&_MarketPlace.TransactOpts, p, u, m, t, a)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0x87e157c1.
//
// Solidity: function burnZcTokenRemovingNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) BurnZcTokenRemovingNotional(p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnZcTokenRemovingNotional(&_MarketPlace.TransactOpts, p, u, m, t, a)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x174d2548.
//
// Solidity: function createMarket(uint8 p, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CreateMarket(opts *bind.TransactOpts, p uint8, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "createMarket", p, m, c, n, s)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x174d2548.
//
// Solidity: function createMarket(uint8 p, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceSession) CreateMarket(p uint8, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, p, m, c, n, s)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x174d2548.
//
// Solidity: function createMarket(uint8 p, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CreateMarket(p uint8, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, p, m, c, n, s)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x0f0016b6.
//
// Solidity: function custodialExit(uint8 p, address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CustodialExit(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "custodialExit", p, u, m, z, n, a)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x0f0016b6.
//
// Solidity: function custodialExit(uint8 p, address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) CustodialExit(p uint8, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialExit(&_MarketPlace.TransactOpts, p, u, m, z, n, a)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x0f0016b6.
//
// Solidity: function custodialExit(uint8 p, address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CustodialExit(p uint8, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialExit(&_MarketPlace.TransactOpts, p, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xc06760c7.
//
// Solidity: function custodialInitiate(uint8 p, address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CustodialInitiate(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "custodialInitiate", p, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xc06760c7.
//
// Solidity: function custodialInitiate(uint8 p, address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) CustodialInitiate(p uint8, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialInitiate(&_MarketPlace.TransactOpts, p, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xc06760c7.
//
// Solidity: function custodialInitiate(uint8 p, address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CustodialInitiate(p uint8, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialInitiate(&_MarketPlace.TransactOpts, p, u, m, z, n, a)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x872e9f6c.
//
// Solidity: function matureMarket(uint8 p, address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) MatureMarket(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "matureMarket", p, u, m)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x872e9f6c.
//
// Solidity: function matureMarket(uint8 p, address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceSession) MatureMarket(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MatureMarket(&_MarketPlace.TransactOpts, p, u, m)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x872e9f6c.
//
// Solidity: function matureMarket(uint8 p, address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) MatureMarket(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MatureMarket(&_MarketPlace.TransactOpts, p, u, m)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0x01cc6448.
//
// Solidity: function mintZcTokenAddingNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) MintZcTokenAddingNotional(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "mintZcTokenAddingNotional", p, u, m, t, a)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0x01cc6448.
//
// Solidity: function mintZcTokenAddingNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) MintZcTokenAddingNotional(p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintZcTokenAddingNotional(&_MarketPlace.TransactOpts, p, u, m, t, a)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0x01cc6448.
//
// Solidity: function mintZcTokenAddingNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) MintZcTokenAddingNotional(p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintZcTokenAddingNotional(&_MarketPlace.TransactOpts, p, u, m, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0x15042ddf.
//
// Solidity: function p2pVaultExchange(uint8 p, address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) P2pVaultExchange(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "p2pVaultExchange", p, u, m, f, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0x15042ddf.
//
// Solidity: function p2pVaultExchange(uint8 p, address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) P2pVaultExchange(p uint8, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pVaultExchange(&_MarketPlace.TransactOpts, p, u, m, f, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0x15042ddf.
//
// Solidity: function p2pVaultExchange(uint8 p, address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) P2pVaultExchange(p uint8, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pVaultExchange(&_MarketPlace.TransactOpts, p, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0xfcbaab2e.
//
// Solidity: function p2pZcTokenExchange(uint8 p, address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) P2pZcTokenExchange(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "p2pZcTokenExchange", p, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0xfcbaab2e.
//
// Solidity: function p2pZcTokenExchange(uint8 p, address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) P2pZcTokenExchange(p uint8, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pZcTokenExchange(&_MarketPlace.TransactOpts, p, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0xfcbaab2e.
//
// Solidity: function p2pZcTokenExchange(uint8 p, address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) P2pZcTokenExchange(p uint8, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pZcTokenExchange(&_MarketPlace.TransactOpts, p, u, m, f, t, a)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool b) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) Pause(opts *bind.TransactOpts, p uint8, b bool) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "pause", p, b)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool b) returns(bool)
func (_MarketPlace *MarketPlaceSession) Pause(p uint8, b bool) (*types.Transaction, error) {
	return _MarketPlace.Contract.Pause(&_MarketPlace.TransactOpts, p, b)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool b) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) Pause(p uint8, b bool) (*types.Transaction, error) {
	return _MarketPlace.Contract.Pause(&_MarketPlace.TransactOpts, p, b)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x3a660bd8.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m, address t) returns(uint256)
func (_MarketPlace *MarketPlaceTransactor) RedeemVaultInterest(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, t common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "redeemVaultInterest", p, u, m, t)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x3a660bd8.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m, address t) returns(uint256)
func (_MarketPlace *MarketPlaceSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int, t common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemVaultInterest(&_MarketPlace.TransactOpts, p, u, m, t)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x3a660bd8.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m, address t) returns(uint256)
func (_MarketPlace *MarketPlaceTransactorSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int, t common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemVaultInterest(&_MarketPlace.TransactOpts, p, u, m, t)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x9f6eddc4.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, address t, uint256 a) returns(uint256)
func (_MarketPlace *MarketPlaceTransactor) RedeemZcToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "redeemZcToken", p, u, m, t, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x9f6eddc4.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, address t, uint256 a) returns(uint256)
func (_MarketPlace *MarketPlaceSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemZcToken(&_MarketPlace.TransactOpts, p, u, m, t, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x9f6eddc4.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, address t, uint256 a) returns(uint256)
func (_MarketPlace *MarketPlaceTransactorSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemZcToken(&_MarketPlace.TransactOpts, p, u, m, t, a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) SetAdmin(opts *bind.TransactOpts, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "setAdmin", a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_MarketPlace *MarketPlaceSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetAdmin(&_MarketPlace.TransactOpts, a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetAdmin(&_MarketPlace.TransactOpts, a)
}

// SetSwivel is a paid mutator transaction binding the contract method 0xb79eb926.
//
// Solidity: function setSwivel(address s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) SetSwivel(opts *bind.TransactOpts, s common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "setSwivel", s)
}

// SetSwivel is a paid mutator transaction binding the contract method 0xb79eb926.
//
// Solidity: function setSwivel(address s) returns(bool)
func (_MarketPlace *MarketPlaceSession) SetSwivel(s common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetSwivel(&_MarketPlace.TransactOpts, s)
}

// SetSwivel is a paid mutator transaction binding the contract method 0xb79eb926.
//
// Solidity: function setSwivel(address s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) SetSwivel(s common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetSwivel(&_MarketPlace.TransactOpts, s)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x7dcad278.
//
// Solidity: function transferVaultNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) TransferVaultNotional(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "transferVaultNotional", p, u, m, t, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x7dcad278.
//
// Solidity: function transferVaultNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) TransferVaultNotional(p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotional(&_MarketPlace.TransactOpts, p, u, m, t, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x7dcad278.
//
// Solidity: function transferVaultNotional(uint8 p, address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) TransferVaultNotional(p uint8, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotional(&_MarketPlace.TransactOpts, p, u, m, t, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0xdb850901.
//
// Solidity: function transferVaultNotionalFee(uint8 p, address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) TransferVaultNotionalFee(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "transferVaultNotionalFee", p, u, m, f, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0xdb850901.
//
// Solidity: function transferVaultNotionalFee(uint8 p, address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) TransferVaultNotionalFee(p uint8, u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotionalFee(&_MarketPlace.TransactOpts, p, u, m, f, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0xdb850901.
//
// Solidity: function transferVaultNotionalFee(uint8 p, address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) TransferVaultNotionalFee(p uint8, u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotionalFee(&_MarketPlace.TransactOpts, p, u, m, f, a)
}

// MarketPlaceCreateIterator is returned from FilterCreate and is used to iterate over the raw logs and unpacked data for Create events raised by the MarketPlace contract.
type MarketPlaceCreateIterator struct {
	Event *MarketPlaceCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCreate represents a Create event raised by the MarketPlace contract.
type MarketPlaceCreate struct {
	Protocol     uint8
	Underlying   common.Address
	Maturity     *big.Int
	CToken       common.Address
	ZcToken      common.Address
	VaultTracker common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreate is a free log retrieval operation binding the contract event 0x39fc19388929259a60a8806c6aecb45c336e28e3295fa6fed5813474e6d2b7e8.
//
// Solidity: event Create(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address cToken, address zcToken, address vaultTracker)
func (_MarketPlace *MarketPlaceFilterer) FilterCreate(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCreateIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "Create", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCreateIterator{contract: _MarketPlace.contract, event: "Create", logs: logs, sub: sub}, nil
}

// WatchCreate is a free log subscription operation binding the contract event 0x39fc19388929259a60a8806c6aecb45c336e28e3295fa6fed5813474e6d2b7e8.
//
// Solidity: event Create(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address cToken, address zcToken, address vaultTracker)
func (_MarketPlace *MarketPlaceFilterer) WatchCreate(opts *bind.WatchOpts, sink chan<- *MarketPlaceCreate, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "Create", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCreate)
				if err := _MarketPlace.contract.UnpackLog(event, "Create", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreate is a log parse operation binding the contract event 0x39fc19388929259a60a8806c6aecb45c336e28e3295fa6fed5813474e6d2b7e8.
//
// Solidity: event Create(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address cToken, address zcToken, address vaultTracker)
func (_MarketPlace *MarketPlaceFilterer) ParseCreate(log types.Log) (*MarketPlaceCreate, error) {
	event := new(MarketPlaceCreate)
	if err := _MarketPlace.contract.UnpackLog(event, "Create", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceCustodialExitIterator is returned from FilterCustodialExit and is used to iterate over the raw logs and unpacked data for CustodialExit events raised by the MarketPlace contract.
type MarketPlaceCustodialExitIterator struct {
	Event *MarketPlaceCustodialExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCustodialExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCustodialExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCustodialExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCustodialExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCustodialExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCustodialExit represents a CustodialExit event raised by the MarketPlace contract.
type MarketPlaceCustodialExit struct {
	Protocol   uint8
	Underlying common.Address
	Maturity   *big.Int
	ZcTarget   common.Address
	NTarget    common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCustodialExit is a free log retrieval operation binding the contract event 0x34fa475e6431f76e8146368a631a5a0ef8ee78b77d3359d0f8e50de4d7a4ff8b.
//
// Solidity: event CustodialExit(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterCustodialExit(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCustodialExitIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CustodialExit", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCustodialExitIterator{contract: _MarketPlace.contract, event: "CustodialExit", logs: logs, sub: sub}, nil
}

// WatchCustodialExit is a free log subscription operation binding the contract event 0x34fa475e6431f76e8146368a631a5a0ef8ee78b77d3359d0f8e50de4d7a4ff8b.
//
// Solidity: event CustodialExit(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchCustodialExit(opts *bind.WatchOpts, sink chan<- *MarketPlaceCustodialExit, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CustodialExit", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCustodialExit)
				if err := _MarketPlace.contract.UnpackLog(event, "CustodialExit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodialExit is a log parse operation binding the contract event 0x34fa475e6431f76e8146368a631a5a0ef8ee78b77d3359d0f8e50de4d7a4ff8b.
//
// Solidity: event CustodialExit(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseCustodialExit(log types.Log) (*MarketPlaceCustodialExit, error) {
	event := new(MarketPlaceCustodialExit)
	if err := _MarketPlace.contract.UnpackLog(event, "CustodialExit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceCustodialInitiateIterator is returned from FilterCustodialInitiate and is used to iterate over the raw logs and unpacked data for CustodialInitiate events raised by the MarketPlace contract.
type MarketPlaceCustodialInitiateIterator struct {
	Event *MarketPlaceCustodialInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCustodialInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCustodialInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCustodialInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCustodialInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCustodialInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCustodialInitiate represents a CustodialInitiate event raised by the MarketPlace contract.
type MarketPlaceCustodialInitiate struct {
	Protocol   uint8
	Underlying common.Address
	Maturity   *big.Int
	ZcTarget   common.Address
	NTarget    common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCustodialInitiate is a free log retrieval operation binding the contract event 0x4ccb07dd34f02abf1c514fa611ba589e66ca2f7bcdb3c0cb3b65852354da4398.
//
// Solidity: event CustodialInitiate(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterCustodialInitiate(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCustodialInitiateIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CustodialInitiate", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCustodialInitiateIterator{contract: _MarketPlace.contract, event: "CustodialInitiate", logs: logs, sub: sub}, nil
}

// WatchCustodialInitiate is a free log subscription operation binding the contract event 0x4ccb07dd34f02abf1c514fa611ba589e66ca2f7bcdb3c0cb3b65852354da4398.
//
// Solidity: event CustodialInitiate(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchCustodialInitiate(opts *bind.WatchOpts, sink chan<- *MarketPlaceCustodialInitiate, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CustodialInitiate", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCustodialInitiate)
				if err := _MarketPlace.contract.UnpackLog(event, "CustodialInitiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodialInitiate is a log parse operation binding the contract event 0x4ccb07dd34f02abf1c514fa611ba589e66ca2f7bcdb3c0cb3b65852354da4398.
//
// Solidity: event CustodialInitiate(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseCustodialInitiate(log types.Log) (*MarketPlaceCustodialInitiate, error) {
	event := new(MarketPlaceCustodialInitiate)
	if err := _MarketPlace.contract.UnpackLog(event, "CustodialInitiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceMatureIterator is returned from FilterMature and is used to iterate over the raw logs and unpacked data for Mature events raised by the MarketPlace contract.
type MarketPlaceMatureIterator struct {
	Event *MarketPlaceMature // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceMatureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceMature)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceMature)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceMatureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceMatureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceMature represents a Mature event raised by the MarketPlace contract.
type MarketPlaceMature struct {
	Protocol     uint8
	Underlying   common.Address
	Maturity     *big.Int
	MaturityRate *big.Int
	Matured      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMature is a free log retrieval operation binding the contract event 0xa43c0392e4bc23fcadd5a4c4d6d69a1148b6bcec3ac53d7654921bcc33f5addf.
//
// Solidity: event Mature(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) FilterMature(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceMatureIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "Mature", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceMatureIterator{contract: _MarketPlace.contract, event: "Mature", logs: logs, sub: sub}, nil
}

// WatchMature is a free log subscription operation binding the contract event 0xa43c0392e4bc23fcadd5a4c4d6d69a1148b6bcec3ac53d7654921bcc33f5addf.
//
// Solidity: event Mature(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) WatchMature(opts *bind.WatchOpts, sink chan<- *MarketPlaceMature, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "Mature", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceMature)
				if err := _MarketPlace.contract.UnpackLog(event, "Mature", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMature is a log parse operation binding the contract event 0xa43c0392e4bc23fcadd5a4c4d6d69a1148b6bcec3ac53d7654921bcc33f5addf.
//
// Solidity: event Mature(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) ParseMature(log types.Log) (*MarketPlaceMature, error) {
	event := new(MarketPlaceMature)
	if err := _MarketPlace.contract.UnpackLog(event, "Mature", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceP2pVaultExchangeIterator is returned from FilterP2pVaultExchange and is used to iterate over the raw logs and unpacked data for P2pVaultExchange events raised by the MarketPlace contract.
type MarketPlaceP2pVaultExchangeIterator struct {
	Event *MarketPlaceP2pVaultExchange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceP2pVaultExchangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceP2pVaultExchange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceP2pVaultExchange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceP2pVaultExchangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceP2pVaultExchangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceP2pVaultExchange represents a P2pVaultExchange event raised by the MarketPlace contract.
type MarketPlaceP2pVaultExchange struct {
	Protocol   uint8
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterP2pVaultExchange is a free log retrieval operation binding the contract event 0x4a50decadd365d7ca023f61a307490ce8e696b1b81e112ae6f743b3366d13b6c.
//
// Solidity: event P2pVaultExchange(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterP2pVaultExchange(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceP2pVaultExchangeIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "P2pVaultExchange", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceP2pVaultExchangeIterator{contract: _MarketPlace.contract, event: "P2pVaultExchange", logs: logs, sub: sub}, nil
}

// WatchP2pVaultExchange is a free log subscription operation binding the contract event 0x4a50decadd365d7ca023f61a307490ce8e696b1b81e112ae6f743b3366d13b6c.
//
// Solidity: event P2pVaultExchange(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchP2pVaultExchange(opts *bind.WatchOpts, sink chan<- *MarketPlaceP2pVaultExchange, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "P2pVaultExchange", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceP2pVaultExchange)
				if err := _MarketPlace.contract.UnpackLog(event, "P2pVaultExchange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseP2pVaultExchange is a log parse operation binding the contract event 0x4a50decadd365d7ca023f61a307490ce8e696b1b81e112ae6f743b3366d13b6c.
//
// Solidity: event P2pVaultExchange(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseP2pVaultExchange(log types.Log) (*MarketPlaceP2pVaultExchange, error) {
	event := new(MarketPlaceP2pVaultExchange)
	if err := _MarketPlace.contract.UnpackLog(event, "P2pVaultExchange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceP2pZcTokenExchangeIterator is returned from FilterP2pZcTokenExchange and is used to iterate over the raw logs and unpacked data for P2pZcTokenExchange events raised by the MarketPlace contract.
type MarketPlaceP2pZcTokenExchangeIterator struct {
	Event *MarketPlaceP2pZcTokenExchange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceP2pZcTokenExchange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceP2pZcTokenExchange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceP2pZcTokenExchange represents a P2pZcTokenExchange event raised by the MarketPlace contract.
type MarketPlaceP2pZcTokenExchange struct {
	Protocol   uint8
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterP2pZcTokenExchange is a free log retrieval operation binding the contract event 0x0c5d0fa58187faeb475ea625004aed68162ededc2acf69844eed15a090a02b32.
//
// Solidity: event P2pZcTokenExchange(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterP2pZcTokenExchange(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceP2pZcTokenExchangeIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "P2pZcTokenExchange", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceP2pZcTokenExchangeIterator{contract: _MarketPlace.contract, event: "P2pZcTokenExchange", logs: logs, sub: sub}, nil
}

// WatchP2pZcTokenExchange is a free log subscription operation binding the contract event 0x0c5d0fa58187faeb475ea625004aed68162ededc2acf69844eed15a090a02b32.
//
// Solidity: event P2pZcTokenExchange(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchP2pZcTokenExchange(opts *bind.WatchOpts, sink chan<- *MarketPlaceP2pZcTokenExchange, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "P2pZcTokenExchange", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceP2pZcTokenExchange)
				if err := _MarketPlace.contract.UnpackLog(event, "P2pZcTokenExchange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseP2pZcTokenExchange is a log parse operation binding the contract event 0x0c5d0fa58187faeb475ea625004aed68162ededc2acf69844eed15a090a02b32.
//
// Solidity: event P2pZcTokenExchange(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseP2pZcTokenExchange(log types.Log) (*MarketPlaceP2pZcTokenExchange, error) {
	event := new(MarketPlaceP2pZcTokenExchange)
	if err := _MarketPlace.contract.UnpackLog(event, "P2pZcTokenExchange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceRedeemVaultInterestIterator is returned from FilterRedeemVaultInterest and is used to iterate over the raw logs and unpacked data for RedeemVaultInterest events raised by the MarketPlace contract.
type MarketPlaceRedeemVaultInterestIterator struct {
	Event *MarketPlaceRedeemVaultInterest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceRedeemVaultInterestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceRedeemVaultInterest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceRedeemVaultInterest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceRedeemVaultInterestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceRedeemVaultInterestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceRedeemVaultInterest represents a RedeemVaultInterest event raised by the MarketPlace contract.
type MarketPlaceRedeemVaultInterest struct {
	Protocol   uint8
	Underlying common.Address
	Maturity   *big.Int
	Sender     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemVaultInterest is a free log retrieval operation binding the contract event 0x602f2da12d1008cffacf50314af0e5f78e8759bba815d4221b390e0b9e73639a.
//
// Solidity: event RedeemVaultInterest(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address sender)
func (_MarketPlace *MarketPlaceFilterer) FilterRedeemVaultInterest(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceRedeemVaultInterestIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "RedeemVaultInterest", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceRedeemVaultInterestIterator{contract: _MarketPlace.contract, event: "RedeemVaultInterest", logs: logs, sub: sub}, nil
}

// WatchRedeemVaultInterest is a free log subscription operation binding the contract event 0x602f2da12d1008cffacf50314af0e5f78e8759bba815d4221b390e0b9e73639a.
//
// Solidity: event RedeemVaultInterest(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address sender)
func (_MarketPlace *MarketPlaceFilterer) WatchRedeemVaultInterest(opts *bind.WatchOpts, sink chan<- *MarketPlaceRedeemVaultInterest, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "RedeemVaultInterest", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceRedeemVaultInterest)
				if err := _MarketPlace.contract.UnpackLog(event, "RedeemVaultInterest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemVaultInterest is a log parse operation binding the contract event 0x602f2da12d1008cffacf50314af0e5f78e8759bba815d4221b390e0b9e73639a.
//
// Solidity: event RedeemVaultInterest(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address sender)
func (_MarketPlace *MarketPlaceFilterer) ParseRedeemVaultInterest(log types.Log) (*MarketPlaceRedeemVaultInterest, error) {
	event := new(MarketPlaceRedeemVaultInterest)
	if err := _MarketPlace.contract.UnpackLog(event, "RedeemVaultInterest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceRedeemZcTokenIterator is returned from FilterRedeemZcToken and is used to iterate over the raw logs and unpacked data for RedeemZcToken events raised by the MarketPlace contract.
type MarketPlaceRedeemZcTokenIterator struct {
	Event *MarketPlaceRedeemZcToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceRedeemZcTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceRedeemZcToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceRedeemZcToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceRedeemZcTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceRedeemZcTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceRedeemZcToken represents a RedeemZcToken event raised by the MarketPlace contract.
type MarketPlaceRedeemZcToken struct {
	Protocol   uint8
	Underlying common.Address
	Maturity   *big.Int
	Sender     common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemZcToken is a free log retrieval operation binding the contract event 0x1d3b3ead9f6b17c584914d99c0019883ab43e6e354df48d46185e166f43c68b4.
//
// Solidity: event RedeemZcToken(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterRedeemZcToken(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceRedeemZcTokenIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "RedeemZcToken", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceRedeemZcTokenIterator{contract: _MarketPlace.contract, event: "RedeemZcToken", logs: logs, sub: sub}, nil
}

// WatchRedeemZcToken is a free log subscription operation binding the contract event 0x1d3b3ead9f6b17c584914d99c0019883ab43e6e354df48d46185e166f43c68b4.
//
// Solidity: event RedeemZcToken(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchRedeemZcToken(opts *bind.WatchOpts, sink chan<- *MarketPlaceRedeemZcToken, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "RedeemZcToken", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceRedeemZcToken)
				if err := _MarketPlace.contract.UnpackLog(event, "RedeemZcToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemZcToken is a log parse operation binding the contract event 0x1d3b3ead9f6b17c584914d99c0019883ab43e6e354df48d46185e166f43c68b4.
//
// Solidity: event RedeemZcToken(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseRedeemZcToken(log types.Log) (*MarketPlaceRedeemZcToken, error) {
	event := new(MarketPlaceRedeemZcToken)
	if err := _MarketPlace.contract.UnpackLog(event, "RedeemZcToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceTransferVaultNotionalIterator is returned from FilterTransferVaultNotional and is used to iterate over the raw logs and unpacked data for TransferVaultNotional events raised by the MarketPlace contract.
type MarketPlaceTransferVaultNotionalIterator struct {
	Event *MarketPlaceTransferVaultNotional // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceTransferVaultNotionalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceTransferVaultNotional)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceTransferVaultNotional)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceTransferVaultNotionalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceTransferVaultNotionalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceTransferVaultNotional represents a TransferVaultNotional event raised by the MarketPlace contract.
type MarketPlaceTransferVaultNotional struct {
	Protocol   uint8
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransferVaultNotional is a free log retrieval operation binding the contract event 0xe401e2d61a180e97aba5ebeb66d643bbc7e6516b91281ff0e480dac7e206c88f.
//
// Solidity: event TransferVaultNotional(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterTransferVaultNotional(opts *bind.FilterOpts, protocol []uint8, underlying []common.Address, maturity []*big.Int) (*MarketPlaceTransferVaultNotionalIterator, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "TransferVaultNotional", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransferVaultNotionalIterator{contract: _MarketPlace.contract, event: "TransferVaultNotional", logs: logs, sub: sub}, nil
}

// WatchTransferVaultNotional is a free log subscription operation binding the contract event 0xe401e2d61a180e97aba5ebeb66d643bbc7e6516b91281ff0e480dac7e206c88f.
//
// Solidity: event TransferVaultNotional(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchTransferVaultNotional(opts *bind.WatchOpts, sink chan<- *MarketPlaceTransferVaultNotional, protocol []uint8, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var protocolRule []interface{}
	for _, protocolItem := range protocol {
		protocolRule = append(protocolRule, protocolItem)
	}
	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "TransferVaultNotional", protocolRule, underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceTransferVaultNotional)
				if err := _MarketPlace.contract.UnpackLog(event, "TransferVaultNotional", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferVaultNotional is a log parse operation binding the contract event 0xe401e2d61a180e97aba5ebeb66d643bbc7e6516b91281ff0e480dac7e206c88f.
//
// Solidity: event TransferVaultNotional(uint8 indexed protocol, address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseTransferVaultNotional(log types.Log) (*MarketPlaceTransferVaultNotional, error) {
	event := new(MarketPlaceTransferVaultNotional)
	if err := _MarketPlace.contract.UnpackLog(event, "TransferVaultNotional", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
