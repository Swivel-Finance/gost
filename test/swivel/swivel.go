// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swivel

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HashOrder is an auto generated low-level Go binding around an user-defined struct.
type HashOrder struct {
	Key        [32]byte
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// SigComponents is an auto generated low-level Go binding around an user-defined struct.
type SigComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelABI is the input ABI used to generate the binding from.
const SwivelABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Initiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"WithdrawalScheduled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components\",\"name\":\"c\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"combineTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fenominator\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"t\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"d\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"splitUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SwivelBin is the compiled bytecode used for deploying new contracts.
var SwivelBin = "0x60e06040523480156200001157600080fd5b506040516200616838038062006168833981016040819052620000349162000206565b3360601b60c052604080518082018252600e81526d53776976656c2046696e616e636560901b602080830191909152825180840190935260058352640322e302e360dc1b838201526200009592904690309062001b61620000e8821b17901c565b6080908152606082811b6001600160601b03191660a05260408051928301815260c880845261025860208501526101909184019190915290820152620000e09060039060046200013f565b505062000236565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b82805482825590600052602060002090600f01601090048101928215620001dd5791602002820160005b83821115620001ab57835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000169565b8015620001db5782816101000a81549061ffff0219169055600201602081600101049283019260010302620001ab565b505b50620001eb929150620001ef565b5090565b5b80821115620001eb5760008155600101620001f0565b60006020828403121562000218578081fd5b81516001600160a01b03811681146200022f578182fd5b9392505050565b60805160a05160601c60c05160601c615e5462000314600039600081816103670152818161091501528181610abb01528181611026015281816111250152611a630152600081816101d40152818161043401528181610ce00152818161223c015281816128e901528181612d73015281816135d901528181613f1501528181614915015281816150dd015261568a015260008181610323015281816107ba01528181611f08015281816125c701528181612b5e015281816133c301528181613b390152818161453e01528181614db4015261538b0152615e546000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806399b64de1116100cd578063d0886f9711610081578063f851a44011610066578063f851a44014610362578063f8eaad3514610389578063ffa1ad741461039c57600080fd5b8063d0886f9714610345578063d2144f581461034f57600080fd5b8063a3f4df7e116100b2578063a3f4df7e146102c2578063aba287011461030b578063c2fb26a61461031e57600080fd5b806399b64de11461029c578063a102e384146102af57600080fd5b806333c810e91161012457806351cff8d91161010957806351cff8d9146102545780637a9262a21461026957806392ae37641461028957600080fd5b806333c810e91461021b5780633e1608b41461024157600080fd5b80630908ff2d14610156578063288cdc911461017e5780632ac12622146101ac5780632e25d2a6146101cf575b600080fd5b610169610164366004615a5b565b6103d8565b60405190151581526020015b60405180910390f35b61019e61018c366004615b89565b60016020526000908152604090205481565b604051908152602001610175565b6101696101ba366004615b89565b60006020819052908152604090205460ff1681565b6101f67f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610175565b61022e610229366004615b89565b610778565b60405161ffff9091168152602001610175565b61016961024f366004615ba1565b6107b0565b610267610262366004615a1c565b610913565b005b61019e610277366004615a1c565b60026020526000908152604090205481565b610169610297366004615a5b565b610be2565b6101696102aa366004615c02565b611022565b6102676102bd366004615a1c565b611123565b6102fe6040518060400160405280600e81526020017f53776976656c2046696e616e636500000000000000000000000000000000000081525081565b6040516101759190615c6d565b610169610319366004615a8f565b6111d1565b61019e7f000000000000000000000000000000000000000000000000000000000000000081565b61019e6203f48081565b61016961035d366004615a8f565b611620565b6101f67f000000000000000000000000000000000000000000000000000000000000000081565b610267610397366004615a1c565b611a61565b6102fe6040518060400160405280600581526020017f322e302e3000000000000000000000000000000000000000000000000000000081525081565b6040517fb50a66f700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052336044830152606482018390526000917f00000000000000000000000000000000000000000000000000000000000000009182169063b50a66f790608401602060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b29190615b6d565b6105295760405162461bcd60e51b815260206004820152602560248201527f6275726e205a63546f6b656e2072656d6f76696e67204e6f74696f6e616c206660448201527f61696c656400000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517f05e1dc2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260248201869052600091908316906305e1dc2590604401602060405180830381600087803b15801561059d57600080fd5b505af11580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190615a3f565b6040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810186905290915073ffffffffffffffffffffffffffffffffffffffff82169063852a12e390602401602060405180830381600087803b15801561064057600080fd5b505af1158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190615c34565b156106c55760405162461bcd60e51b815260206004820152601960248201527f636f6d706f756e6420726564656d7074696f6e206572726f72000000000000006044820152606401610520565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810185905273ffffffffffffffffffffffffffffffffffffffff87169063a9059cbb90604401602060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190615b6d565b5060019695505050505050565b6003818154811061078857600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b600061082261081c7f00000000000000000000000000000000000000000000000000000000000000006107e286611bb8565b6040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b83611cc3565b73ffffffffffffffffffffffffffffffffffffffff166108486040850160208601615a1c565b73ffffffffffffffffffffffffffffffffffffffff16146108ab5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b823560008181526020819052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a9190a250600192915050565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146109995760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e0000000000000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205480610a0c5760405162461bcd60e51b815260206004820152601760248201527f6e6f207769746864726177616c207363686564756c65640000000000000000006044820152606401610520565b80421015610a5c5760405162461bcd60e51b815260206004820152601860248201527f7769746864726177616c207374696c6c206f6e20686f6c6400000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602052604080822091909155517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015284919063a9059cbb907f00000000000000000000000000000000000000000000000000000000000000009083906370a0823190602401602060405180830381600087803b158015610b0057600080fd5b505af1158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190615c34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015610ba357600080fd5b505af1158015610bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb9190615b6d565b5050505050565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101829052600090849073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401602060405180830381600087803b158015610c5b57600080fd5b505af1158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190615b6d565b506040517f05e1dc2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000916000918316906305e1dc2590604401602060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d619190615a3f565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018890529192509084169063095ea7b390604401602060405180830381600087803b158015610dd557600080fd5b505af1158015610de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0d9190615b6d565b506040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff82169063a0712d6890602401602060405180830381600087803b158015610e7657600080fd5b505af1158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190615c34565b15610efb5760405162461bcd60e51b815260206004820152601560248201527f6d696e74696e672043546f6b656e204661696c656400000000000000000000006044820152606401610520565b6040517fef267f2c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018890523360448301526064820187905283169063ef267f2c90608401602060405180830381600087803b158015610f7857600080fd5b505af1158015610f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb09190615b6d565b61076b5760405162461bcd60e51b815260206004820152602360248201527f6d696e74205a63546f6b656e20616464696e67204e6f74696f6e616c2066616960448201527f6c656400000000000000000000000000000000000000000000000000000000006064820152608401610520565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146110aa5760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e0000000000000000000000006044820152606401610520565b8260038561ffff16815481106110e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff160217905550600191505092915050565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146111a95760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e0000000000000000000000006044820152606401610520565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260026020526040812055565b6000805b8681101561161257878782818110611216577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201608001602081019061122f9190615b51565b61141c5787878281811061126c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020160600160208101906112859190615b51565b611355576113508888838181106112c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201878784818110611305577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110611345577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201611e46565b611600565b611350888883818110611391577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905061012002018787848181106113d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110611411577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201612505565b878782818110611455577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201606001602081019061146e9190615b51565b611539576113508888838181106114ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905061012002018787848181106114ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013586868581811061152e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201612a9c565b611600888883818110611575577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905061012002018787848181106115b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358686858181106115f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201613301565b8061160a81615d83565b9150506111d5565b506001979650505050505050565b6000805b8681101561161257878782818110611665577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201608001602081019061167e9190615b51565b61186b578787828181106116bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020160600160208101906116d49190615b51565b6117a45761179f888883818110611714577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201878784818110611754577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110611794577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201613a77565b611a4f565b61179f8888838181106117e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201878784818110611820577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110611860577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506060020161447c565b8787828181106118a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020160600160208101906118bd9190615b51565b6119885761179f8888838181106118fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020187878481811061193d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013586868581811061197d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201614cf2565b611a4f8888838181106119c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201878784818110611a04577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110611a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050606002016152c9565b80611a5981615d83565b915050611624565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614611ae75760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d7573742062652061646d696e0000000000000000000000006044820152606401610520565b6000611af66203f48042615cde565b73ffffffffffffffffffffffffffffffffffffffff84166000818152600260205260409081902083905551919250907fd9cf0116e5bb6fbe3d257dc8d1ee7ae76c303efeae77f1e93024d2cb218bedd390611b549084815260200190565b60405180910390a2505050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b60007f7ddd38ab5ed1c16b61ca90eeb9579e29da1ba821cf42d8cdef8f30a31a6a41468235611bed6040850160208601615a1c565b611bfd6060860160408701615a1c565b611c0d6080870160608801615b51565b611c1d60a0880160808901615b51565b8760a001358860c001358960e001358a6101000135604051602001611ca69a99989796959493929190998a5260208a019890985273ffffffffffffffffffffffffffffffffffffffff96871660408a01529490951660608801529115156080870152151560a086015260c085015260e08401919091526101008301526101208201526101400190565b604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a060408301351115611d395760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202273222076616c756500000000006044820152606401610520565b611d466020830183615c4c565b60ff16601b1480611d665750611d5f6020830183615c4c565b60ff16601c145b611db25760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202276222076616c756500000000006044820152606401610520565b600183611dc26020850185615c4c565b604080516000815260208181018084529490945260ff9092168282015291850135606082015290840135608082015260a0016020604051602081039080840390855afa158015611e16573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151949350505050565b82356000908152602081905260409020548390829060ff1615611eab5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610520565b428261010001351015611f005760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610520565b611f36611f307f00000000000000000000000000000000000000000000000000000000000000006107e285611bb8565b82611cc3565b73ffffffffffffffffffffffffffffffffffffffff16611f5c6040840160208501615a1c565b73ffffffffffffffffffffffffffffffffffffffff1614611fbf5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b8435600090815260016020526040902054611fde9060c0870135615d6c565b84111561202d5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610520565b84356000908152600160205260408120805486929061204d908490615cde565b9091555060009050670de0b6b3a764000060a087013560c08801356120728884615d2f565b61207c9190615cf6565b6120869190615d2f565b6120909190615cf6565b90506000670de0b6b3a764000060036001815481106120d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120601082040154600f9091166002026101000a900461ffff1661210c84670de0b6b3a7640000615d2f565b6121169190615cf6565b6121209190615cf6565b905060006121346060890160408a01615a1c565b905073ffffffffffffffffffffffffffffffffffffffff81166323b872dd61216260408b0160208c01615a1c565b338561216e8c89615d6c565b6121789190615d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381600087803b1580156121ec57600080fd5b505af1158015612200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122249190615b6d565b5073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166365a963aa61227160608b0160408c01615a1c565b60e08b01353361228760408e0160208f01615a1c565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201526024810193909352908316604483015290911660648201526084810186905260a401602060405180830381600087803b15801561230c57600080fd5b505af1158015612320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123449190615b6d565b6123905760405162461bcd60e51b815260206004820152601760248201527f7a63546f6b656e2065786368616e6765206661696c65640000000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff81166323b872dd6123bc60408b0160208c01615a1c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018590526064015b602060405180830381600087803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124689190615b6d565b503361247a60408a0160208b01615a1c565b73ffffffffffffffffffffffffffffffffffffffff1689357fc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c225436124c360808d0160608e01615b51565b6124d360a08e0160808f01615b51565b604080519215158352901515602083015281018c90526060810188905260800160405180910390a45050505050505050565b82356000908152602081905260409020548390829060ff161561256a5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610520565b4282610100013510156125bf5760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610520565b6125ef611f307f00000000000000000000000000000000000000000000000000000000000000006107e285611bb8565b73ffffffffffffffffffffffffffffffffffffffff166126156040840160208501615a1c565b73ffffffffffffffffffffffffffffffffffffffff16146126785760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b84356000908152600160205260409020546126979060a0870135615d6c565b8411156126e65760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610520565b843560009081526001602052604081208054869290612706908490615cde565b9091555060009050670de0b6b3a764000060c087013560a088013561272b8884615d2f565b6127359190615cf6565b61273f9190615d2f565b6127499190615cf6565b90506000670de0b6b3a764000060038081548110612790577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120601082040154600f9091166002026101000a900461ffff166127c484670de0b6b3a7640000615d2f565b6127ce9190615cf6565b6127d89190615cf6565b905060006127ec6060890160408a01615a1c565b905073ffffffffffffffffffffffffffffffffffffffff81166323b872dd61281a60408b0160208c01615a1c565b336128258688615d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381600087803b15801561289957600080fd5b505af11580156128ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128d19190615b6d565b5073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663bddbfbe461291e60608b0160408c01615a1c565b60e08b01353361293460408e0160208f01615a1c565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602481019390935290831660448301529091166064820152608481018a905260a401602060405180830381600087803b1580156129b957600080fd5b505af11580156129cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f19190615b6d565b612a3d5760405162461bcd60e51b815260206004820152601560248201527f7661756c742065786368616e6765206661696c656400000000000000000000006044820152606401610520565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401612416565b82356000908152602081905260409020548390829060ff1615612b015760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610520565b428261010001351015612b565760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610520565b612b86611f307f00000000000000000000000000000000000000000000000000000000000000006107e285611bb8565b73ffffffffffffffffffffffffffffffffffffffff16612bac6040840160208501615a1c565b73ffffffffffffffffffffffffffffffffffffffff1614612c0f5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b8435600090815260016020526040902054612c2e9060a0870135615d6c565b841115612c7d5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610520565b843560009081526001602052604081208054869290612c9d908490615cde565b9091555060009050670de0b6b3a764000060c087013560a0880135612cc28884615d2f565b612ccc9190615cf6565b612cd69190615d2f565b612ce09190615cf6565b90506000670de0b6b3a764000060038081548110612d27577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120601082040154600f9091166002026101000a900461ffff16612d5b84670de0b6b3a7640000615d2f565b612d659190615cf6565b612d6f9190615cf6565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8116638c6b9b41612dbe60608b0160408c01615a1c565b60e08b0135612dd360408d0160208e01615a1c565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff938416600482015260248101929092529091166044820152336064820152608481018a905260a401602060405180830381600087803b158015612e5657600080fd5b505af1158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190615b6d565b612eda5760405162461bcd60e51b815260206004820152601560248201527f637573746f6469616c2065786974206661696c656400000000000000000000006044820152606401610520565b600073ffffffffffffffffffffffffffffffffffffffff82166305e1dc25612f0860608c0160408d01615a1c565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908c01356024820152604401602060405180830381600087803b158015612f7857600080fd5b505af1158015612f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb09190615a3f565b6040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018a905290915073ffffffffffffffffffffffffffffffffffffffff82169063852a12e390602401602060405180830381600087803b15801561301b57600080fd5b505af115801561302f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130539190615c34565b156130a05760405162461bcd60e51b815260206004820152601960248201527f636f6d706f756e6420726564656d7074696f6e206572726f72000000000000006044820152606401610520565b60006130b260608b0160408c01615a1c565b905073ffffffffffffffffffffffffffffffffffffffff811663a9059cbb6130e060408d0160208e01615a1c565b6130ea888d615d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561315557600080fd5b505af1158015613169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318d9190615b6d565b5073ffffffffffffffffffffffffffffffffffffffff811663a9059cbb336131b58789615d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044015b602060405180830381600087803b15801561322157600080fd5b505af1158015613235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132599190615b6d565b503361326b60408c0160208d01615a1c565b73ffffffffffffffffffffffffffffffffffffffff168b600001357fc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c225438d60600160208101906132ba9190615b51565b8e60800160208101906132cd9190615b51565b604080519215158352901515602083015281018e9052606081018a905260800160405180910390a450505050505050505050565b82356000908152602081905260409020548390829060ff16156133665760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610520565b4282610100013510156133bb5760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610520565b6133eb611f307f00000000000000000000000000000000000000000000000000000000000000006107e285611bb8565b73ffffffffffffffffffffffffffffffffffffffff166134116040840160208501615a1c565b73ffffffffffffffffffffffffffffffffffffffff16146134745760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b84356000908152600160205260409020546134939060c0870135615d6c565b8411156134e25760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610520565b843560009081526001602052604081208054869290613502908490615cde565b9091555060009050670de0b6b3a764000060a087013560c08801356135278884615d2f565b6135319190615cf6565b61353b9190615d2f565b6135459190615cf6565b90506000670de0b6b3a7640000600360018154811061358d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120601082040154600f9091166002026101000a900461ffff166135c184670de0b6b3a7640000615d2f565b6135cb9190615cf6565b6135d59190615cf6565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8116638c6b9b4161362460608b0160408c01615a1c565b60e08b01353361363a60408e0160208f01615a1c565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff94851660048201526024810193909352908316604483015290911660648201526084810186905260a401602060405180830381600087803b1580156136bf57600080fd5b505af11580156136d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f79190615b6d565b6137435760405162461bcd60e51b815260206004820152601560248201527f637573746f6469616c2065786974206661696c656400000000000000000000006044820152606401610520565b600073ffffffffffffffffffffffffffffffffffffffff82166305e1dc2561377160608c0160408d01615a1c565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908c01356024820152604401602060405180830381600087803b1580156137e157600080fd5b505af11580156137f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138199190615a3f565b6040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810186905290915073ffffffffffffffffffffffffffffffffffffffff82169063852a12e390602401602060405180830381600087803b15801561388457600080fd5b505af1158015613898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138bc9190615c34565b156139095760405162461bcd60e51b815260206004820152601960248201527f636f6d706f756e6420726564656d7074696f6e206572726f72000000000000006044820152606401610520565b600061391b60608b0160408c01615a1c565b905073ffffffffffffffffffffffffffffffffffffffff811663a9059cbb33866139458d8a615d6c565b61394f9190615d6c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b1580156139ba57600080fd5b505af11580156139ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f29190615b6d565b5073ffffffffffffffffffffffffffffffffffffffff811663a9059cbb613a1f60408d0160208e01615a1c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018c9052604401613207565b82356000908152602081905260409020548390829060ff1615613adc5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610520565b428261010001351015613b315760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610520565b613b61611f307f00000000000000000000000000000000000000000000000000000000000000006107e285611bb8565b73ffffffffffffffffffffffffffffffffffffffff16613b876040840160208501615a1c565b73ffffffffffffffffffffffffffffffffffffffff1614613bea5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b8435600090815260016020526040902054613c099060c0870135615d6c565b841115613c585760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610520565b843560009081526001602052604081208054869290613c78908490615cde565b9091555060009050670de0b6b3a764000060a087013560c0880135613c9d8884615d2f565b613ca79190615cf6565b613cb19190615d2f565b613cbb9190615cf6565b90506000670de0b6b3a76400006003600281548110613d03577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120601082040154600f9091166002026101000a900461ffff16613d3784670de0b6b3a7640000615d2f565b613d419190615cf6565b613d4b9190615cf6565b90506000613d5f6060890160408a01615a1c565b905073ffffffffffffffffffffffffffffffffffffffff81166323b872dd33613d8e60408c0160208d01615a1c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015291166024820152604481018a9052606401602060405180830381600087803b158015613e0257600080fd5b505af1158015613e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e3a9190615b6d565b5073ffffffffffffffffffffffffffffffffffffffff81166323b872dd613e6760408b0160208c01615a1c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015230602482015260448101869052606401602060405180830381600087803b158015613eda57600080fd5b505af1158015613eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f129190615b6d565b507f0000000000000000000000000000000000000000000000000000000000000000600073ffffffffffffffffffffffffffffffffffffffff82166305e1dc25613f6260608d0160408e01615a1c565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908d01356024820152604401602060405180830381600087803b158015613fd257600080fd5b505af1158015613fe6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400a9190615a3f565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018890529192509084169063095ea7b390604401602060405180830381600087803b15801561407e57600080fd5b505af1158015614092573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140b69190615b6d565b506040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff82169063a0712d6890602401602060405180830381600087803b15801561411f57600080fd5b505af1158015614133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141579190615c34565b156141a45760405162461bcd60e51b815260206004820152601560248201527f6d696e74696e672043546f6b656e206661696c656400000000000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff821663f8e51bcb6141d060608d0160408e01615a1c565b8c60e001358d60200160208101906141e89190615a1c565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810188905260a401602060405180830381600087803b15801561426b57600080fd5b505af115801561427f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a39190615b6d565b6142ef5760405162461bcd60e51b815260206004820152601960248201527f637573746f6469616c20696e697469617465206661696c6564000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff8216633cf9a4e361431b60608d0160408e01615a1c565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908d0135602482015233604482015260648101879052608401602060405180830381600087803b15801561439857600080fd5b505af11580156143ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d09190615b6d565b61441c5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74696f6e616c20666565207472616e73666572206661696c6564000000006044820152606401610520565b3361442d60408c0160208d01615a1c565b73ffffffffffffffffffffffffffffffffffffffff168b600001357f8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa288d60600160208101906132ba9190615b51565b82356000908152602081905260409020548390829060ff16156144e15760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610520565b4282610100013510156145365760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610520565b614566611f307f00000000000000000000000000000000000000000000000000000000000000006107e285611bb8565b73ffffffffffffffffffffffffffffffffffffffff1661458c6040840160208501615a1c565b73ffffffffffffffffffffffffffffffffffffffff16146145ef5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b843560009081526001602052604090205461460e9060a0870135615d6c565b84111561465d5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610520565b84356000908152600160205260408120805486929061467d908490615cde565b9091555060009050670de0b6b3a764000060c087013560a08801356146a28884615d2f565b6146ac9190615cf6565b6146b69190615d2f565b6146c09190615cf6565b90506000670de0b6b3a76400006003600081548110614708577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120601082040154600f9091166002026101000a900461ffff1661473c84670de0b6b3a7640000615d2f565b6147469190615cf6565b6147509190615cf6565b905060006147646060890160408a01615a1c565b905073ffffffffffffffffffffffffffffffffffffffff81166323b872dd61479260408b0160208c01615a1c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015233602482015260448101869052606401602060405180830381600087803b15801561480557600080fd5b505af1158015614819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061483d9190615b6d565b5073ffffffffffffffffffffffffffffffffffffffff81166323b872dd3330614866868c615cde565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381600087803b1580156148da57600080fd5b505af11580156148ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149129190615b6d565b507f0000000000000000000000000000000000000000000000000000000000000000600073ffffffffffffffffffffffffffffffffffffffff82166305e1dc2561496260608d0160408e01615a1c565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908d01356024820152604401602060405180830381600087803b1580156149d257600080fd5b505af11580156149e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a0a9190615a3f565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018c90529192509084169063095ea7b390604401602060405180830381600087803b158015614a7e57600080fd5b505af1158015614a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ab69190615b6d565b506040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff82169063a0712d6890602401602060405180830381600087803b158015614b1f57600080fd5b505af1158015614b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b579190615c34565b15614ba45760405162461bcd60e51b815260206004820152601560248201527f6d696e74696e672043546f6b656e204661696c656400000000000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff821663f8e51bcb614bd060608d0160408e01615a1c565b8c60e00135338e6020016020810190614be99190615a1c565b60405160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9485166004820152602481019390935290831660448301529091166064820152608481018c905260a401602060405180830381600087803b158015614c6e57600080fd5b505af1158015614c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ca69190615b6d565b61441c5760405162461bcd60e51b815260206004820152601960248201527f637573746f6469616c20696e697469617465206661696c6564000000000000006044820152606401610520565b82356000908152602081905260409020548390829060ff1615614d575760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610520565b428261010001351015614dac5760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610520565b614ddc611f307f00000000000000000000000000000000000000000000000000000000000000006107e285611bb8565b73ffffffffffffffffffffffffffffffffffffffff16614e026040840160208501615a1c565b73ffffffffffffffffffffffffffffffffffffffff1614614e655760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b8435600090815260016020526040902054614e849060a0870135615d6c565b841115614ed35760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610520565b843560009081526001602052604081208054869290614ef3908490615cde565b9091555060009050670de0b6b3a764000060c087013560a0880135614f188884615d2f565b614f229190615cf6565b614f2c9190615d2f565b614f369190615cf6565b90506000670de0b6b3a76400006003600081548110614f7e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120601082040154600f9091166002026101000a900461ffff16614fb284670de0b6b3a7640000615d2f565b614fbc9190615cf6565b614fc69190615cf6565b9050614fd86060880160408901615a1c565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3361500460408b0160208c01615a1c565b8461500f878c615d6c565b6150199190615cde565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381600087803b15801561508d57600080fd5b505af11580156150a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150c59190615b6d565b5073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166365a963aa61511260608a0160408b01615a1c565b60e08a013561512760408c0160208d01615a1c565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810189905260a401602060405180830381600087803b1580156151aa57600080fd5b505af11580156151be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151e29190615b6d565b61522e5760405162461bcd60e51b815260206004820152601760248201527f7a63546f6b656e2065786368616e6765206661696c65640000000000000000006044820152606401610520565b3361523f6040890160208a01615a1c565b73ffffffffffffffffffffffffffffffffffffffff1688357f8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa2861528860808c0160608d01615b51565b61529860a08d0160808e01615b51565b604080519215158352901515602083015281018b90526060810187905260800160405180910390a450505050505050565b82356000908152602081905260409020548390829060ff161561532e5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610520565b4282610100013510156153835760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610520565b6153b3611f307f00000000000000000000000000000000000000000000000000000000000000006107e285611bb8565b73ffffffffffffffffffffffffffffffffffffffff166153d96040840160208501615a1c565b73ffffffffffffffffffffffffffffffffffffffff161461543c5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610520565b843560009081526001602052604090205461545b9060c0870135615d6c565b8411156154aa5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610520565b8435600090815260016020526040812080548692906154ca908490615cde565b909155506154e090506060860160408701615a1c565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3361550c6040890160208a01615a1c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015260448101879052606401602060405180830381600087803b15801561558057600080fd5b505af1158015615594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906155b89190615b6d565b506000670de0b6b3a764000060a087013560c08801356155d88884615d2f565b6155e29190615cf6565b6155ec9190615d2f565b6155f69190615cf6565b90506000670de0b6b3a7640000600360028154811061563e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120601082040154600f9091166002026101000a900461ffff1661567284670de0b6b3a7640000615d2f565b61567c9190615cf6565b6156869190615cf6565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811663bddbfbe46156d560608b0160408c01615a1c565b60e08b01356156ea60408d0160208e01615a1c565b60405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925290911660448201523360648201526084810186905260a401602060405180830381600087803b15801561576d57600080fd5b505af1158015615781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157a59190615b6d565b6157f15760405162461bcd60e51b815260206004820152601560248201527f7661756c742065786368616e6765206661696c656400000000000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff8116633cf9a4e361581d60608b0160408c01615a1c565b60405160e083811b7fffffffff0000000000000000000000000000000000000000000000000000000016825273ffffffffffffffffffffffffffffffffffffffff929092166004820152908b0135602482015233604482015260648101859052608401602060405180830381600087803b15801561589a57600080fd5b505af11580156158ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906158d29190615b6d565b61591e5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74696f6e616c20666565207472616e73666572206661696c6564000000006044820152606401610520565b3361592f60408a0160208b01615a1c565b73ffffffffffffffffffffffffffffffffffffffff1689357f8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa286124c360808d0160608e01615b51565b60008083601f840112615989578182fd5b50813567ffffffffffffffff8111156159a0578182fd5b6020830191508360206060830285010111156159bb57600080fd5b9250929050565b60008083601f8401126159d3578182fd5b50813567ffffffffffffffff8111156159ea578182fd5b6020830191508360208260051b85010111156159bb57600080fd5b803561ffff81168114615a1757600080fd5b919050565b600060208284031215615a2d578081fd5b8135615a3881615deb565b9392505050565b600060208284031215615a50578081fd5b8151615a3881615deb565b600080600060608486031215615a6f578182fd5b8335615a7a81615deb565b95602085013595506040909401359392505050565b60008060008060008060608789031215615aa7578182fd5b863567ffffffffffffffff80821115615abe578384fd5b818901915089601f830112615ad1578384fd5b813581811115615adf578485fd5b8a602061012083028501011115615af4578485fd5b602092830198509650908801359080821115615b0e578384fd5b615b1a8a838b016159c2565b90965094506040890135915080821115615b32578384fd5b50615b3f89828a01615978565b979a9699509497509295939492505050565b600060208284031215615b62578081fd5b8135615a3881615e10565b600060208284031215615b7e578081fd5b8151615a3881615e10565b600060208284031215615b9a578081fd5b5035919050565b600080828403610180811215615bb5578283fd5b61012080821215615bc4578384fd5b84935060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee083011215615bf6578283fd5b92959390920193505050565b60008060408385031215615c14578182fd5b615c1d83615a05565b9150615c2b60208401615a05565b90509250929050565b600060208284031215615c45578081fd5b5051919050565b600060208284031215615c5d578081fd5b813560ff81168114615a38578182fd5b6000602080835283518082850152825b81811015615c9957858101830151858201604001528201615c7d565b81811115615caa5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115615cf157615cf1615dbc565b500190565b600082615d2a577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615d6757615d67615dbc565b500290565b600082821015615d7e57615d7e615dbc565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615db557615db5615dbc565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114615e0d57600080fd5b50565b8015158114615e0d57600080fdfea264697066735822122093b37d4c9d827943b796934efe5be10cb3abd059e389e13131ad3f0414a8e4f364736f6c63430008040033"

// DeploySwivel deploys a new Ethereum contract, binding an instance of Swivel to it.
func DeploySwivel(auth *bind.TransactOpts, backend bind.ContractBackend, m common.Address) (common.Address, *types.Transaction, *Swivel, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SwivelBin), backend, m)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// Swivel is an auto generated Go binding around an Ethereum contract.
type Swivel struct {
	SwivelCaller     // Read-only binding to the contract
	SwivelTransactor // Write-only binding to the contract
	SwivelFilterer   // Log filterer for contract events
}

// SwivelCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwivelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwivelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwivelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwivelSession struct {
	Contract     *Swivel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwivelCallerSession struct {
	Contract *SwivelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SwivelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwivelTransactorSession struct {
	Contract     *SwivelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwivelRaw struct {
	Contract *Swivel // Generic contract binding to access the raw methods on
}

// SwivelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwivelCallerRaw struct {
	Contract *SwivelCaller // Generic read-only contract binding to access the raw methods on
}

// SwivelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwivelTransactorRaw struct {
	Contract *SwivelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwivel creates a new instance of Swivel, bound to a specific deployed contract.
func NewSwivel(address common.Address, backend bind.ContractBackend) (*Swivel, error) {
	contract, err := bindSwivel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// NewSwivelCaller creates a new read-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelCaller(address common.Address, caller bind.ContractCaller) (*SwivelCaller, error) {
	contract, err := bindSwivel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelCaller{contract: contract}, nil
}

// NewSwivelTransactor creates a new write-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelTransactor(address common.Address, transactor bind.ContractTransactor) (*SwivelTransactor, error) {
	contract, err := bindSwivel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelTransactor{contract: contract}, nil
}

// NewSwivelFilterer creates a new log filterer instance of Swivel, bound to a specific deployed contract.
func NewSwivelFilterer(address common.Address, filterer bind.ContractFilterer) (*SwivelFilterer, error) {
	contract, err := bindSwivel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwivelFilterer{contract: contract}, nil
}

// bindSwivel binds a generic wrapper to an already deployed contract.
func bindSwivel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.SwivelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transact(opts, method, params...)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCaller) HOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "HOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCallerSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCaller) NAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCallerSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCallerSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCallerSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCaller) Cancelled(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "cancelled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCallerSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCaller) Domain(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "domain")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCallerSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// Fenominator is a free data retrieval call binding the contract method 0x33c810e9.
//
// Solidity: function fenominator(uint256 ) view returns(uint16)
func (_Swivel *SwivelCaller) Fenominator(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "fenominator", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// Fenominator is a free data retrieval call binding the contract method 0x33c810e9.
//
// Solidity: function fenominator(uint256 ) view returns(uint16)
func (_Swivel *SwivelSession) Fenominator(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Fenominator(&_Swivel.CallOpts, arg0)
}

// Fenominator is a free data retrieval call binding the contract method 0x33c810e9.
//
// Solidity: function fenominator(uint256 ) view returns(uint16)
func (_Swivel *SwivelCallerSession) Fenominator(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Fenominator(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCaller) Filled(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "filled", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCaller) MarketPlace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "marketPlace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCallerSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "withdrawals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns()
func (_Swivel *SwivelTransactor) BlockWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockWithdrawal", e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns()
func (_Swivel *SwivelSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns()
func (_Swivel *SwivelTransactorSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactor) Cancel(opts *bind.TransactOpts, o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "cancel", o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactorSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x0908ff2d.
//
// Solidity: function combineTokens(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) CombineTokens(opts *bind.TransactOpts, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "combineTokens", u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x0908ff2d.
//
// Solidity: function combineTokens(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) CombineTokens(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x0908ff2d.
//
// Solidity: function combineTokens(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) CombineTokens(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, u, m, a)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Exit(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "exit", o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Initiate(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "initiate", o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns()
func (_Swivel *SwivelTransactor) ScheduleWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleWithdrawal", e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns()
func (_Swivel *SwivelSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns()
func (_Swivel *SwivelTransactorSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// SetFee is a paid mutator transaction binding the contract method 0x99b64de1.
//
// Solidity: function setFee(uint16 t, uint16 d) returns(bool)
func (_Swivel *SwivelTransactor) SetFee(opts *bind.TransactOpts, t uint16, d uint16) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "setFee", t, d)
}

// SetFee is a paid mutator transaction binding the contract method 0x99b64de1.
//
// Solidity: function setFee(uint16 t, uint16 d) returns(bool)
func (_Swivel *SwivelSession) SetFee(t uint16, d uint16) (*types.Transaction, error) {
	return _Swivel.Contract.SetFee(&_Swivel.TransactOpts, t, d)
}

// SetFee is a paid mutator transaction binding the contract method 0x99b64de1.
//
// Solidity: function setFee(uint16 t, uint16 d) returns(bool)
func (_Swivel *SwivelTransactorSession) SetFee(t uint16, d uint16) (*types.Transaction, error) {
	return _Swivel.Contract.SetFee(&_Swivel.TransactOpts, t, d)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x92ae3764.
//
// Solidity: function splitUnderlying(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) SplitUnderlying(opts *bind.TransactOpts, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "splitUnderlying", u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x92ae3764.
//
// Solidity: function splitUnderlying(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) SplitUnderlying(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x92ae3764.
//
// Solidity: function splitUnderlying(address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) SplitUnderlying(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, u, m, a)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns()
func (_Swivel *SwivelTransactor) Withdraw(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "withdraw", e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns()
func (_Swivel *SwivelSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns()
func (_Swivel *SwivelTransactorSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// SwivelCancelIterator is returned from FilterCancel and is used to iterate over the raw logs and unpacked data for Cancel events raised by the Swivel contract.
type SwivelCancelIterator struct {
	Event *SwivelCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelCancel represents a Cancel event raised by the Swivel contract.
type SwivelCancel struct {
	Key [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCancel is a free log retrieval operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) FilterCancel(opts *bind.FilterOpts, key [][32]byte) (*SwivelCancelIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return &SwivelCancelIterator{contract: _Swivel.contract, event: "Cancel", logs: logs, sub: sub}, nil
}

// WatchCancel is a free log subscription operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) WatchCancel(opts *bind.WatchOpts, sink chan<- *SwivelCancel, key [][32]byte) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelCancel)
				if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancel is a log parse operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) ParseCancel(log types.Log) (*SwivelCancel, error) {
	event := new(SwivelCancel)
	if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelExitIterator is returned from FilterExit and is used to iterate over the raw logs and unpacked data for Exit events raised by the Swivel contract.
type SwivelExitIterator struct {
	Event *SwivelExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelExit represents a Exit event raised by the Swivel contract.
type SwivelExit struct {
	Key    [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExit is a free log retrieval operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterExit(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelExitIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelExitIterator{contract: _Swivel.contract, event: "Exit", logs: logs, sub: sub}, nil
}

// WatchExit is a free log subscription operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchExit(opts *bind.WatchOpts, sink chan<- *SwivelExit, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelExit)
				if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExit is a log parse operation binding the contract event 0xc2b841cf870951b686224fb1542371a6f102f38c38b5883c09b96a1124c22543.
//
// Solidity: event Exit(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseExit(log types.Log) (*SwivelExit, error) {
	event := new(SwivelExit)
	if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelInitiateIterator is returned from FilterInitiate and is used to iterate over the raw logs and unpacked data for Initiate events raised by the Swivel contract.
type SwivelInitiateIterator struct {
	Event *SwivelInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelInitiate represents a Initiate event raised by the Swivel contract.
type SwivelInitiate struct {
	Key    [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterInitiate is a free log retrieval operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterInitiate(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelInitiateIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelInitiateIterator{contract: _Swivel.contract, event: "Initiate", logs: logs, sub: sub}, nil
}

// WatchInitiate is a free log subscription operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchInitiate(opts *bind.WatchOpts, sink chan<- *SwivelInitiate, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelInitiate)
				if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiate is a log parse operation binding the contract event 0x8a438a403cb62fca11be8232092fd51c3b97d93fd1322876d992cedba02baa28.
//
// Solidity: event Initiate(bytes32 indexed key, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseInitiate(log types.Log) (*SwivelInitiate, error) {
	event := new(SwivelInitiate)
	if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelWithdrawalScheduledIterator is returned from FilterWithdrawalScheduled and is used to iterate over the raw logs and unpacked data for WithdrawalScheduled events raised by the Swivel contract.
type SwivelWithdrawalScheduledIterator struct {
	Event *SwivelWithdrawalScheduled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelWithdrawalScheduledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelWithdrawalScheduled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelWithdrawalScheduled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelWithdrawalScheduledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelWithdrawalScheduledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelWithdrawalScheduled represents a WithdrawalScheduled event raised by the Swivel contract.
type SwivelWithdrawalScheduled struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalScheduled is a free log retrieval operation binding the contract event 0xd9cf0116e5bb6fbe3d257dc8d1ee7ae76c303efeae77f1e93024d2cb218bedd3.
//
// Solidity: event WithdrawalScheduled(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterWithdrawalScheduled(opts *bind.FilterOpts, token []common.Address) (*SwivelWithdrawalScheduledIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "WithdrawalScheduled", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelWithdrawalScheduledIterator{contract: _Swivel.contract, event: "WithdrawalScheduled", logs: logs, sub: sub}, nil
}

// WatchWithdrawalScheduled is a free log subscription operation binding the contract event 0xd9cf0116e5bb6fbe3d257dc8d1ee7ae76c303efeae77f1e93024d2cb218bedd3.
//
// Solidity: event WithdrawalScheduled(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchWithdrawalScheduled(opts *bind.WatchOpts, sink chan<- *SwivelWithdrawalScheduled, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "WithdrawalScheduled", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelWithdrawalScheduled)
				if err := _Swivel.contract.UnpackLog(event, "WithdrawalScheduled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalScheduled is a log parse operation binding the contract event 0xd9cf0116e5bb6fbe3d257dc8d1ee7ae76c303efeae77f1e93024d2cb218bedd3.
//
// Solidity: event WithdrawalScheduled(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseWithdrawalScheduled(log types.Log) (*SwivelWithdrawalScheduled, error) {
	event := new(SwivelWithdrawalScheduled)
	if err := _Swivel.contract.UnpackLog(event, "WithdrawalScheduled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
