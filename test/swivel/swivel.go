// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swivel

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HashOrder is an auto generated low-level Go binding around an user-defined struct.
type HashOrder struct {
	Key        [32]byte
	Protocol   uint8
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// SigComponents is an auto generated low-level Go binding around an user-defined struct.
type SigComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelMetaData contains all meta data concerning the Swivel contract.
var SwivelMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Exception\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"S\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlockApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BlockFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlockWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Initiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feenominator\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"u\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"c\",\"type\":\"address[]\"}],\"name\":\"approveUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"authRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockFeeChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"combineTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feenominators\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemSwivelVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"redeemZcToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleFeeChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"i\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"d\",\"type\":\"uint16[]\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"splitUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b506040516200527b3803806200527b833981016040819052620000349162000230565b600480546001600160a01b03191633179055604080518082018252600e81526d53776976656c2046696e616e636560901b602080830191909152825180840190935260058352640332e302e360dc1b83820152620000a092904690309062001f1f62000108821b17901c565b60809081526001600160a01b0383811660a052600580546001600160a01b03191691841691909117905560408051918201815260c88083526102586020840152610190918301919091526060820152620000ff9060069060046200015f565b50505062000268565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b600183019183908215620001ea5791602002820160005b83821115620001b857835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000176565b8015620001e85782816101000a81549061ffff0219169055600201602081600101049283019260010302620001b8565b505b50620001f8929150620001fc565b5090565b5b80821115620001f85760008155600101620001fd565b80516001600160a01b03811681146200022b57600080fd5b919050565b600080604083850312156200024457600080fd5b6200024f8362000213565b91506200025f6020840162000213565b90509250929050565b60805160a051614f84620002f7600039600081816102c401528181610a6f01528181610fb90152818161147a015281816115ba015281816118b201528181611a6301528181612079015281816125d10152818161296101528181612bfb01528181613455015281816136fb015281816138d40152613cf801526000818161049f01526144280152614f846000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c806381bb8d631161012a578063b6907677116100bd578063f22c692e1161008c578063f8eaad3511610071578063f8eaad3514610504578063f9ad473d14610517578063ffa1ad741461051f57600080fd5b8063f22c692e146104de578063f851a440146104f157600080fd5b8063b690767714610487578063c2fb26a61461049a578063c48d8ae9146104c1578063d0886f97146104d457600080fd5b8063a0e80554116100f9578063a0e8055414610405578063a102e38414610418578063a3f4df7e1461042b578063b16a33cc1461047457600080fd5b806381bb8d63146103b95780638bfa66be146103cc57806395cb60c4146103df578063a0b06b50146103f257600080fd5b806335197f9e116101a25780635d0341ba116101715780635d0341ba14610353578063635452ec14610373578063704b6c02146103865780637a9262a21461039957600080fd5b806335197f9e146103115780634af606071461031a57806351cff8d91461032d57806352a4eec61461034057600080fd5b8063288cdc91116101de578063288cdc911461026e5780632ac126221461029c5780632e25d2a6146102bf5780632fd9ee8a146102fe57600080fd5b80630d3f53521461021057806310510f11146102305780631177ec301461025357806325dedb851461025b575b600080fd5b610218602181565b60405161ffff90911681526020015b60405180910390f35b61024361023e36600461482d565b61055b565b6040519015158152602001610227565b610243610715565b6102436102693660046148c7565b6107c2565b61028e61027c366004614933565b60016020526000908152604090205481565b604051908152602001610227565b6102436102aa366004614933565b60006020819052908152604090205460ff1681565b6102e67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610227565b61024361030c366004614985565b610a17565b61028e60075481565b61024361032836600461482d565b610c13565b61024361033b3660046149c9565b610dbe565b61024361034e366004614985565b610f62565b61028e6103613660046149c9565b60036020526000908152604090205481565b610243610381366004614b26565b61115d565b6102436103943660046149c9565b6113e2565b61028e6103a73660046149c9565b60026020526000908152604090205481565b6005546102e6906001600160a01b031681565b6102436103da366004614b8a565b611476565b6102186103ed366004614933565b61153b565b610243610400366004614bec565b611569565b6102436104133660046149c9565b61171c565b6102436104263660046149c9565b6117bb565b6104676040518060400160405280600e81526020017f53776976656c2046696e616e636500000000000000000000000000000000000081525081565b6040516102279190614c2b565b610243610482366004614985565b61185a565b610243610495366004614bec565b611a12565b61028e7f000000000000000000000000000000000000000000000000000000000000000081565b6102436104cf366004614c9e565b611b7f565b61028e6203f48081565b6102436104ec3660046149c9565b611d18565b6004546102e6906001600160a01b031681565b6102436105123660046149c9565b611ddf565b610243611e94565b6104676040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525081565b600085815b8181101561070657600089898381811061057c5761057c614cfe565b905061014002018036038101906105939190614d46565b90508060a001516106505780608001516105fe576105f98a8a848181106105bc576105bc614cfe565b905061014002018989858181106105d5576105d5614cfe565b905060200201358888868181106105ee576105ee614cfe565b905060600201611f76565b6106fd565b6105f98a8a8481811061061357610613614cfe565b9050610140020189898581811061062c5761062c614cfe565b9050602002013588888681811061064557610645614cfe565b9050606002016124be565b80608001516106ab576105f98a8a8481811061066e5761066e614cfe565b9050610140020189898581811061068757610687614cfe565b905060200201358888868181106106a0576106a0614cfe565b90506060020161284b565b6106fd8a8a848181106106c0576106c0614cfe565b905061014002018989858181106106d9576106d9614cfe565b905060200201358888868181106106f2576106f2614cfe565b905060600201612b39565b50600101610560565b50600198975050505050505050565b6004546000906001600160a01b031633811461076f57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a4015b60405180910390fd5b600061077e6203f48042614e1c565b60078190556040518181529091507ff339d7864b1b8839e8a8870c012fc6eb9a89844861a87a26ce35979018603a1b9060200160405180910390a160019250505090565b6004546000906001600160a01b031633811461081757604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b8483811461085757604051636d4c6c8960e01b8152601360048201526024810182905260448101859052600060648201819052608482015260a401610766565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000805b83811015610a0757600360008b8b8481811061089a5761089a614cfe565b90506020020160208101906108af91906149c9565b6001600160a01b03166001600160a01b031681526020019081526020016000205491508160000361091257604051636d4c6c8960e01b8152601060048201526000602482018190526044820181905260648201819052608482015260a401610766565b8142101561095157604051636d4c6c8960e01b81526011600482015242602482015260448101839052600060648201819052608482015260a401610766565b6000600360008c8c8581811061096957610969614cfe565b905060200201602081019061097e91906149c9565b6001600160a01b03166001600160a01b031681526020019081526020016000208190555060008a8a838181106109b6576109b6614cfe565b90506020020160208101906109cb91906149c9565b90506109fe818a8a858181106109e3576109e3614cfe565b90506020020160208101906109f891906149c9565b86612f1a565b5060010161087c565b5060019998505050505050505050565b6040517f87e157c100000000000000000000000000000000000000000000000000000000815260ff851660048201526001600160a01b03848116602483015260448201849052336064830152608482018390526000917f0000000000000000000000000000000000000000000000000000000000000000918216906387e157c19060a4016020604051808303816000875af1158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade9190614e34565b610b1a57604051636d4c6c8960e01b8152600e60048201526000602482018190526044820181905260648201819052608482015260a401610766565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff871660048201526001600160a01b03808716602483015260448201869052610bbe9188918891908516906335bdafab906064016020604051808303816000875af1158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190614e51565b86612faf565b610bfa57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610766565b610c058533856132aa565b60019150505b949350505050565b600085815b81811015610706576000898983818110610c3457610c34614cfe565b90506101400201803603810190610c4b9190614d46565b90508060a00151610d08578060800151610cb657610cb18a8a84818110610c7457610c74614cfe565b90506101400201898985818110610c8d57610c8d614cfe565b90506020020135888886818110610ca657610ca6614cfe565b905060600201613339565b610db5565b610cb18a8a84818110610ccb57610ccb614cfe565b90506101400201898985818110610ce457610ce4614cfe565b90506020020135888886818110610cfd57610cfd614cfe565b9050606002016135e6565b8060800151610d6357610cb18a8a84818110610d2657610d26614cfe565b90506101400201898985818110610d3f57610d3f614cfe565b90506020020135888886818110610d5857610d58614cfe565b90506060020161383e565b610db58a8a84818110610d7857610d78614cfe565b90506101400201898985818110610d9157610d91614cfe565b90506020020135888886818110610daa57610daa614cfe565b905060600201613c62565b50600101610c18565b6004546000906001600160a01b0316338114610e1357604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b6001600160a01b03831660009081526002602052604081205490819003610e6c57604051636d4c6c8960e01b8152601060048201526000602482018190526044820181905260648201819052608482015260a401610766565b80421015610eab57604051636d4c6c8960e01b81526011600482015242602482015260448101829052600060648201819052608482015260a401610766565b6001600160a01b03848116600081815260026020526040808220919091556004805491517f70a0823100000000000000000000000000000000000000000000000000000000815230918101919091528793610f57938593909116916370a08231906024016020604051808303816000875af1158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f529190614e6e565b6132aa565b506001949350505050565b600083610f718133308661408c565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff871660048201526001600160a01b038087166024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000009161103691899189918516906335bdafab906064016020604051808303816000875af115801561100c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110309190614e51565b87614126565b61107257604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610766565b6040517f01cc644800000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b03878116602483015260448201879052336064830152608482018690528216906301cc64489060a4016020604051808303816000875af11580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190614e34565b61115057604051636d4c6c8960e01b8152600d60048201526000602482018190526044820181905260648201819052608482015260a401610766565b5060019695505050505050565b6004546000906001600160a01b03163381146111b257604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b8351835181146111f7578351604051636d4c6c8960e01b815260136004820152602481018390526044810191909152600060648201819052608482015260a401610766565b60075460000361123957604051636d4c6c8960e01b8152601060048201526000602482018190526044820181905260648201819052608482015260a401610766565b60075442101561127e57600754604051636d4c6c8960e01b8152601160048201524260248201526044810191909152600060648201819052608482015260a401610766565b60005b818110156113d157602161ffff168582815181106112a1576112a1614cfe565b602002602001015161ffff16101561130f5760128582815181106112c7576112c7614cfe565b6020908102919091010151604051636d4c6c8960e01b815260ff909216600483015261ffff16602482015260006044820181905260648201819052608482015260a401610766565b84818151811061132157611321614cfe565b60200260200101516006826004811061133c5761133c614cfe565b601091828204019190066002026101000a81548161ffff021916908361ffff16021790555084818151811061137357611373614cfe565b602002602001015161ffff1686828151811061139157611391614cfe565b602002602001015161ffff167f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b560405160405180910390a3600101611281565b505060006007555060019392505050565b6004546000906001600160a01b031633811461143757604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b600480546001600160a01b0385167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001915050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b038216146114e857604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b6114f487878786612faf565b61153057604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610766565b6111508685856132aa565b6006816004811061154b57600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b6040517f3a660bd800000000000000000000000000000000000000000000000000000000815260ff841660048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690633a660bd8906084016020604051808303816000875af1158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c9190614e6e565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b038781166024830152604482018790529192506000918416906335bdafab906064016020604051808303816000875af11580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c79190614e51565b90506116d587878385612faf565b61171157604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610766565b6111508633846132aa565b6004546000906001600160a01b031633811461177157604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b6001600160a01b038316600081815260036020526040808220829055517f28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec9190a250600192915050565b6004546000906001600160a01b031633811461181057604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b6001600160a01b038316600081815260026020526040808220829055517fb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d9190a250600192915050565b6040517f9f6eddc400000000000000000000000000000000000000000000000000000000815260ff851660048201526001600160a01b03848116602483015260448201849052336064830152608482018390526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690639f6eddc49060a4016020604051808303816000875af1158015611900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119249190614e6e565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff891660048201526001600160a01b038089166024830152604482018890529192506119cb91899189918616906335bdafab906064015b6020604051808303816000875af11580156119a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c59190614e51565b84612faf565b611a0757604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610766565b6111508633836132aa565b6040517f3a660bd800000000000000000000000000000000000000000000000000000000815260ff841660048201526001600160a01b038381166024830152604482018390523060648301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690633a660bd8906084016020604051808303816000875af1158015611ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad59190614e6e565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b03808816602483015260448201879052919250611b3791889188918616906335bdafab90606401611982565b611b7357604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610766565b50600195945050505050565b600083815b81811015611150576000611bc7888884818110611ba357611ba3614cfe565b90506101400201878785818110611bbc57611bbc614cfe565b90506060020161435a565b9050878783818110611bdb57611bdb614cfe565b905061014002016040016020810190611bf491906149c9565b6001600160a01b0316336001600160a01b031614611c8257600f600080338b8b87818110611c2457611c24614cfe565b905061014002016040016020810190611c3d91906149c9565b604051636d4c6c8960e01b815260ff9095166004860152602485019390935260448401919091526001600160a01b03908116606484015216608482015260a401610766565b600081815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055878783818110611ccb57611ccb614cfe565b90506101400201600001357f9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a682604051611d0791815260200190565b60405180910390a250600101611b84565b6004546000906001600160a01b0316338114611d6d57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b6000611d7c6203f48042614e1c565b6001600160a01b0385166000818152600360205260409081902083905551919250907f21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d1690611dcd9084815260200190565b60405180910390a25060019392505050565b6004546000906001600160a01b0316338114611e3457604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b6000611e436203f48042614e1c565b6001600160a01b0385166000818152600260205260409081902083905551919250907fe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f90611dcd9084815260200190565b6004546000906001600160a01b0316338114611ee957604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610766565b600060078190556040517f6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e89190a1600191505090565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b6000611f82848361435a565b60008181526001602052604081205491925090611f9f9085614e1c565b90508460e00135811115611fe857604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610766565b60008281526001602052604081208054869290612006908490614e1c565b909155506000905061201e60808701606088016149c9565b905061203b813361203560608a0160408b016149c9565b8861408c565b600060e087013561205060c089013588614e87565b61205a9190614ec4565b90506120778261207060608a0160408b016149c9565b308461408c565b7f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b0382166335bdafab6120b960408c0160208d01614eff565b6120c960808d0160608e016149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008c013560448201526064016020604051808303816000875af115801561213a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215e9190614e51565b905061218a61217360408b0160208c01614eff565b61218360808c0160608d016149c9565b8386614126565b6121c657604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610766565b6001600160a01b03821663c06760c76121e560408c0160208d01614eff565b6121f560808d0160608e016149c9565b8c61010001358d604001602081019061220e91906149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a4810186905260c4016020604051808303816000875af1158015612291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b59190614e34565b6122f157604051636d4c6c8960e01b8152600860048201526000602482018190526044820181905260648201819052608482015260a401610766565b60065460009061230d90640100000000900461ffff1685614ec4565b90506001600160a01b03831663db85090161232e60408d0160208e01614eff565b61233e60808e0160608f016149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008d013560448201523360648201526084810184905260a4016020604051808303816000875af11580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e09190614e34565b61241c57604051636d4c6c8960e01b8152600a60048201526000602482018190526044820181905260648201819052608482015260a401610766565b3361242d60608c0160408d016149c9565b6001600160a01b03168b600001357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef8a8e60800160208101906124709190614f1a565b8f60a00160208101906124839190614f1a565b604080519384529115156020840152151590820152606081018e90526080810189905260a0015b60405180910390a450505050505050505050565b60006124ca848361435a565b600081815260016020526040812054919250906124e79085614e1c565b90508460c0013581111561253057604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610766565b6000828152600160205260408120805486929061254e908490614e1c565b909155506000905061256660808701606088016149c9565b9050600060c087013561257d60e089013588614e87565b6125879190614ec4565b90506125a48261259d60608a0160408b016149c9565b338461408c565b6006546000906125b89061ffff1683614ec4565b90506125cf8333306125ca858c614e1c565b61408c565b7f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b0382166335bdafab61261160408d0160208e01614eff565b61262160808e0160608f016149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008d013560448201526064016020604051808303816000875af1158015612692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b69190614e51565b90506126e26126cb60408c0160208d01614eff565b6126db60808d0160608e016149c9565b838c614126565b61271e57604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610766565b6001600160a01b03821663c06760c761273d60408d0160208e01614eff565b61274d60808e0160608f016149c9565b8d6101000135338f604001602081019061276791906149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a481018c905260c4016020604051808303816000875af11580156127eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280f9190614e34565b61241c57604051636d4c6c8960e01b8152600860048201526000602482018190526044820181905260648201819052608482015260a401610766565b6000612857848361435a565b600081815260016020526040812054919250906128749085614e1c565b90508460c001358111156128bd57604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610766565b600082815260016020526040812080548692906128db908490614e1c565b909155506000905060c08601356128f660e088013587614e87565b6129009190614ec4565b9050600061291460808801606089016149c9565b9050612935813361292b60608b0160408c016149c9565b6125ca868b614f37565b6006546000906129499061ffff1684614ec4565b90506129578233308461408c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663fcbaab2e61299660408b0160208c01614eff565b6129a660808c0160608d016149c9565b6101008c01356129bc60608e0160408f016149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a481018a905260c4016020604051808303816000875af1158015612a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a639190614e34565b612a9f57604051636d4c6c8960e01b8152600b60048201526000602482018190526044820181905260648201819052608482015260a401610766565b33612ab060608a0160408b016149c9565b6001600160a01b031689357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef88612aed60a08e0160808f01614f1a565b8d60a0016020810190612b009190614f1a565b604080519384529115156020840152151590820152606081018c90526080810188905260a0015b60405180910390a45050505050505050565b6000612b45848361435a565b60008181526001602052604081205491925090612b629085614e1c565b90508460e00135811115612bab57604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610766565b60008281526001602052604081208054869290612bc9908490614e1c565b90915550612bf99050612be260808701606088016149c9565b33612bf36060890160408a016149c9565b8761408c565b7f0000000000000000000000000000000000000000000000000000000000000000600060e0870135612c2f60c089013588614e87565b612c399190614ec4565b90506001600160a01b0382166315042ddf612c5a60408a0160208b01614eff565b612c6a60808b0160608c016149c9565b6101008b0135612c8060608d0160408e016149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a4810184905260c4016020604051808303816000875af1158015612d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d279190614e34565b612d6357604051636d4c6c8960e01b8152600c60048201526000602482018190526044820181905260648201819052608482015260a401610766565b600654600090612d7f90640100000000900461ffff1683614ec4565b90506001600160a01b03831663db850901612da060408b0160208c01614eff565b612db060808c0160608d016149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008b013560448201523360648201526084810184905260a4016020604051808303816000875af1158015612e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e529190614e34565b612e8e57604051636d4c6c8960e01b8152600a60048201526000602482018190526044820181905260648201819052608482015260a401610766565b33612e9f60608a0160408b016149c9565b6001600160a01b031689357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef88612edc60a08e0160808f01614f1a565b8d60a0016020810190612eef9190614f1a565b604080519384529115156020840152151590820152606081018c90526080810187905260a001612b27565b60006040517f095ea7b3000000000000000000000000000000000000000000000000000000006000528360045282602452602060006044600080895af13d15601f3d1160016000511416171691506000606052806040525080612fa9576040517f3e3f8f7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff861601613068576040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0384169063852a12e3906024015b6020604051808303816000875af115801561303c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130609190614e6e565b159050610c0b565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff861601613123576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390526000906001600160a01b03851690632e1a7d4d906024015b6020604051808303816000875af11580156130f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311a9190614e6e565b10159050610c0b565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff8616016131a6576005546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301526024820185905230604483015260009216906369328dec906064016130d7565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60ff861601613254576040517f441a3e7000000000000000000000000000000000000000000000000000000000815260006004820152602481018390526001600160a01b0384169063441a3e70906044015b600060405180830381600087803b15801561323357600080fd5b505af1158015613247573d6000803e3d6000fd5b5050505060019050610c0b565b6040517fb460af9400000000000000000000000000000000000000000000000000000000815260048101839052306024820181905260448201526000906001600160a01b0385169063b460af94906064016130d7565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000006000528360045282602452602060006044600080895af13d15601f3d1160016000511416171691506000606052806040525080612fa9576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613345848361435a565b600081815260016020526040812054919250906133629085614e1c565b90508460e001358111156133ab57604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610766565b600082815260016020526040812080548692906133c9908490614e1c565b90915550600090506133e160808701606088016149c9565b9050600060e08701356133f860c089013588614e87565b6134029190614ec4565b90506134238261341860608a0160408b016149c9565b336125ca8a86614f37565b60065460009061343d9062010000900461ffff1683614ec4565b905061344b8333308461408c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663fcbaab2e61348a60408b0160208c01614eff565b61349a60808c0160608d016149c9565b8b6101000135338d60400160208101906134b491906149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a4810185905260c4016020604051808303816000875af1158015613538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355c9190614e34565b61359857604051636d4c6c8960e01b8152600b60048201526000602482018190526044820181905260648201819052608482015260a401610766565b336135a960608a0160408b016149c9565b6001600160a01b031689357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd926671283488612edc60a08e0160808f01614f1a565b60006135f2848361435a565b6000818152600160205260408120549192509061360f9085614e1c565b90508460c0013581111561365857604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610766565b60008281526001602052604081208054869290613676908490614e1c565b909155506000905061368e60808701606088016149c9565b9050600060c08701356136a560e089013588614e87565b6136af9190614ec4565b90506136c58261259d60608a0160408b016149c9565b6006546000906136e3906601000000000000900461ffff1683614ec4565b90506136f18333308461408c565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166315042ddf61373060408b0160208c01614eff565b61374060808c0160608d016149c9565b8b6101000135338d604001602081019061375a91906149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a481018a905260c4016020604051808303816000875af11580156137de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138029190614e34565b61359857604051636d4c6c8960e01b8152600c60048201526000602482018190526044820181905260648201819052608482015260a401610766565b600061384a848361435a565b600081815260016020526040812054919250906138679085614e1c565b90508460c001358111156138b057604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610766565b600082815260016020526040812080548692906138ce908490614e1c565b909155507f0000000000000000000000000000000000000000000000000000000000000000905060006001600160a01b0382166335bdafab61391660408a0160208b01614eff565b61392660808b0160608c016149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008a013560448201526064016020604051808303816000875af1158015613997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139bb9190614e51565b90506139e76139d06040890160208a01614eff565b6139e060808a0160608b016149c9565b8389612faf565b613a2357604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610766565b6000613a356080890160608a016149c9565b9050600060c0890135613a4c60e08b01358a614e87565b613a569190614ec4565b9050613a7682613a6c60608c0160408d016149c9565b610f52848c614f37565b600654600090613a94906601000000000000900461ffff1683614ec4565b9050613aa58333610f528486614f37565b6001600160a01b038516630f0016b6613ac460408d0160208e01614eff565b613ad460808e0160608f016149c9565b8d61010001358e6040016020810190613aed91906149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a481018c905260c4016020604051808303816000875af1158015613b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b949190614e34565b613bd057604051636d4c6c8960e01b8152600960048201526000602482018190526044820181905260648201819052608482015260a401610766565b33613be160608c0160408d016149c9565b6001600160a01b03168b600001357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd92667128348a8e6080016020810190613c249190614f1a565b8f60a0016020810190613c379190614f1a565b604080519384529115156020840152151590820152606081018e90526080810187905260a0016124aa565b6000613c6e848361435a565b60008181526001602052604081205491925090613c8b9085614e1c565b90508460e00135811115613cd457604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610766565b60008281526001602052604081208054869290613cf2908490614e1c565b909155507f0000000000000000000000000000000000000000000000000000000000000000905060006001600160a01b0382166335bdafab613d3a60408a0160208b01614eff565b613d4a60808b0160608c016149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008a013560448201526064016020604051808303816000875af1158015613dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddf9190614e51565b9050600060e0880135613df660c08a013589614e87565b613e009190614ec4565b9050613e2c613e1560408a0160208b01614eff565b613e2560808b0160608c016149c9565b8484612faf565b613e6857604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610766565b6000613e7a60808a0160608b016149c9565b600654909150600090613e979062010000900461ffff1684614ec4565b9050613eb3823383613ea98d88614f37565b610f529190614f37565b613ecd82613ec760608d0160408e016149c9565b8b6132aa565b6001600160a01b038516630f0016b6613eec60408d0160208e01614eff565b613efc60808e0160608f016149c9565b8d6101000135338f6040016020810190613f1691906149c9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a4810186905260c4016020604051808303816000875af1158015613f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fbe9190614e34565b613ffa57604051636d4c6c8960e01b8152600960048201526000602482018190526044820181905260648201819052608482015260a401610766565b3361400b60608c0160408d016149c9565b6001600160a01b03168b600001357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd92667128348a8e608001602081019061404e9190614f1a565b8f60a00160208101906140619190614f1a565b604080519384529115156020840152151590820152606081018e90526080810188905260a0016124aa565b60006040517f23b872dd000000000000000000000000000000000000000000000000000000006000528460045283602452826044526020600060646000808a5af13d15601f3d116001600051141617169150600060605280604052508061411f576040517f7939f42400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff861601614198576040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0384169063a0712d689060240161301d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff86160161420b576040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481018390526000906001600160a01b0385169063b6b55f25906024016130d7565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff861601614294576005546040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201859052306044830152600060648301529091169063e8eda9df90608401613219565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60ff86160161430b576040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260006004820152602481018390526001600160a01b0384169063e2bbb15890604401613219565b6040517f6e553f65000000000000000000000000000000000000000000000000000000008152600481018390523060248201526000906001600160a01b03851690636e553f65906044016130d7565b600080614366846144ee565b60008181526020819052604090205490915060ff16156143b857604051636d4c6c8960e01b8152600260048201526000602482018190526044820181905260648201819052608482015260a401610766565b42846101200135101561440057604051636d4c6c8960e01b8152600360048201526101208501356024820152426044820152600060648201819052608482015260a401610766565b6040517f190100000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006002820152602281018290526042902060009061446490856145fc565b90506001600160a01b03811661448060608701604088016149c9565b6001600160a01b0316146144e65760046000806144a36060890160408a016149c9565b604051636d4c6c8960e01b815260ff9094166004850152602484019290925260448301526001600160a01b0390811660648301528216608482015260a401610766565b509392505050565b60007fbc200cfe92556575f801f821f26e6d54f6421fa132e4b2d65319cac1c687d8e682356145236040850160208601614eff565b61453360608601604087016149c9565b61454360808701606088016149c9565b61455360a0880160808901614f1a565b61456360c0890160a08a01614f1a565b60408051602081019890985287019590955260ff90931660608601526001600160a01b0391821660808601521660a0840152151560c08381019190915290151560e083810191909152908401356101008381019190915290840135610120838101919091529084013561014083015283013561016082015261018001604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a06040830135111561465c576040517f4be1c79600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6146696020830183614eff565b60ff16601b14158061468b57506146836020830183614eff565b60ff16601c14155b156146c2576040517f205db2c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001836146d26020850185614eff565b604080516000815260208181018084529490945260ff9092168282015291850135606082015290840135608082015260a0016020604051602081039080840390855afa158015614726573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151949350505050565b60008083601f84011261476857600080fd5b50813567ffffffffffffffff81111561478057600080fd5b6020830191508360206101408302850101111561479c57600080fd5b9250929050565b60008083601f8401126147b557600080fd5b50813567ffffffffffffffff8111156147cd57600080fd5b6020830191508360208260051b850101111561479c57600080fd5b60008083601f8401126147fa57600080fd5b50813567ffffffffffffffff81111561481257600080fd5b60208301915083602060608302850101111561479c57600080fd5b6000806000806000806060878903121561484657600080fd5b863567ffffffffffffffff8082111561485e57600080fd5b61486a8a838b01614756565b9098509650602089013591508082111561488357600080fd5b61488f8a838b016147a3565b909650945060408901359150808211156148a857600080fd5b506148b589828a016147e8565b979a9699509497509295939492505050565b600080600080604085870312156148dd57600080fd5b843567ffffffffffffffff808211156148f557600080fd5b614901888389016147a3565b9096509450602087013591508082111561491a57600080fd5b50614927878288016147a3565b95989497509550505050565b60006020828403121561494557600080fd5b5035919050565b803560ff8116811461495d57600080fd5b919050565b6001600160a01b038116811461497757600080fd5b50565b803561495d81614962565b6000806000806080858703121561499b57600080fd5b6149a48561494c565b935060208501356149b481614962565b93969395505050506040820135916060013590565b6000602082840312156149db57600080fd5b81356149e681614962565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715614a4057614a406149ed565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614a8d57614a8d6149ed565b604052919050565b600082601f830112614aa657600080fd5b8135602067ffffffffffffffff821115614ac257614ac26149ed565b8160051b614ad1828201614a46565b9283528481018201928281019087851115614aeb57600080fd5b83870192505b84831015614b1b57823561ffff81168114614b0c5760008081fd5b82529183019190830190614af1565b979650505050505050565b60008060408385031215614b3957600080fd5b823567ffffffffffffffff80821115614b5157600080fd5b614b5d86838701614a95565b93506020850135915080821115614b7357600080fd5b50614b8085828601614a95565b9150509250929050565b600080600080600060a08688031215614ba257600080fd5b614bab8661494c565b94506020860135614bbb81614962565b93506040860135614bcb81614962565b92506060860135614bdb81614962565b949793965091946080013592915050565b600080600060608486031215614c0157600080fd5b614c0a8461494c565b92506020840135614c1a81614962565b929592945050506040919091013590565b600060208083528351808285015260005b81811015614c5857858101830151858201604001528201614c3c565b81811115614c6a576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008060008060408587031215614cb457600080fd5b843567ffffffffffffffff80821115614ccc57600080fd5b614cd888838901614756565b90965094506020870135915080821115614cf157600080fd5b50614927878288016147e8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b801515811461497757600080fd5b803561495d81614d2d565b60006101408284031215614d5957600080fd5b614d61614a1c565b82358152614d716020840161494c565b6020820152614d826040840161497a565b6040820152614d936060840161497a565b6060820152614da460808401614d3b565b6080820152614db560a08401614d3b565b60a082015260c0838101359082015260e080840135908201526101008084013590820152610120928301359281019290925250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115614e2f57614e2f614ded565b500190565b600060208284031215614e4657600080fd5b81516149e681614d2d565b600060208284031215614e6357600080fd5b81516149e681614962565b600060208284031215614e8057600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614ebf57614ebf614ded565b500290565b600082614efa577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215614f1157600080fd5b6149e68261494c565b600060208284031215614f2c57600080fd5b81356149e681614d2d565b600082821015614f4957614f49614ded565b50039056fea2646970667358221220f0f2b0ba4b211206606e51303bbd909a09d58d8a596ee73f1139c1053397e87164736f6c634300080d0033",
}

// SwivelABI is the input ABI used to generate the binding from.
// Deprecated: Use SwivelMetaData.ABI instead.
var SwivelABI = SwivelMetaData.ABI

// SwivelBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SwivelMetaData.Bin instead.
var SwivelBin = SwivelMetaData.Bin

// DeploySwivel deploys a new Ethereum contract, binding an instance of Swivel to it.
func DeploySwivel(auth *bind.TransactOpts, backend bind.ContractBackend, m common.Address, a common.Address) (common.Address, *types.Transaction, *Swivel, error) {
	parsed, err := SwivelMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SwivelBin), backend, m, a)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// Swivel is an auto generated Go binding around an Ethereum contract.
type Swivel struct {
	SwivelCaller     // Read-only binding to the contract
	SwivelTransactor // Write-only binding to the contract
	SwivelFilterer   // Log filterer for contract events
}

// SwivelCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwivelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwivelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwivelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwivelSession struct {
	Contract     *Swivel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwivelCallerSession struct {
	Contract *SwivelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SwivelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwivelTransactorSession struct {
	Contract     *SwivelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwivelRaw struct {
	Contract *Swivel // Generic contract binding to access the raw methods on
}

// SwivelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwivelCallerRaw struct {
	Contract *SwivelCaller // Generic read-only contract binding to access the raw methods on
}

// SwivelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwivelTransactorRaw struct {
	Contract *SwivelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwivel creates a new instance of Swivel, bound to a specific deployed contract.
func NewSwivel(address common.Address, backend bind.ContractBackend) (*Swivel, error) {
	contract, err := bindSwivel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// NewSwivelCaller creates a new read-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelCaller(address common.Address, caller bind.ContractCaller) (*SwivelCaller, error) {
	contract, err := bindSwivel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelCaller{contract: contract}, nil
}

// NewSwivelTransactor creates a new write-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelTransactor(address common.Address, transactor bind.ContractTransactor) (*SwivelTransactor, error) {
	contract, err := bindSwivel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelTransactor{contract: contract}, nil
}

// NewSwivelFilterer creates a new log filterer instance of Swivel, bound to a specific deployed contract.
func NewSwivelFilterer(address common.Address, filterer bind.ContractFilterer) (*SwivelFilterer, error) {
	contract, err := bindSwivel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwivelFilterer{contract: contract}, nil
}

// bindSwivel binds a generic wrapper to an already deployed contract.
func bindSwivel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.SwivelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transact(opts, method, params...)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCaller) HOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "HOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCallerSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelCaller) MINFEENOMINATOR(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "MIN_FEENOMINATOR")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelSession) MINFEENOMINATOR() (uint16, error) {
	return _Swivel.Contract.MINFEENOMINATOR(&_Swivel.CallOpts)
}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelCallerSession) MINFEENOMINATOR() (uint16, error) {
	return _Swivel.Contract.MINFEENOMINATOR(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCaller) NAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCallerSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCallerSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelCaller) AaveAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "aaveAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelSession) AaveAddr() (common.Address, error) {
	return _Swivel.Contract.AaveAddr(&_Swivel.CallOpts)
}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelCallerSession) AaveAddr() (common.Address, error) {
	return _Swivel.Contract.AaveAddr(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCallerSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Approvals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "approvals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Approvals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Approvals(&_Swivel.CallOpts, arg0)
}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Approvals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Approvals(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCaller) Cancelled(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "cancelled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCallerSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCaller) Domain(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "domain")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCallerSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelCaller) FeeChange(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "feeChange")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelSession) FeeChange() (*big.Int, error) {
	return _Swivel.Contract.FeeChange(&_Swivel.CallOpts)
}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelCallerSession) FeeChange() (*big.Int, error) {
	return _Swivel.Contract.FeeChange(&_Swivel.CallOpts)
}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelCaller) Feenominators(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "feenominators", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelSession) Feenominators(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Feenominators(&_Swivel.CallOpts, arg0)
}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelCallerSession) Feenominators(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Feenominators(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCaller) Filled(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "filled", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCaller) MarketPlace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "marketPlace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCallerSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "withdrawals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelTransactor) ApproveUnderlying(opts *bind.TransactOpts, u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "approveUnderlying", u, c)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelSession) ApproveUnderlying(u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ApproveUnderlying(&_Swivel.TransactOpts, u, c)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) ApproveUnderlying(u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ApproveUnderlying(&_Swivel.TransactOpts, u, c)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) AuthRedeem(opts *bind.TransactOpts, p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "authRedeem", p, u, c, t, a)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelSession) AuthRedeem(p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.AuthRedeem(&_Swivel.TransactOpts, p, u, c, t, a)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) AuthRedeem(p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.AuthRedeem(&_Swivel.TransactOpts, p, u, c, t, a)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelTransactor) BlockApproval(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockApproval", e)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelSession) BlockApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockApproval(&_Swivel.TransactOpts, e)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) BlockApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockApproval(&_Swivel.TransactOpts, e)
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelTransactor) BlockFeeChange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockFeeChange")
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelSession) BlockFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.BlockFeeChange(&_Swivel.TransactOpts)
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelTransactorSession) BlockFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.BlockFeeChange(&_Swivel.TransactOpts)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactor) BlockWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockWithdrawal", e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// Cancel is a paid mutator transaction binding the contract method 0xc48d8ae9.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Cancel(opts *bind.TransactOpts, o []HashOrder, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "cancel", o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0xc48d8ae9.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Cancel(o []HashOrder, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0xc48d8ae9.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Cancel(o []HashOrder, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) CombineTokens(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "combineTokens", p, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) CombineTokens(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, p, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) CombineTokens(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, p, u, m, a)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Exit(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "exit", o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Initiate(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "initiate", o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactor) RedeemSwivelVaultInterest(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemSwivelVaultInterest", p, u, m)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelSession) RedeemSwivelVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemSwivelVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemSwivelVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemSwivelVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactor) RedeemVaultInterest(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemVaultInterest", p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) RedeemZcToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemZcToken", p, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemZcToken(&_Swivel.TransactOpts, p, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemZcToken(&_Swivel.TransactOpts, p, u, m, a)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelTransactor) ScheduleApproval(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleApproval", e)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelSession) ScheduleApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleApproval(&_Swivel.TransactOpts, e)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleApproval(&_Swivel.TransactOpts, e)
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x1177ec30.
//
// Solidity: function scheduleFeeChange() returns(bool)
func (_Swivel *SwivelTransactor) ScheduleFeeChange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleFeeChange")
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x1177ec30.
//
// Solidity: function scheduleFeeChange() returns(bool)
func (_Swivel *SwivelSession) ScheduleFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleFeeChange(&_Swivel.TransactOpts)
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x1177ec30.
//
// Solidity: function scheduleFeeChange() returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleFeeChange(&_Swivel.TransactOpts)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactor) ScheduleWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleWithdrawal", e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelTransactor) SetAdmin(opts *bind.TransactOpts, a common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "setAdmin", a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.SetAdmin(&_Swivel.TransactOpts, a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelTransactorSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.SetAdmin(&_Swivel.TransactOpts, a)
}

// SetFee is a paid mutator transaction binding the contract method 0x635452ec.
//
// Solidity: function setFee(uint16[] i, uint16[] d) returns(bool)
func (_Swivel *SwivelTransactor) SetFee(opts *bind.TransactOpts, i []uint16, d []uint16) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "setFee", i, d)
}

// SetFee is a paid mutator transaction binding the contract method 0x635452ec.
//
// Solidity: function setFee(uint16[] i, uint16[] d) returns(bool)
func (_Swivel *SwivelSession) SetFee(i []uint16, d []uint16) (*types.Transaction, error) {
	return _Swivel.Contract.SetFee(&_Swivel.TransactOpts, i, d)
}

// SetFee is a paid mutator transaction binding the contract method 0x635452ec.
//
// Solidity: function setFee(uint16[] i, uint16[] d) returns(bool)
func (_Swivel *SwivelTransactorSession) SetFee(i []uint16, d []uint16) (*types.Transaction, error) {
	return _Swivel.Contract.SetFee(&_Swivel.TransactOpts, i, d)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) SplitUnderlying(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "splitUnderlying", p, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) SplitUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, p, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) SplitUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, p, u, m, a)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelTransactor) Withdraw(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "withdraw", e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// SwivelBlockApprovalIterator is returned from FilterBlockApproval and is used to iterate over the raw logs and unpacked data for BlockApproval events raised by the Swivel contract.
type SwivelBlockApprovalIterator struct {
	Event *SwivelBlockApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockApproval represents a BlockApproval event raised by the Swivel contract.
type SwivelBlockApproval struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBlockApproval is a free log retrieval operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) FilterBlockApproval(opts *bind.FilterOpts, token []common.Address) (*SwivelBlockApprovalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelBlockApprovalIterator{contract: _Swivel.contract, event: "BlockApproval", logs: logs, sub: sub}, nil
}

// WatchBlockApproval is a free log subscription operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) WatchBlockApproval(opts *bind.WatchOpts, sink chan<- *SwivelBlockApproval, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockApproval)
				if err := _Swivel.contract.UnpackLog(event, "BlockApproval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockApproval is a log parse operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) ParseBlockApproval(log types.Log) (*SwivelBlockApproval, error) {
	event := new(SwivelBlockApproval)
	if err := _Swivel.contract.UnpackLog(event, "BlockApproval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelBlockFeeChangeIterator is returned from FilterBlockFeeChange and is used to iterate over the raw logs and unpacked data for BlockFeeChange events raised by the Swivel contract.
type SwivelBlockFeeChangeIterator struct {
	Event *SwivelBlockFeeChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockFeeChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockFeeChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockFeeChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockFeeChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockFeeChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockFeeChange represents a BlockFeeChange event raised by the Swivel contract.
type SwivelBlockFeeChange struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBlockFeeChange is a free log retrieval operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) FilterBlockFeeChange(opts *bind.FilterOpts) (*SwivelBlockFeeChangeIterator, error) {

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockFeeChange")
	if err != nil {
		return nil, err
	}
	return &SwivelBlockFeeChangeIterator{contract: _Swivel.contract, event: "BlockFeeChange", logs: logs, sub: sub}, nil
}

// WatchBlockFeeChange is a free log subscription operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) WatchBlockFeeChange(opts *bind.WatchOpts, sink chan<- *SwivelBlockFeeChange) (event.Subscription, error) {

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockFeeChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockFeeChange)
				if err := _Swivel.contract.UnpackLog(event, "BlockFeeChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockFeeChange is a log parse operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) ParseBlockFeeChange(log types.Log) (*SwivelBlockFeeChange, error) {
	event := new(SwivelBlockFeeChange)
	if err := _Swivel.contract.UnpackLog(event, "BlockFeeChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelBlockWithdrawalIterator is returned from FilterBlockWithdrawal and is used to iterate over the raw logs and unpacked data for BlockWithdrawal events raised by the Swivel contract.
type SwivelBlockWithdrawalIterator struct {
	Event *SwivelBlockWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockWithdrawal represents a BlockWithdrawal event raised by the Swivel contract.
type SwivelBlockWithdrawal struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBlockWithdrawal is a free log retrieval operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) FilterBlockWithdrawal(opts *bind.FilterOpts, token []common.Address) (*SwivelBlockWithdrawalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelBlockWithdrawalIterator{contract: _Swivel.contract, event: "BlockWithdrawal", logs: logs, sub: sub}, nil
}

// WatchBlockWithdrawal is a free log subscription operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) WatchBlockWithdrawal(opts *bind.WatchOpts, sink chan<- *SwivelBlockWithdrawal, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockWithdrawal)
				if err := _Swivel.contract.UnpackLog(event, "BlockWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockWithdrawal is a log parse operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) ParseBlockWithdrawal(log types.Log) (*SwivelBlockWithdrawal, error) {
	event := new(SwivelBlockWithdrawal)
	if err := _Swivel.contract.UnpackLog(event, "BlockWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelCancelIterator is returned from FilterCancel and is used to iterate over the raw logs and unpacked data for Cancel events raised by the Swivel contract.
type SwivelCancelIterator struct {
	Event *SwivelCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelCancel represents a Cancel event raised by the Swivel contract.
type SwivelCancel struct {
	Key  [32]byte
	Hash [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterCancel is a free log retrieval operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) FilterCancel(opts *bind.FilterOpts, key [][32]byte) (*SwivelCancelIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return &SwivelCancelIterator{contract: _Swivel.contract, event: "Cancel", logs: logs, sub: sub}, nil
}

// WatchCancel is a free log subscription operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) WatchCancel(opts *bind.WatchOpts, sink chan<- *SwivelCancel, key [][32]byte) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelCancel)
				if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancel is a log parse operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) ParseCancel(log types.Log) (*SwivelCancel, error) {
	event := new(SwivelCancel)
	if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelExitIterator is returned from FilterExit and is used to iterate over the raw logs and unpacked data for Exit events raised by the Swivel contract.
type SwivelExitIterator struct {
	Event *SwivelExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelExit represents a Exit event raised by the Swivel contract.
type SwivelExit struct {
	Key    [32]byte
	Hash   [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExit is a free log retrieval operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterExit(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelExitIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelExitIterator{contract: _Swivel.contract, event: "Exit", logs: logs, sub: sub}, nil
}

// WatchExit is a free log subscription operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchExit(opts *bind.WatchOpts, sink chan<- *SwivelExit, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelExit)
				if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExit is a log parse operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseExit(log types.Log) (*SwivelExit, error) {
	event := new(SwivelExit)
	if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelInitiateIterator is returned from FilterInitiate and is used to iterate over the raw logs and unpacked data for Initiate events raised by the Swivel contract.
type SwivelInitiateIterator struct {
	Event *SwivelInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelInitiate represents a Initiate event raised by the Swivel contract.
type SwivelInitiate struct {
	Key    [32]byte
	Hash   [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterInitiate is a free log retrieval operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterInitiate(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelInitiateIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelInitiateIterator{contract: _Swivel.contract, event: "Initiate", logs: logs, sub: sub}, nil
}

// WatchInitiate is a free log subscription operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchInitiate(opts *bind.WatchOpts, sink chan<- *SwivelInitiate, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelInitiate)
				if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiate is a log parse operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseInitiate(log types.Log) (*SwivelInitiate, error) {
	event := new(SwivelInitiate)
	if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleApprovalIterator is returned from FilterScheduleApproval and is used to iterate over the raw logs and unpacked data for ScheduleApproval events raised by the Swivel contract.
type SwivelScheduleApprovalIterator struct {
	Event *SwivelScheduleApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleApproval represents a ScheduleApproval event raised by the Swivel contract.
type SwivelScheduleApproval struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterScheduleApproval is a free log retrieval operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleApproval(opts *bind.FilterOpts, token []common.Address) (*SwivelScheduleApprovalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleApprovalIterator{contract: _Swivel.contract, event: "ScheduleApproval", logs: logs, sub: sub}, nil
}

// WatchScheduleApproval is a free log subscription operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleApproval(opts *bind.WatchOpts, sink chan<- *SwivelScheduleApproval, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleApproval)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleApproval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleApproval is a log parse operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleApproval(log types.Log) (*SwivelScheduleApproval, error) {
	event := new(SwivelScheduleApproval)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleApproval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleFeeChangeIterator is returned from FilterScheduleFeeChange and is used to iterate over the raw logs and unpacked data for ScheduleFeeChange events raised by the Swivel contract.
type SwivelScheduleFeeChangeIterator struct {
	Event *SwivelScheduleFeeChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleFeeChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleFeeChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleFeeChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleFeeChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleFeeChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleFeeChange represents a ScheduleFeeChange event raised by the Swivel contract.
type SwivelScheduleFeeChange struct {
	Hold *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterScheduleFeeChange is a free log retrieval operation binding the contract event 0xf339d7864b1b8839e8a8870c012fc6eb9a89844861a87a26ce35979018603a1b.
//
// Solidity: event ScheduleFeeChange(uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleFeeChange(opts *bind.FilterOpts) (*SwivelScheduleFeeChangeIterator, error) {

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleFeeChange")
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleFeeChangeIterator{contract: _Swivel.contract, event: "ScheduleFeeChange", logs: logs, sub: sub}, nil
}

// WatchScheduleFeeChange is a free log subscription operation binding the contract event 0xf339d7864b1b8839e8a8870c012fc6eb9a89844861a87a26ce35979018603a1b.
//
// Solidity: event ScheduleFeeChange(uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleFeeChange(opts *bind.WatchOpts, sink chan<- *SwivelScheduleFeeChange) (event.Subscription, error) {

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleFeeChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleFeeChange)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleFeeChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleFeeChange is a log parse operation binding the contract event 0xf339d7864b1b8839e8a8870c012fc6eb9a89844861a87a26ce35979018603a1b.
//
// Solidity: event ScheduleFeeChange(uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleFeeChange(log types.Log) (*SwivelScheduleFeeChange, error) {
	event := new(SwivelScheduleFeeChange)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleFeeChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleWithdrawalIterator is returned from FilterScheduleWithdrawal and is used to iterate over the raw logs and unpacked data for ScheduleWithdrawal events raised by the Swivel contract.
type SwivelScheduleWithdrawalIterator struct {
	Event *SwivelScheduleWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleWithdrawal represents a ScheduleWithdrawal event raised by the Swivel contract.
type SwivelScheduleWithdrawal struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterScheduleWithdrawal is a free log retrieval operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleWithdrawal(opts *bind.FilterOpts, token []common.Address) (*SwivelScheduleWithdrawalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleWithdrawalIterator{contract: _Swivel.contract, event: "ScheduleWithdrawal", logs: logs, sub: sub}, nil
}

// WatchScheduleWithdrawal is a free log subscription operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleWithdrawal(opts *bind.WatchOpts, sink chan<- *SwivelScheduleWithdrawal, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleWithdrawal)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleWithdrawal is a log parse operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleWithdrawal(log types.Log) (*SwivelScheduleWithdrawal, error) {
	event := new(SwivelScheduleWithdrawal)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelSetFeeIterator is returned from FilterSetFee and is used to iterate over the raw logs and unpacked data for SetFee events raised by the Swivel contract.
type SwivelSetFeeIterator struct {
	Event *SwivelSetFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelSetFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelSetFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelSetFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelSetFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelSetFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelSetFee represents a SetFee event raised by the Swivel contract.
type SwivelSetFee struct {
	Index        *big.Int
	Feenominator *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetFee is a free log retrieval operation binding the contract event 0x032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5.
//
// Solidity: event SetFee(uint256 indexed index, uint256 indexed feenominator)
func (_Swivel *SwivelFilterer) FilterSetFee(opts *bind.FilterOpts, index []*big.Int, feenominator []*big.Int) (*SwivelSetFeeIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var feenominatorRule []interface{}
	for _, feenominatorItem := range feenominator {
		feenominatorRule = append(feenominatorRule, feenominatorItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "SetFee", indexRule, feenominatorRule)
	if err != nil {
		return nil, err
	}
	return &SwivelSetFeeIterator{contract: _Swivel.contract, event: "SetFee", logs: logs, sub: sub}, nil
}

// WatchSetFee is a free log subscription operation binding the contract event 0x032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5.
//
// Solidity: event SetFee(uint256 indexed index, uint256 indexed feenominator)
func (_Swivel *SwivelFilterer) WatchSetFee(opts *bind.WatchOpts, sink chan<- *SwivelSetFee, index []*big.Int, feenominator []*big.Int) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var feenominatorRule []interface{}
	for _, feenominatorItem := range feenominator {
		feenominatorRule = append(feenominatorRule, feenominatorItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "SetFee", indexRule, feenominatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelSetFee)
				if err := _Swivel.contract.UnpackLog(event, "SetFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFee is a log parse operation binding the contract event 0x032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5.
//
// Solidity: event SetFee(uint256 indexed index, uint256 indexed feenominator)
func (_Swivel *SwivelFilterer) ParseSetFee(log types.Log) (*SwivelSetFee, error) {
	event := new(SwivelSetFee)
	if err := _Swivel.contract.UnpackLog(event, "SetFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
