// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swivel

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HashOrder is an auto generated low-level Go binding around an user-defined struct.
type HashOrder struct {
	Key        [32]byte
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// SigComponents is an auto generated low-level Go binding around an user-defined struct.
type SigComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelABI is the input ABI used to generate the binding from.
const SwivelABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components\",\"name\":\"c\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlaceAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SwivelBin is the compiled bytecode used for deploying new contracts.
var SwivelBin = "0x60806040523480156200001157600080fd5b5060405162004a1238038062004a128339818101604052810190620000379190620001bf565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000fb6040518060400160405280600e81526020017f53776976656c2046696e616e63650000000000000000000000000000000000008152506040518060400160405280600581526020017f322e302e3000000000000000000000000000000000000000000000000000000081525046306200014960201b62000d701760201c565b60008190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000239565b600084516020860120845160208601206040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815282602082015281604082015285606082015284608082015260a081209350505050949350505050565b600081519050620001b9816200021f565b92915050565b600060208284031215620001d257600080fd5b6000620001e284828501620001a8565b91505092915050565b6000620001f882620001ff565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200022a81620001eb565b81146200023657600080fd5b50565b6147c980620002496000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a3f4df7e11610066578063a3f4df7e1461016f578063aba287011461018d578063d2144f58146101bd578063f851a440146101ed578063ffa1ad741461020b5761009e565b8063288cdc91146100a35780632ac12622146100d35780633e1608b41461010357806352a9674b1461013357806373342d7914610151575b600080fd5b6100bd60048036038101906100b89190613b20565b610229565b6040516100ca919061448a565b60405180910390f35b6100ed60048036038101906100e89190613b20565b610241565b6040516100fa9190614151565b60405180910390f35b61011d60048036038101906101189190613b49565b610261565b60405161012a9190614151565b60405180910390f35b61013b61036a565b604051610148919061416c565b60405180910390f35b610159610370565b6040516101669190614083565b60405180910390f35b610177610396565b6040516101849190614268565b60405180910390f35b6101a760048036038101906101a29190613a2a565b6103cf565b6040516101b49190614151565b60405180910390f35b6101d760048036038101906101d29190613a2a565b610870565b6040516101e49190614151565b60405180910390f35b6101f5610d11565b6040516102029190614083565b60405180910390f35b610213610d37565b6040516102209190614268565b60405180910390f35b60046020528060005260406000206000915090505481565b60036020528060005260406000206000915054906101000a900460ff1681565b600061028061027a60005461027586610dcf565b610e91565b83610ed2565b73ffffffffffffffffffffffffffffffffffffffff168360200160208101906102a991906139d8565b73ffffffffffffffffffffffffffffffffffffffff16146102ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f69061428a565b60405180910390fd5b6001600360008560000135815260200190815260200160002060006101000a81548160ff02191690831515021790555082600001357fe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a60405160405180910390a26001905092915050565b60005481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600e81526020017f53776976656c2046696e616e636500000000000000000000000000000000000081525081565b600080600090505b87879050811015610861576000151588888381811061041f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020160800160208101906104389190613ace565b15151415610649576000151588888381811061047d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020160600160208101906104969190613ace565b15151415610573576105658888838181106104da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020187878481811061051a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013586868581811061055a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201611027565b61056e57600080fd5b610644565b61063a8888838181106105af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905061012002018787848181106105ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013586868581811061062f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201611481565b61064357600080fd5b5b61084e565b60001515888883818110610686577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201606001602081019061069f9190613ace565b1515141561077c5761076e8888838181106106e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201878784818110610723577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110610763577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050606002016118d0565b61077757600080fd5b61084d565b6108438888838181106107b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905061012002018787848181106107f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110610838577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201611f7e565b61084c57600080fd5b5b5b808061085990614668565b9150506103d7565b50600190509695505050505050565b600080600090505b87879050811015610d0257600015158888838181106108c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020160800160208101906108d99190613ace565b15151415610aea576000151588888381811061091e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050610120020160600160208101906109379190613ace565b15151415610a1457610a0688888381811061097b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905061012002018787848181106109bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358686858181106109fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050606002016120de565b610a0f57600080fd5b610ae5565b610adb888883818110610a50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201878784818110610a90577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110610ad0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506060020161285a565b610ae457600080fd5b5b610cef565b60001515888883818110610b27577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905061012002016060016020810190610b409190613ace565b15151415610c1d57610c0f888883818110610b84577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201878784818110610bc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110610c04577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060600201612f86565b610c1857600080fd5b610cee565b610ce4888883818110610c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506101200201878784818110610c99577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868685818110610cd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050606002016133e0565b610ced57600080fd5b5b5b8080610cfa90614668565b915050610878565b50600190509695505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600581526020017f322e302e3000000000000000000000000000000000000000000000000000000081525081565b600084516020860120845160208601206040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815282602082015281604082015285606082015284608082015260a081209350505050949350505050565b60007f7ddd38ab5ed1c16b61ca90eeb9579e29da1ba821cf42d8cdef8f30a31a6a414660001b8260000135836020016020810190610e0d91906139d8565b846040016020810190610e2091906139d8565b856060016020810190610e339190613ace565b866080016020810190610e469190613ace565b8760a001358860c001358960e001358a6101000135604051602001610e749a99989796959493929190614187565b604051602081830303815290604052805190602001209050919050565b60006040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0826040013560001c1115610f3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f359061444a565b60405180910390fd5b601b826000016020810190610f539190613bb0565b60ff161480610f775750601c826000016020810190610f729190613bb0565b60ff16145b610fb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fad9061436a565b60405180910390fd5b600183836000016020810190610fcc9190613bb0565b8460200135856040013560405160008152602001604052604051610ff39493929190614223565b6020604051602081039080840390855afa158015611015573d6000803e3d6000fd5b50505060206040510351905092915050565b6000838260001515600360008460000135815260200190815260200160002060009054906101000a900460ff16151514611096576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108d906142ea565b60405180910390fd5b4282610100013510156110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d5906142aa565b60405180910390fd5b6110fb6110f56000546110f085610dcf565b610e91565b82610ed2565b73ffffffffffffffffffffffffffffffffffffffff1682602001602081019061112491906139d8565b73ffffffffffffffffffffffffffffffffffffffff161461117a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111719061428a565b60405180910390fd5b6004600087600001358152602001908152602001600020548660c001356111a191906145a2565b8511156111e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111da9061432a565b60405180910390fd5b6000670de0b6b3a76400008760a001358860c00135670de0b6b3a76400008961120c9190614548565b6112169190614517565b6112209190614548565b61122a9190614517565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c129a1c288604001602081019061127d91906139d8565b8960e001358a602001602081019061129591906139d8565b33866040518663ffffffff1660e01b81526004016112b79594939291906140fe565b602060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113099190613af7565b611348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133f906142ca565b60405180910390fd5b86604001602081019061135b91906139d8565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd88602001602081019061138991906139d8565b33898561139691906145a2565b6040518463ffffffff1660e01b81526004016113b49392919061409e565b602060405180830381600087803b1580156113ce57600080fd5b505af11580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190613af7565b611445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143c906143ca565b60405180910390fd5b856004600089600001358152602001908152602001600020600082825461146c91906144c1565b92505081905550600193505050509392505050565b6000838260001515600360008460000135815260200190815260200160002060009054906101000a900460ff161515146114f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e7906142ea565b60405180910390fd5b428261010001351015611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152f906142aa565b60405180910390fd5b61155561154f60005461154a85610dcf565b610e91565b82610ed2565b73ffffffffffffffffffffffffffffffffffffffff1682602001602081019061157e91906139d8565b73ffffffffffffffffffffffffffffffffffffffff16146115d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cb9061428a565b60405180910390fd5b6004600087600001358152602001908152602001600020548660a001356115fb91906145a2565b85111561163d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116349061432a565b60405180910390fd5b6000670de0b6b3a76400008760c001358860a00135670de0b6b3a7640000896116669190614548565b6116709190614517565b61167a9190614548565b6116849190614517565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb1a0f588860400160208101906116d791906139d8565b8960e001358a60200160208101906116ef91906139d8565b338b6040518663ffffffff1660e01b81526004016117119594939291906140fe565b602060405180830381600087803b15801561172b57600080fd5b505af115801561173f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117639190613af7565b6117a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117999061434a565b60405180910390fd5b8660400160208101906117b591906139d8565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd8860200160208101906117e391906139d8565b33846040518463ffffffff1660e01b81526004016118039392919061409e565b602060405180830381600087803b15801561181d57600080fd5b505af1158015611831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118559190613af7565b611894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188b906143ea565b60405180910390fd5b85600460008960000135815260200190815260200160002060008282546118bb91906144c1565b92505081905550600193505050509392505050565b6000838260001515600360008460000135815260200190815260200160002060009054906101000a900460ff1615151461193f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611936906142ea565b60405180910390fd5b428261010001351015611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197e906142aa565b60405180910390fd5b6119a461199e60005461199985610dcf565b610e91565b82610ed2565b73ffffffffffffffffffffffffffffffffffffffff168260200160208101906119cd91906139d8565b73ffffffffffffffffffffffffffffffffffffffff1614611a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1a9061428a565b60405180910390fd5b6004600087600001358152602001908152602001600020548660a00135611a4a91906145a2565b851115611a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a839061432a565b60405180910390fd5b6000670de0b6b3a76400008760c001358860a00135670de0b6b3a764000089611ab59190614548565b611abf9190614517565b611ac99190614548565b611ad39190614517565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166305e1dc258a6040016020810190611b2d91906139d8565b8b60e001356040518363ffffffff1660e01b8152600401611b4f9291906140d5565b602060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba19190613a01565b90508173ffffffffffffffffffffffffffffffffffffffff16633a5e2b758a6040016020810190611bd291906139d8565b8b60e001358c6020016020810190611bea91906139d8565b338d6040518663ffffffff1660e01b8152600401611c0c9594939291906140fe565b602060405180830381600087803b158015611c2657600080fd5b505af1158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613af7565b611c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c949061434a565b60405180910390fd5b6000896040016020810190611cb291906139d8565b90508073ffffffffffffffffffffffffffffffffffffffff166323b872dd8b6020016020810190611ce391906139d8565b33876040518463ffffffff1660e01b8152600401611d039392919061409e565b602060405180830381600087803b158015611d1d57600080fd5b505af1158015611d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d559190613af7565b611d94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8b906143ea565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663852a12e38b6040518263ffffffff1660e01b8152600401611dcf919061448a565b602060405180830381600087803b158015611de957600080fd5b505af1158015611dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e219190613b87565b14611e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e589061430a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b6020016020810190611e9091906139d8565b8b6040518363ffffffff1660e01b8152600401611eae9291906140d5565b602060405180830381600087803b158015611ec857600080fd5b505af1158015611edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f009190613af7565b611f3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f36906143ea565b60405180910390fd5b88600460008c6000013581526020019081526020016000206000828254611f6691906144c1565b92505081905550600196505050505050509392505050565b6000838260001515600360008460000135815260200190815260200160002060009054906101000a900460ff16151514611fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe4906142ea565b60405180910390fd5b428261010001351015612035576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202c906142aa565b60405180910390fd5b61205261204c60005461204785610dcf565b610e91565b82610ed2565b73ffffffffffffffffffffffffffffffffffffffff1682602001602081019061207b91906139d8565b73ffffffffffffffffffffffffffffffffffffffff16146120d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c89061428a565b60405180910390fd5b6001925050509392505050565b6000838260001515600360008460000135815260200190815260200160002060009054906101000a900460ff1615151461214d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612144906142ea565b60405180910390fd5b428261010001351015612195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218c906142aa565b60405180910390fd5b6121b26121ac6000546121a785610dcf565b610e91565b82610ed2565b73ffffffffffffffffffffffffffffffffffffffff168260200160208101906121db91906139d8565b73ffffffffffffffffffffffffffffffffffffffff1614612231576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122289061428a565b60405180910390fd5b6004600087600001358152602001908152602001600020548660c0013561225891906145a2565b85111561229a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122919061432a565b60405180910390fd5b6000670de0b6b3a76400008760a001358860c00135670de0b6b3a7640000896122c39190614548565b6122cd9190614517565b6122d79190614548565b6122e19190614517565b905060008760400160208101906122f891906139d8565b90508073ffffffffffffffffffffffffffffffffffffffff166323b872dd338a602001602081019061232a91906139d8565b8a6040518463ffffffff1660e01b81526004016123499392919061409e565b602060405180830381600087803b15801561236357600080fd5b505af1158015612377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239b9190613af7565b6123da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d1906143ca565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd89602001602081019061240991906139d8565b30856040518463ffffffff1660e01b81526004016124299392919061409e565b602060405180830381600087803b15801561244357600080fd5b505af1158015612457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247b9190613af7565b6124ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b1906143ea565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166305e1dc258b604001602081019061251291906139d8565b8c60e001356040518363ffffffff1660e01b81526004016125349291906140d5565b602060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125869190613a01565b90508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b382866040518363ffffffff1660e01b81526004016125c39291906140d5565b602060405180830381600087803b1580156125dd57600080fd5b505af11580156125f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126159190613af7565b612654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264b9061440a565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68866040518263ffffffff1660e01b815260040161268f919061448a565b602060405180830381600087803b1580156126a957600080fd5b505af11580156126bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e19190613b87565b14612721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612718906143aa565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663f3d9b9848b604001602081019061275091906139d8565b8c60e001358d602001602081019061276891906139d8565b33896040518663ffffffff1660e01b815260040161278a9594939291906140fe565b602060405180830381600087803b1580156127a457600080fd5b505af11580156127b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dc9190613af7565b61281b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128129061438a565b60405180910390fd5b88600460008c600001358152602001908152602001600020600082825461284291906144c1565b92505081905550600196505050505050509392505050565b6000838260001515600360008460000135815260200190815260200160002060009054906101000a900460ff161515146128c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c0906142ea565b60405180910390fd5b428261010001351015612911576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612908906142aa565b60405180910390fd5b61292e61292860005461292385610dcf565b610e91565b82610ed2565b73ffffffffffffffffffffffffffffffffffffffff1682602001602081019061295791906139d8565b73ffffffffffffffffffffffffffffffffffffffff16146129ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a49061428a565b60405180910390fd5b6004600087600001358152602001908152602001600020548660a001356129d491906145a2565b851115612a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0d9061432a565b60405180910390fd5b6000670de0b6b3a76400008760c001358860a00135670de0b6b3a764000089612a3f9190614548565b612a499190614517565b612a539190614548565b612a5d9190614517565b90506000876040016020810190612a7491906139d8565b90508073ffffffffffffffffffffffffffffffffffffffff166323b872dd896020016020810190612aa591906139d8565b33856040518463ffffffff1660e01b8152600401612ac59392919061409e565b602060405180830381600087803b158015612adf57600080fd5b505af1158015612af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b179190613af7565b612b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4d9061442a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401612b939392919061409e565b602060405180830381600087803b158015612bad57600080fd5b505af1158015612bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be59190613af7565b612c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1b906143ea565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166305e1dc258b6040016020810190612c7c91906139d8565b8c60e001356040518363ffffffff1660e01b8152600401612c9e9291906140d5565b602060405180830381600087803b158015612cb857600080fd5b505af1158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190613a01565b90508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b3828b6040518363ffffffff1660e01b8152600401612d2d9291906140d5565b602060405180830381600087803b158015612d4757600080fd5b505af1158015612d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7f9190613af7565b5060008173ffffffffffffffffffffffffffffffffffffffff1663a0712d688b6040518263ffffffff1660e01b8152600401612dbb919061448a565b602060405180830381600087803b158015612dd557600080fd5b505af1158015612de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0d9190613b87565b14612e4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e449061446a565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663f3d9b9848b6040016020810190612e7c91906139d8565b8c60e001358d6020016020810190612e9491906139d8565b338e6040518663ffffffff1660e01b8152600401612eb69594939291906140fe565b602060405180830381600087803b158015612ed057600080fd5b505af1158015612ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f089190613af7565b612f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f3e9061438a565b60405180910390fd5b88600460008c6000013581526020019081526020016000206000828254612f6e91906144c1565b92505081905550600196505050505050509392505050565b6000838260001515600360008460000135815260200190815260200160002060009054906101000a900460ff16151514612ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fec906142ea565b60405180910390fd5b42826101000135101561303d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613034906142aa565b60405180910390fd5b61305a61305460005461304f85610dcf565b610e91565b82610ed2565b73ffffffffffffffffffffffffffffffffffffffff1682602001602081019061308391906139d8565b73ffffffffffffffffffffffffffffffffffffffff16146130d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130d09061428a565b60405180910390fd5b6004600087600001358152602001908152602001600020548660a0013561310091906145a2565b851115613142576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131399061432a565b60405180910390fd5b6000670de0b6b3a76400008760c001358860a00135670de0b6b3a76400008961316b9190614548565b6131759190614517565b61317f9190614548565b6131899190614517565b905086604001602081019061319e91906139d8565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd338960200160208101906131cd91906139d8565b848a6131d991906145a2565b6040518463ffffffff1660e01b81526004016131f79392919061409e565b602060405180830381600087803b15801561321157600080fd5b505af1158015613225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132499190613af7565b613288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161327f906143ea565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c129a1c28860400160208101906132d991906139d8565b8960e001358a60200160208101906132f191906139d8565b338b6040518663ffffffff1660e01b81526004016133139594939291906140fe565b602060405180830381600087803b15801561332d57600080fd5b505af1158015613341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133659190613af7565b6133a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161339b906142ca565b60405180910390fd5b85600460008960000135815260200190815260200160002060008282546133cb91906144c1565b92505081905550600193505050509392505050565b6000838260001515600360008460000135815260200190815260200160002060009054906101000a900460ff1615151461344f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613446906142ea565b60405180910390fd5b428261010001351015613497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161348e906142aa565b60405180910390fd5b6134b46134ae6000546134a985610dcf565b610e91565b82610ed2565b73ffffffffffffffffffffffffffffffffffffffff168260200160208101906134dd91906139d8565b73ffffffffffffffffffffffffffffffffffffffff1614613533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161352a9061428a565b60405180910390fd5b6004600087600001358152602001908152602001600020548660c0013561355a91906145a2565b85111561359c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135939061432a565b60405180910390fd5b6000670de0b6b3a76400008760a001358860c00135670de0b6b3a7640000896135c59190614548565b6135cf9190614517565b6135d99190614548565b6135e39190614517565b90508660400160208101906135f891906139d8565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3389602001602081019061362791906139d8565b896040518463ffffffff1660e01b81526004016136469392919061409e565b602060405180830381600087803b15801561366057600080fd5b505af1158015613674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136989190613af7565b6136d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136ce906143ca565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb1a0f5888604001602081019061372891906139d8565b8960e001358a602001602081019061374091906139d8565b33866040518663ffffffff1660e01b81526004016137629594939291906140fe565b602060405180830381600087803b15801561377c57600080fd5b505af1158015613790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b49190613af7565b6137f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137ea9061434a565b60405180910390fd5b856004600089600001358152602001908152602001600020600082825461381a91906144c1565b92505081905550600193505050509392505050565b60008135905061383e81614720565b92915050565b60008151905061385381614720565b92915050565b60008083601f84011261386b57600080fd5b8235905067ffffffffffffffff81111561388457600080fd5b60208301915083606082028301111561389c57600080fd5b9250929050565b60008083601f8401126138b557600080fd5b8235905067ffffffffffffffff8111156138ce57600080fd5b602083019150836101208202830111156138e757600080fd5b9250929050565b60008083601f84011261390057600080fd5b8235905067ffffffffffffffff81111561391957600080fd5b60208301915083602082028301111561393157600080fd5b9250929050565b60008135905061394781614737565b92915050565b60008151905061395c81614737565b92915050565b6000813590506139718161474e565b92915050565b60006060828403121561398957600080fd5b81905092915050565b600061012082840312156139a557600080fd5b81905092915050565b6000815190506139bd81614765565b92915050565b6000813590506139d28161477c565b92915050565b6000602082840312156139ea57600080fd5b60006139f88482850161382f565b91505092915050565b600060208284031215613a1357600080fd5b6000613a2184828501613844565b91505092915050565b60008060008060008060608789031215613a4357600080fd5b600087013567ffffffffffffffff811115613a5d57600080fd5b613a6989828a016138a3565b9650965050602087013567ffffffffffffffff811115613a8857600080fd5b613a9489828a016138ee565b9450945050604087013567ffffffffffffffff811115613ab357600080fd5b613abf89828a01613859565b92509250509295509295509295565b600060208284031215613ae057600080fd5b6000613aee84828501613938565b91505092915050565b600060208284031215613b0957600080fd5b6000613b178482850161394d565b91505092915050565b600060208284031215613b3257600080fd5b6000613b4084828501613962565b91505092915050565b6000806101808385031215613b5d57600080fd5b6000613b6b85828601613992565b925050610120613b7d85828601613977565b9150509250929050565b600060208284031215613b9957600080fd5b6000613ba7848285016139ae565b91505092915050565b600060208284031215613bc257600080fd5b6000613bd0848285016139c3565b91505092915050565b613be2816145d6565b82525050565b613bf1816145e8565b82525050565b613c00816145f4565b82525050565b6000613c11826144a5565b613c1b81856144b0565b9350613c2b818560208601614635565b613c348161470f565b840191505092915050565b6000613c4c6011836144b0565b91507f696e76616c6964207369676e61747572650000000000000000000000000000006000830152602082019050919050565b6000613c8c600d836144b0565b91507f6f726465722065787069726564000000000000000000000000000000000000006000830152602082019050919050565b6000613ccc6017836144b0565b91507f5a43546f6b656e207472616e73666572206661696c65640000000000000000006000830152602082019050919050565b6000613d0c600f836144b0565b91507f6f726465722063616e63656c6c656400000000000000000000000000000000006000830152602082019050919050565b6000613d4c6019836144b0565b91507f636f6d706f756e6420726564656d7074696f6e206572726f72000000000000006000830152602082019050919050565b6000613d8c601f836144b0565b91507f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006000830152602082019050919050565b6000613dcc6018836144b0565b91507f6e6f74696f6e616c207472616e73666572206661696c656400000000000000006000830152602082019050919050565b6000613e0c601b836144b0565b91507f696e76616c6964207369676e6174757265202276222076616c756500000000006000830152602082019050919050565b6000613e4c6016836144b0565b91507f6d696e74696e67205a43546f6b656e206661696c6564000000000000000000006000830152602082019050919050565b6000613e8c6015836144b0565b91507f6d696e74696e672043546f6b656e206661696c656400000000000000000000006000830152602082019050919050565b6000613ecc6017836144b0565b91507f7072656d69756d207472616e73666572206661696c65640000000000000000006000830152602082019050919050565b6000613f0c6019836144b0565b91507f7072696e636970616c207472616e73666572206661696c6564000000000000006000830152602082019050919050565b6000613f4c6024836144b0565b91507f756e6465726c79696e6720617070726f76616c2061742043546f6b656e20666160008301527f696c6564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613fb26018836144b0565b91507f696e746572657374207472616e73666572206661696c656400000000000000006000830152602082019050919050565b6000613ff2601b836144b0565b91507f696e76616c6964207369676e6174757265202273222076616c756500000000006000830152602082019050919050565b60006140326015836144b0565b91507f6d696e74696e672043546f6b656e204661696c656400000000000000000000006000830152602082019050919050565b61406e8161461e565b82525050565b61407d81614628565b82525050565b60006020820190506140986000830184613bd9565b92915050565b60006060820190506140b36000830186613bd9565b6140c06020830185613bd9565b6140cd6040830184614065565b949350505050565b60006040820190506140ea6000830185613bd9565b6140f76020830184614065565b9392505050565b600060a0820190506141136000830188613bd9565b6141206020830187614065565b61412d6040830186613bd9565b61413a6060830185613bd9565b6141476080830184614065565b9695505050505050565b60006020820190506141666000830184613be8565b92915050565b60006020820190506141816000830184613bf7565b92915050565b60006101408201905061419d600083018d613bf7565b6141aa602083018c613bf7565b6141b7604083018b613bd9565b6141c4606083018a613bd9565b6141d16080830189613be8565b6141de60a0830188613be8565b6141eb60c0830187614065565b6141f860e0830186614065565b614206610100830185614065565b614214610120830184614065565b9b9a5050505050505050505050565b60006080820190506142386000830187613bf7565b6142456020830186614074565b6142526040830185613bf7565b61425f6060830184613bf7565b95945050505050565b600060208201905081810360008301526142828184613c06565b905092915050565b600060208201905081810360008301526142a381613c3f565b9050919050565b600060208201905081810360008301526142c381613c7f565b9050919050565b600060208201905081810360008301526142e381613cbf565b9050919050565b6000602082019050818103600083015261430381613cff565b9050919050565b6000602082019050818103600083015261432381613d3f565b9050919050565b6000602082019050818103600083015261434381613d7f565b9050919050565b6000602082019050818103600083015261436381613dbf565b9050919050565b6000602082019050818103600083015261438381613dff565b9050919050565b600060208201905081810360008301526143a381613e3f565b9050919050565b600060208201905081810360008301526143c381613e7f565b9050919050565b600060208201905081810360008301526143e381613ebf565b9050919050565b6000602082019050818103600083015261440381613eff565b9050919050565b6000602082019050818103600083015261442381613f3f565b9050919050565b6000602082019050818103600083015261444381613fa5565b9050919050565b6000602082019050818103600083015261446381613fe5565b9050919050565b6000602082019050818103600083015261448381614025565b9050919050565b600060208201905061449f6000830184614065565b92915050565b600081519050919050565b600082825260208201905092915050565b60006144cc8261461e565b91506144d78361461e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561450c5761450b6146b1565b5b828201905092915050565b60006145228261461e565b915061452d8361461e565b92508261453d5761453c6146e0565b5b828204905092915050565b60006145538261461e565b915061455e8361461e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614597576145966146b1565b5b828202905092915050565b60006145ad8261461e565b91506145b88361461e565b9250828210156145cb576145ca6146b1565b5b828203905092915050565b60006145e1826145fe565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015614653578082015181840152602081019050614638565b83811115614662576000848401525b50505050565b60006146738261461e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156146a6576146a56146b1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b614729816145d6565b811461473457600080fd5b50565b614740816145e8565b811461474b57600080fd5b50565b614757816145f4565b811461476257600080fd5b50565b61476e8161461e565b811461477957600080fd5b50565b61478581614628565b811461479057600080fd5b5056fea264697066735822122047b8811212a34e7ec11a4e5f825134c8536c6c4456602319a0334f779e5abe4464736f6c63430008000033"

// DeploySwivel deploys a new Ethereum contract, binding an instance of Swivel to it.
func DeploySwivel(auth *bind.TransactOpts, backend bind.ContractBackend, m common.Address) (common.Address, *types.Transaction, *Swivel, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SwivelBin), backend, m)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// Swivel is an auto generated Go binding around an Ethereum contract.
type Swivel struct {
	SwivelCaller     // Read-only binding to the contract
	SwivelTransactor // Write-only binding to the contract
	SwivelFilterer   // Log filterer for contract events
}

// SwivelCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwivelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwivelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwivelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwivelSession struct {
	Contract     *Swivel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwivelCallerSession struct {
	Contract *SwivelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SwivelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwivelTransactorSession struct {
	Contract     *SwivelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwivelRaw struct {
	Contract *Swivel // Generic contract binding to access the raw methods on
}

// SwivelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwivelCallerRaw struct {
	Contract *SwivelCaller // Generic read-only contract binding to access the raw methods on
}

// SwivelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwivelTransactorRaw struct {
	Contract *SwivelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwivel creates a new instance of Swivel, bound to a specific deployed contract.
func NewSwivel(address common.Address, backend bind.ContractBackend) (*Swivel, error) {
	contract, err := bindSwivel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// NewSwivelCaller creates a new read-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelCaller(address common.Address, caller bind.ContractCaller) (*SwivelCaller, error) {
	contract, err := bindSwivel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelCaller{contract: contract}, nil
}

// NewSwivelTransactor creates a new write-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelTransactor(address common.Address, transactor bind.ContractTransactor) (*SwivelTransactor, error) {
	contract, err := bindSwivel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelTransactor{contract: contract}, nil
}

// NewSwivelFilterer creates a new log filterer instance of Swivel, bound to a specific deployed contract.
func NewSwivelFilterer(address common.Address, filterer bind.ContractFilterer) (*SwivelFilterer, error) {
	contract, err := bindSwivel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwivelFilterer{contract: contract}, nil
}

// bindSwivel binds a generic wrapper to an already deployed contract.
func bindSwivel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.SwivelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transact(opts, method, params...)
}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelCaller) DOMAIN(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "DOMAIN")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelSession) DOMAIN() ([32]byte, error) {
	return _Swivel.Contract.DOMAIN(&_Swivel.CallOpts)
}

// DOMAIN is a free data retrieval call binding the contract method 0x52a9674b.
//
// Solidity: function DOMAIN() view returns(bytes32)
func (_Swivel *SwivelCallerSession) DOMAIN() ([32]byte, error) {
	return _Swivel.Contract.DOMAIN(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCaller) NAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCallerSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCallerSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCallerSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCaller) Cancelled(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "cancelled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCallerSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCaller) Filled(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "filled", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// MarketPlaceAddr is a free data retrieval call binding the contract method 0x73342d79.
//
// Solidity: function marketPlaceAddr() view returns(address)
func (_Swivel *SwivelCaller) MarketPlaceAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "marketPlaceAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketPlaceAddr is a free data retrieval call binding the contract method 0x73342d79.
//
// Solidity: function marketPlaceAddr() view returns(address)
func (_Swivel *SwivelSession) MarketPlaceAddr() (common.Address, error) {
	return _Swivel.Contract.MarketPlaceAddr(&_Swivel.CallOpts)
}

// MarketPlaceAddr is a free data retrieval call binding the contract method 0x73342d79.
//
// Solidity: function marketPlaceAddr() view returns(address)
func (_Swivel *SwivelCallerSession) MarketPlaceAddr() (common.Address, error) {
	return _Swivel.Contract.MarketPlaceAddr(&_Swivel.CallOpts)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactor) Cancel(opts *bind.TransactOpts, o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "cancel", o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0x3e1608b4.
//
// Solidity: function cancel((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactorSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Exit(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "exit", o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0xaba28701.
//
// Solidity: function exit((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Initiate(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "initiate", o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0xd2144f58.
//
// Solidity: function initiate((bytes32,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// SwivelCancelIterator is returned from FilterCancel and is used to iterate over the raw logs and unpacked data for Cancel events raised by the Swivel contract.
type SwivelCancelIterator struct {
	Event *SwivelCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelCancel represents a Cancel event raised by the Swivel contract.
type SwivelCancel struct {
	Key [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCancel is a free log retrieval operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) FilterCancel(opts *bind.FilterOpts, key [][32]byte) (*SwivelCancelIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return &SwivelCancelIterator{contract: _Swivel.contract, event: "Cancel", logs: logs, sub: sub}, nil
}

// WatchCancel is a free log subscription operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) WatchCancel(opts *bind.WatchOpts, sink chan<- *SwivelCancel, key [][32]byte) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelCancel)
				if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancel is a log parse operation binding the contract event 0xe8d9861dbc9c663ed3accd261bbe2fe01e0d3d9e5f51fa38523b265c7757a93a.
//
// Solidity: event Cancel(bytes32 indexed key)
func (_Swivel *SwivelFilterer) ParseCancel(log types.Log) (*SwivelCancel, error) {
	event := new(SwivelCancel)
	if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
