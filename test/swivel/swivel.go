// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swivel

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HashOrder is an auto generated low-level Go binding around an user-defined struct.
type HashOrder struct {
	Key        [32]byte
	Protocol   uint8
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// SigComponents is an auto generated low-level Go binding around an user-defined struct.
type SigComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelMetaData contains all meta data concerning the Swivel contract.
var SwivelMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Exception\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"S\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"V\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlockApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BlockFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlockWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Initiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[4]\",\"name\":\"proposal\",\"type\":\"uint16[4]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"u\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"c\",\"type\":\"address[]\"}],\"name\":\"approveUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"authRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockFeeChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[4]\",\"name\":\"f\",\"type\":\"uint16[4]\"}],\"name\":\"changeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"combineTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feenominators\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemSwivelVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"redeemZcToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[4]\",\"name\":\"f\",\"type\":\"uint16[4]\"}],\"name\":\"scheduleFeeChange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"splitUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x61016060405260c860e08181526102586101005261019061012052610140919091526200003190600690600462000141565b503480156200003f57600080fd5b50604051620051a6380380620051a6833981016040819052620000629162000212565b600580546001600160a01b03191633178155604080518082018252600e81526d53776976656c2046696e616e636560901b6020808301919091528251808401909352928252640332e302e360dc1b82840152620000cf929091904690309062001ff1620000ea821b17901c565b6080526001600160a01b0391821660a0521660c0526200024a565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b600183019183908215620001cc5791602002820160005b838211156200019a57835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262000158565b8015620001ca5782816101000a81549061ffff02191690556002016020816001010492830192600103026200019a565b505b50620001da929150620001de565b5090565b5b80821115620001da5760008155600101620001df565b80516001600160a01b03811681146200020d57600080fd5b919050565b600080604083850312156200022657600080fd5b6200023183620001f5565b91506200024160208401620001f5565b90509250929050565b60805160a05160c051614eb5620002f1600039600081816103dc01528181613371015261446b0152600081816102e201528181610e47015281816113d0015281816116e50152818161182501528181611b1d01528181611cce0152818161213601528181612679015281816129f401528181612c7b015281816136840152818161391501528181613ae00152613ef40152600081816104d1015261462e0152614eb56000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c80637a9262a21161012a578063b16a33cc116100bd578063f22c692e1161008c578063f8eaad3511610071578063f8eaad3514610523578063f9ad473d14610536578063ffa1ad741461053e57600080fd5b8063f22c692e146104fd578063f851a4401461051057600080fd5b8063b16a33cc146104a6578063b6907677146104b9578063c2fb26a6146104cc578063d0886f97146104f357600080fd5b8063a0b06b50116100f9578063a0b06b5014610424578063a0e8055414610437578063a102e3841461044a578063a3f4df7e1461045d57600080fd5b80637a9262a2146103b757806381bb8d63146103d75780638bfa66be146103fe57806395cb60c41461041157600080fd5b80632fd9ee8a116101a257806352a4eec61161017157806352a4eec61461035e5780635d0341ba14610371578063704b6c0214610391578063761a7e70146103a457600080fd5b80632fd9ee8a1461031c57806335197f9e1461032f5780634af606071461033857806351cff8d91461034b57600080fd5b806325dedb85116101de57806325dedb8514610279578063288cdc911461028c5780632ac12622146102ba5780632e25d2a6146102dd57600080fd5b80630d3f53521461021057806310510f111461023057806312a444fa14610253578063172bfa9414610266575b600080fd5b610218602181565b60405161ffff90911681526020015b60405180910390f35b61024361023e366004614925565b61057a565b6040519015158152602001610227565b6102436102613660046149ee565b610775565b610243610274366004614a30565b610905565b610243610287366004614a58565b610bac565b6102ac61029a366004614ac4565b60016020526000908152604090205481565b604051908152602001610227565b6102436102c8366004614ac4565b60006020819052908152604090205460ff1681565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610227565b61024361032a366004614b0b565b610def565b6102ac60045481565b610243610346366004614925565b610feb565b610243610359366004614b4f565b6111d8565b61024361036c366004614b0b565b611379565b6102ac61037f366004614b4f565b60036020526000908152604090205481565b61024361039f366004614b4f565b611574565b6102436103b2366004614a30565b611631565b6102ac6103c5366004614b4f565b60026020526000908152604090205481565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b61024361040c366004614b6c565b6116e1565b61021861041f366004614ac4565b6117a6565b610243610432366004614bce565b6117d4565b610243610445366004614b4f565b611987565b610243610458366004614b4f565b611a26565b6104996040518060400160405280600e81526020017f53776976656c2046696e616e636500000000000000000000000000000000000081525081565b6040516102279190614c0d565b6102436104b4366004614b0b565b611ac5565b6102436104c7366004614bce565b611c7d565b6102ac7f000000000000000000000000000000000000000000000000000000000000000081565b6102ac6203f48081565b61024361050b366004614b4f565b611dea565b600554610304906001600160a01b031681565b610243610531366004614b4f565b611eb1565b610243611f66565b6104996040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525081565b6000805b8087146107675787878281811061059757610597614c79565b9050610140020160a00160208101906105b09190614cb6565b61068c578787828181106105c6576105c6614c79565b9050610140020160800160208101906105df9190614cb6565b61063a576106358888838181106105f8576105f8614c79565b9050610140020187878481811061061157610611614c79565b9050602002013586868581811061062a5761062a614c79565b905060600201612048565b61075f565b61063588888381811061064f5761064f614c79565b9050610140020187878481811061066857610668614c79565b9050602002013586868581811061068157610681614c79565b90506060020161257b565b87878281811061069e5761069e614c79565b9050610140020160800160208101906106b79190614cb6565b61070d576106358888838181106106d0576106d0614c79565b905061014002018787848181106106e9576106e9614c79565b9050602002013586868581811061070257610702614c79565b9050606002016128f3565b61075f88888381811061072257610722614c79565b9050610140020187878481811061073b5761073b614c79565b9050602002013586868581811061075457610754614c79565b905060600201612bcc565b60010161057e565b506001979650505050505050565b6000805b8083146108f95783838281811061079257610792614c79565b9050610140020160400160208101906107ab9190614b4f565b6001600160a01b0316336001600160a01b03161461083e57600f600080338787868181106107db576107db614c79565b9050610140020160400160208101906107f49190614b4f565b604051636d4c6c8960e01b815260ff9095166004860152602485019390935260448401919091526001600160a01b03908116606484015216608482015260a4015b60405180910390fd5b600061086185858481811061085557610855614c79565b90506101400201612f9a565b600081815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590508484838181106108ac576108ac614c79565b90506101400201600001357f9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6826040516108e891815260200190565b60405180910390a250600101610779565b50600190505b92915050565b6005546000906001600160a01b031633811461095a57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b60045460000361099c57604051636d4c6c8960e01b8152602360048201526000602482018190526044820181905260648201819052608482015260a401610835565b6004544210156109e25760048054604051636d4c6c8960e01b8152602492810183905242928101929092526044820152600060648201819052608482015260a401610835565b60005b80600414610b9d576021848260048110610a0157610a01614c79565b602002016020810190610a149190614ce5565b61ffff161015610a82576012848260048110610a3257610a32614c79565b602002016020810190610a459190614ce5565b604051636d4c6c8960e01b815260ff909216600483015261ffff16602482015260216044820152600060648201819052608482015260a401610835565b60068160048110610a9557610a95614c79565b601091828204019190066002029054906101000a900461ffff1661ffff16848260048110610ac557610ac5614c79565b602002016020810190610ad89190614ce5565b61ffff1614610b9557838160048110610af357610af3614c79565b602002016020810190610b069190614ce5565b60068260048110610b1957610b19614c79565b601091828204019190066002026101000a81548161ffff021916908361ffff160217905550838160048110610b5057610b50614c79565b602002016020810190610b639190614ce5565b61ffff16817f91e72fa36e0202be93e86c97a3d3d3497cf0a06cf859b14b616a304367835a8e60405160405180910390a35b6001016109e5565b50506000600455506001919050565b6005546000906001600160a01b0316338114610c0157604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b848314610c4057604051636d4c6c8960e01b8152601360048201526024810186905260448101849052600060648201819052608482015260a401610835565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60005b808714610767576000600360008a8a85818110610c8357610c83614c79565b9050602002016020810190610c989190614b4f565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905080600003610cfb57604051636d4c6c8960e01b8152602660048201526000602482018190526044820181905260648201819052608482015260a401610835565b80421015610d3a57604051636d4c6c8960e01b81526027600482015242602482015260448101829052600060648201819052608482015260a401610835565b600360008a8a85818110610d5057610d50614c79565b9050602002016020810190610d659190614b4f565b6001600160a01b03166001600160a01b03168152602001908152602001600020600090556000898984818110610d9d57610d9d614c79565b9050602002016020810190610db29190614b4f565b9050610de581898986818110610dca57610dca614c79565b9050602002016020810190610ddf9190614b4f565b866130a8565b5050600101610c64565b6040517f87e157c100000000000000000000000000000000000000000000000000000000815260ff851660048201526001600160a01b03848116602483015260448201849052336064830152608482018390526000917f0000000000000000000000000000000000000000000000000000000000000000918216906387e157c19060a4016020604051808303816000875af1158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb69190614d00565b610ef257604051636d4c6c8960e01b8152600e60048201526000602482018190526044820181905260648201819052608482015260a401610835565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff871660048201526001600160a01b03808716602483015260448201869052610f969188918891908516906335bdafab906064016020604051808303816000875af1158015610f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f909190614d1d565b8661313d565b610fd257604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610835565b610fdd8533856134ee565b60019150505b949350505050565b6000805b8087146107675787878281811061100857611008614c79565b9050610140020160a00160208101906110219190614cb6565b6110fd5787878281811061103757611037614c79565b9050610140020160800160208101906110509190614cb6565b6110ab576110a688888381811061106957611069614c79565b9050610140020187878481811061108257611082614c79565b9050602002013586868581811061109b5761109b614c79565b90506060020161357d565b6111d0565b6110a68888838181106110c0576110c0614c79565b905061014002018787848181106110d9576110d9614c79565b905060200201358686858181106110f2576110f2614c79565b905060600201613815565b87878281811061110f5761110f614c79565b9050610140020160800160208101906111289190614cb6565b61117e576110a688888381811061114157611141614c79565b9050610140020187878481811061115a5761115a614c79565b9050602002013586868581811061117357611173614c79565b905060600201613a58565b6111d088888381811061119357611193614c79565b905061014002018787848181106111ac576111ac614c79565b905060200201358686858181106111c5576111c5614c79565b905060600201613e6c565b600101610fef565b6005546000906001600160a01b031633811461122d57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b6001600160a01b0383166000908152600260205260408120549081900361128657604051636d4c6c8960e01b8152601060048201526000602482018190526044820181905260648201819052608482015260a401610835565b804210156112c557604051636d4c6c8960e01b81526011600482015242602482015260448101829052600060648201819052608482015260a401610835565b6001600160a01b038481166000818152600260205260408082209190915560055490517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152879361136e938593909116916370a08231906024016020604051808303816000875af1158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113699190614d3a565b6134ee565b506001949350505050565b60008361138881333086614286565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff871660048201526001600160a01b038087166024830152604482018690527f00000000000000000000000000000000000000000000000000000000000000009161144d91899189918516906335bdafab906064016020604051808303816000875af1158015611423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114479190614d1d565b87614320565b61148957604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610835565b6040517f01cc644800000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b03878116602483015260448201879052336064830152608482018690528216906301cc64489060a4016020604051808303816000875af1158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b9190614d00565b61156757604051636d4c6c8960e01b8152600d60048201526000602482018190526044820181905260648201819052608482015260a401610835565b5060019695505050505050565b6005546000906001600160a01b03163381146115c957604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0385169081179091556040517f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190600090a250600192915050565b6005546000906001600160a01b031633811461168657604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b60006116956203f48042614d82565b9050806004819055507f996dcde4d8c5a2baa561812ac7ceca074aea97d25dcd0d75106a654433c5544a84826040516116cf929190614d95565b60405180910390a15060019392505050565b60007f0000000000000000000000000000000000000000000000000000000000000000336001600160a01b0382161461175357604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b61175f8787878661313d565b61179b57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610835565b6115678685856134ee565b600681600481106117b657600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b6040517f3a660bd800000000000000000000000000000000000000000000000000000000815260ff841660048201526001600160a01b038381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690633a660bd8906084016020604051808303816000875af1158015611873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118979190614d3a565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b038781166024830152604482018790529192506000918416906335bdafab906064016020604051808303816000875af115801561190e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119329190614d1d565b90506119408787838561313d565b61197c57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610835565b6115678633846134ee565b6005546000906001600160a01b03163381146119dc57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b6001600160a01b038316600081815260036020526040808220829055517f28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec9190a250600192915050565b6005546000906001600160a01b0316338114611a7b57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b6001600160a01b038316600081815260026020526040808220829055517fb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d9190a250600192915050565b6040517f9f6eddc400000000000000000000000000000000000000000000000000000000815260ff851660048201526001600160a01b03848116602483015260448201849052336064830152608482018390526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690639f6eddc49060a4016020604051808303816000875af1158015611b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8f9190614d3a565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff891660048201526001600160a01b03808916602483015260448201889052919250611c3691899189918616906335bdafab906064015b6020604051808303816000875af1158015611c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c309190614d1d565b8461313d565b611c7257604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610835565b6115678633836134ee565b6040517f3a660bd800000000000000000000000000000000000000000000000000000000815260ff841660048201526001600160a01b038381166024830152604482018390523060648301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690633a660bd8906084016020604051808303816000875af1158015611d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d409190614d3a565b6040517f35bdafab00000000000000000000000000000000000000000000000000000000815260ff881660048201526001600160a01b03808816602483015260448201879052919250611da291889188918616906335bdafab90606401611bed565b611dde57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610835565b50600195945050505050565b6005546000906001600160a01b0316338114611e3f57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b6000611e4e6203f48042614d82565b6001600160a01b0385166000818152600360205260409081902083905551919250907f21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d1690611e9f9084815260200190565b60405180910390a25060019392505050565b6005546000906001600160a01b0316338114611f0657604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b6000611f156203f48042614d82565b6001600160a01b0385166000818152600260205260409081902083905551919250907fe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f90611e9f9084815260200190565b6005546000906001600160a01b0316338114611fbb57604051636d4c6c8960e01b81526000600482018190526024820181905260448201523360648201526001600160a01b038216608482015260a401610835565b600060048190556040517f6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e89190a1600191505090565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b60006120548483614560565b600081815260016020526040812054919250906120719085614d82565b90508460e001358111156120ba57604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610835565b60008281526001602052604081208290556120db6080870160608801614b4f565b90506120f881336120f260608a0160408b01614b4f565b88614286565b600060e087013561210d60c089013588614dd9565b6121179190614e16565b90506121348261212d60608a0160408b01614b4f565b3084614286565b7f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b0382166335bdafab61217660408c0160208d01614e51565b61218660808d0160608e01614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008c013560448201526064016020604051808303816000875af11580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190614d1d565b905061224761223060408b0160208c01614e51565b61224060808c0160608d01614b4f565b8386614320565b61228357604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610835565b6001600160a01b03821663c06760c76122a260408c0160208d01614e51565b6122b260808d0160608e01614b4f565b8c61010001358d60400160208101906122cb9190614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a4810186905260c4016020604051808303816000875af115801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190614d00565b6123ae57604051636d4c6c8960e01b8152600860048201526000602482018190526044820181905260648201819052608482015260a401610835565b6006546000906123ca90640100000000900461ffff1685614e16565b90506001600160a01b03831663db8509016123eb60408d0160208e01614e51565b6123fb60808e0160608f01614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008d013560448201523360648201526084810184905260a4016020604051808303816000875af1158015612479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249d9190614d00565b6124d957604051636d4c6c8960e01b8152600a60048201526000602482018190526044820181905260648201819052608482015260a401610835565b336124ea60608c0160408d01614b4f565b6001600160a01b03168b600001357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef8a8e608001602081019061252d9190614cb6565b8f60a00160208101906125409190614cb6565b604080519384529115156020840152151590820152606081018e90526080810189905260a0015b60405180910390a450505050505050505050565b60006125878483614560565b600081815260016020526040812054919250906125a49085614d82565b90508460c001358111156125ed57604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610835565b600082815260016020526040812082905561260e6080870160608801614b4f565b9050600060c087013561262560e089013588614dd9565b61262f9190614e16565b905061264c8261264560608a0160408b01614b4f565b3384614286565b6006546000906126609061ffff1683614e16565b9050612677833330612672858c614d82565b614286565b7f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b0382166335bdafab6126b960408d0160208e01614e51565b6126c960808e0160608f01614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008d013560448201526064016020604051808303816000875af115801561273a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275e9190614d1d565b905061278a61277360408c0160208d01614e51565b61278360808d0160608e01614b4f565b838c614320565b6127c657604051636d4c6c8960e01b8152600660048201526000602482018190526044820181905260648201819052608482015260a401610835565b6001600160a01b03821663c06760c76127e560408d0160208e01614e51565b6127f560808e0160608f01614b4f565b8d6101000135338f604001602081019061280f9190614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a481018c905260c4016020604051808303816000875af1158015612893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b79190614d00565b6124d957604051636d4c6c8960e01b8152600860048201526000602482018190526044820181905260648201819052608482015260a401610835565b60006128ff8483614560565b6000818152600160205260408120549192509061291c9085614d82565b90508460c0013581111561296557604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610835565b600082815260016020526040812082905560c086013561298960e088013587614dd9565b6129939190614e16565b905060006129a76080880160608901614b4f565b90506129c881336129be60608b0160408c01614b4f565b612672868b614e6c565b6006546000906129dc9061ffff1684614e16565b90506129ea82333084614286565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663fcbaab2e612a2960408b0160208c01614e51565b612a3960808c0160608d01614b4f565b6101008c0135612a4f60608e0160408f01614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a481018a905260c4016020604051808303816000875af1158015612ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af69190614d00565b612b3257604051636d4c6c8960e01b8152600b60048201526000602482018190526044820181905260648201819052608482015260a401610835565b33612b4360608a0160408b01614b4f565b6001600160a01b031689357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef88612b8060a08e0160808f01614cb6565b8d60a0016020810190612b939190614cb6565b604080519384529115156020840152151590820152606081018c90526080810188905260a0015b60405180910390a45050505050505050565b6000612bd88483614560565b60008181526001602052604081205491925090612bf59085614d82565b90508460e00135811115612c3e57604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610835565b6000828152600160205260409020819055612c79612c626080870160608801614b4f565b33612c736060890160408a01614b4f565b87614286565b7f0000000000000000000000000000000000000000000000000000000000000000600060e0870135612caf60c089013588614dd9565b612cb99190614e16565b90506001600160a01b0382166315042ddf612cda60408a0160208b01614e51565b612cea60808b0160608c01614b4f565b6101008b0135612d0060608d0160408e01614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a4810184905260c4016020604051808303816000875af1158015612d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da79190614d00565b612de357604051636d4c6c8960e01b8152600c60048201526000602482018190526044820181905260648201819052608482015260a401610835565b600654600090612dff90640100000000900461ffff1683614e16565b90506001600160a01b03831663db850901612e2060408b0160208c01614e51565b612e3060808c0160608d01614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008b013560448201523360648201526084810184905260a4016020604051808303816000875af1158015612eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed29190614d00565b612f0e57604051636d4c6c8960e01b8152600a60048201526000602482018190526044820181905260648201819052608482015260a401610835565b33612f1f60608a0160408b01614b4f565b6001600160a01b031689357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef88612f5c60a08e0160808f01614cb6565b8d60a0016020810190612f6f9190614cb6565b604080519384529115156020840152151590820152606081018c90526080810187905260a001612bba565b60007fbc200cfe92556575f801f821f26e6d54f6421fa132e4b2d65319cac1c687d8e68235612fcf6040850160208601614e51565b612fdf6060860160408701614b4f565b612fef6080870160608801614b4f565b612fff60a0880160808901614cb6565b61300f60c0890160a08a01614cb6565b60408051602081019890985287019590955260ff90931660608601526001600160a01b0391821660808601521660a0840152151560c08381019190915290151560e083810191909152908401356101008381019190915290840135610120838101919091529084013561014083015283013561016082015261018001604051602081830303815290604052805190602001209050919050565b60006040517f095ea7b3000000000000000000000000000000000000000000000000000000006000528360045282602452602060006044600080895af13d15601f3d1160016000511416171691506000606052806040525080613137576040517f3e3f8f7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b600060ff851660011480613154575060ff85166002145b156131e6576040517f852a12e3000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0384169063852a12e3906024015b6020604051808303816000875af11580156131ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131de9190614d3a565b159050610fe3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff8616016132ff5760008390506000816001600160a01b0316632e1a7d4d836001600160a01b03166399530b066040518163ffffffff1660e01b81526004016020604051808303816000875af1158015613266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328a9190614d3a565b6132949087614e16565b6040518263ffffffff1660e01b81526004016132b291815260200190565b6020604051808303816000875af11580156132d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f59190614d3a565b1015915050610fe3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff8616016133ea576040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018490523060448301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec906064015b6020604051808303816000875af11580156133bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e19190614d3a565b10159050610fe3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60ff861601613498576040517f441a3e7000000000000000000000000000000000000000000000000000000000815260006004820152602481018390526001600160a01b0384169063441a3e70906044015b600060405180830381600087803b15801561347757600080fd5b505af115801561348b573d6000803e3d6000fd5b5050505060019050610fe3565b6040517fb460af9400000000000000000000000000000000000000000000000000000000815260048101839052306024820181905260448201526000906001600160a01b0385169063b460af949060640161339e565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000006000528360045282602452602060006044600080895af13d15601f3d1160016000511416171691506000606052806040525080613137576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006135898483614560565b600081815260016020526040812054919250906135a69085614d82565b90508460e001358111156135ef57604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610835565b60008281526001602052604081208290556136106080870160608801614b4f565b9050600060e087013561362760c089013588614dd9565b6136319190614e16565b90506136528261364760608a0160408b01614b4f565b336126728a86614e6c565b60065460009061366c9062010000900461ffff1683614e16565b905061367a83333084614286565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663fcbaab2e6136b960408b0160208c01614e51565b6136c960808c0160608d01614b4f565b8b6101000135338d60400160208101906136e39190614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a4810185905260c4016020604051808303816000875af1158015613767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378b9190614d00565b6137c757604051636d4c6c8960e01b8152600b60048201526000602482018190526044820181905260648201819052608482015260a401610835565b336137d860608a0160408b01614b4f565b6001600160a01b031689357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd926671283488612f5c60a08e0160808f01614cb6565b60006138218483614560565b6000818152600160205260408120549192509061383e9085614d82565b90508460c0013581111561388757604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610835565b60008281526001602052604081208290556138a86080870160608801614b4f565b9050600060c08701356138bf60e089013588614dd9565b6138c99190614e16565b90506138df8261264560608a0160408b01614b4f565b6006546000906138fd906601000000000000900461ffff1683614e16565b905061390b83333084614286565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166315042ddf61394a60408b0160208c01614e51565b61395a60808c0160608d01614b4f565b8b6101000135338d60400160208101906139749190614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a481018a905260c4016020604051808303816000875af11580156139f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1c9190614d00565b6137c757604051636d4c6c8960e01b8152600c60048201526000602482018190526044820181905260648201819052608482015260a401610835565b6000613a648483614560565b60008181526001602052604081205491925090613a819085614d82565b90508460c00135811115613aca57604051636d4c6c8960e01b8152600560048201526024810182905260c08601356044820152600060648201819052608482015260a401610835565b60008281526001602090815260408083208490557f000000000000000000000000000000000000000000000000000000000000000092916001600160a01b038416916335bdafab91613b20918b01908b01614e51565b613b3060808b0160608c01614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008a013560448201526064016020604051808303816000875af1158015613ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc59190614d1d565b9050613bf1613bda6040890160208a01614e51565b613bea60808a0160608b01614b4f565b838961313d565b613c2d57604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610835565b6000613c3f6080890160608a01614b4f565b9050600060c0890135613c5660e08b01358a614dd9565b613c609190614e16565b9050613c8082613c7660608c0160408d01614b4f565b611369848c614e6c565b600654600090613c9e906601000000000000900461ffff1683614e16565b9050613caf83336113698486614e6c565b6001600160a01b038516630f0016b6613cce60408d0160208e01614e51565b613cde60808e0160608f01614b4f565b8d61010001358e6040016020810190613cf79190614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff90941660048501526001600160a01b039283166024850152604484019190915216606482015233608482015260a481018c905260c4016020604051808303816000875af1158015613d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9e9190614d00565b613dda57604051636d4c6c8960e01b8152600960048201526000602482018190526044820181905260648201819052608482015260a401610835565b33613deb60608c0160408d01614b4f565b6001600160a01b03168b600001357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd92667128348a8e6080016020810190613e2e9190614cb6565b8f60a0016020810190613e419190614cb6565b604080519384529115156020840152151590820152606081018e90526080810187905260a001612567565b6000613e788483614560565b60008181526001602052604081205491925090613e959085614d82565b90508460e00135811115613ede57604051636d4c6c8960e01b8152600560048201526024810182905260e08601356044820152600060648201819052608482015260a401610835565b60008281526001602090815260408083208490557f000000000000000000000000000000000000000000000000000000000000000092916001600160a01b038416916335bdafab91613f34918b01908b01614e51565b613f4460808b0160608c01614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff90921660048301526001600160a01b031660248201526101008a013560448201526064016020604051808303816000875af1158015613fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fd99190614d1d565b9050600060e0880135613ff060c08a013589614dd9565b613ffa9190614e16565b905061402661400f60408a0160208b01614e51565b61401f60808b0160608c01614b4f565b848461313d565b61406257604051636d4c6c8960e01b8152600760048201526000602482018190526044820181905260648201819052608482015260a401610835565b600061407460808a0160608b01614b4f565b6006549091506000906140919062010000900461ffff1684614e16565b90506140ad8233836140a38d88614e6c565b6113699190614e6c565b6140c7826140c160608d0160408e01614b4f565b8b6134ee565b6001600160a01b038516630f0016b66140e660408d0160208e01614e51565b6140f660808e0160608f01614b4f565b8d6101000135338f60400160208101906141109190614b4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff90951660048601526001600160a01b03938416602486015260448501929092528216606484015216608482015260a4810186905260c4016020604051808303816000875af1158015614194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b89190614d00565b6141f457604051636d4c6c8960e01b8152600960048201526000602482018190526044820181905260648201819052608482015260a401610835565b3361420560608c0160408d01614b4f565b6001600160a01b03168b600001357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd92667128348a8e60800160208101906142489190614cb6565b8f60a001602081019061425b9190614cb6565b604080519384529115156020840152151590820152606081018e90526080810188905260a001612567565b60006040517f23b872dd000000000000000000000000000000000000000000000000000000006000528460045283602452826044526020600060646000808a5af13d15601f3d1160016000511416171691506000606052806040525080614319576040517f7939f42400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600060ff851660011480614337575060ff85166002145b15614382576040517fa0712d68000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0384169063a0712d689060240161319b565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff8616016143f5576040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481018390526000906001600160a01b0385169063b6b55f259060240161339e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff86160161449a576040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260248201849052306044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063e8eda9df9060840161345d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb60ff861601614511576040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260006004820152602481018390526001600160a01b0384169063e2bbb1589060440161345d565b6040517f6e553f65000000000000000000000000000000000000000000000000000000008152600481018390523060248201526000906001600160a01b03851690636e553f659060440161339e565b60008061456c84612f9a565b60008181526020819052604090205490915060ff16156145be57604051636d4c6c8960e01b8152600260048201526000602482018190526044820181905260648201819052608482015260a401610835565b42846101200135101561460657604051636d4c6c8960e01b8152600360048201526101208501356024820152426044820152600060648201819052608482015260a401610835565b6040517f190100000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006002820152602281018290526042902060009061466a90856146f4565b90506001600160a01b0381166146866060870160408801614b4f565b6001600160a01b0316146146ec5760046000806146a96060890160408a01614b4f565b604051636d4c6c8960e01b815260ff9094166004850152602484019290925260448301526001600160a01b0390811660648301528216608482015260a401610835565b509392505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a060408301351115614754576040517f4be1c79600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6147616020830183614e51565b60ff16601b14158015614784575061477c6020830183614e51565b60ff16601c14155b156147bb576040517f205db2c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001846147cd6020860186614e51565b604080516000815260208181018084529490945260ff9092168282015291860135606082015290850135608082015260a0016020604051602081039080840390855afa158015614821573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b03811661488c576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b60008083601f8401126148a557600080fd5b50813567ffffffffffffffff8111156148bd57600080fd5b602083019150836020610140830285010111156148d957600080fd5b9250929050565b60008083601f8401126148f257600080fd5b50813567ffffffffffffffff81111561490a57600080fd5b6020830191508360208260051b85010111156148d957600080fd5b6000806000806000806060878903121561493e57600080fd5b863567ffffffffffffffff8082111561495657600080fd5b6149628a838b01614893565b9098509650602089013591508082111561497b57600080fd5b6149878a838b016148e0565b909650945060408901359150808211156149a057600080fd5b818901915089601f8301126149b457600080fd5b8135818111156149c357600080fd5b8a60206060830285010111156149d857600080fd5b6020830194508093505050509295509295509295565b60008060208385031215614a0157600080fd5b823567ffffffffffffffff811115614a1857600080fd5b614a2485828601614893565b90969095509350505050565b600060808284031215614a4257600080fd5b82608083011115614a5257600080fd5b50919050565b60008060008060408587031215614a6e57600080fd5b843567ffffffffffffffff80821115614a8657600080fd5b614a92888389016148e0565b90965094506020870135915080821115614aab57600080fd5b50614ab8878288016148e0565b95989497509550505050565b600060208284031215614ad657600080fd5b5035919050565b803560ff81168114614aee57600080fd5b919050565b6001600160a01b0381168114614b0857600080fd5b50565b60008060008060808587031215614b2157600080fd5b614b2a85614add565b93506020850135614b3a81614af3565b93969395505050506040820135916060013590565b600060208284031215614b6157600080fd5b813561488c81614af3565b600080600080600060a08688031215614b8457600080fd5b614b8d86614add565b94506020860135614b9d81614af3565b93506040860135614bad81614af3565b92506060860135614bbd81614af3565b949793965091946080013592915050565b600080600060608486031215614be357600080fd5b614bec84614add565b92506020840135614bfc81614af3565b929592945050506040919091013590565b600060208083528351808285015260005b81811015614c3a57858101830151858201604001528201614c1e565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8015158114614b0857600080fd5b600060208284031215614cc857600080fd5b813561488c81614ca8565b803561ffff81168114614aee57600080fd5b600060208284031215614cf757600080fd5b61488c82614cd3565b600060208284031215614d1257600080fd5b815161488c81614ca8565b600060208284031215614d2f57600080fd5b815161488c81614af3565b600060208284031215614d4c57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156108ff576108ff614d53565b60a08101818460005b6004811015614dc95761ffff614db383614cd3565b1683526020928301929190910190600101614d9e565b5050508260808301529392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614e1157614e11614d53565b500290565b600082614e4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215614e6357600080fd5b61488c82614add565b818103818111156108ff576108ff614d5356fea2646970667358221220830e536644cb26bad28cff085b27885f7b29d83ab230564c75348503ebf10d3d64736f6c63430008100033",
}

// SwivelABI is the input ABI used to generate the binding from.
// Deprecated: Use SwivelMetaData.ABI instead.
var SwivelABI = SwivelMetaData.ABI

// SwivelBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SwivelMetaData.Bin instead.
var SwivelBin = SwivelMetaData.Bin

// DeploySwivel deploys a new Ethereum contract, binding an instance of Swivel to it.
func DeploySwivel(auth *bind.TransactOpts, backend bind.ContractBackend, m common.Address, a common.Address) (common.Address, *types.Transaction, *Swivel, error) {
	parsed, err := SwivelMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SwivelBin), backend, m, a)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// Swivel is an auto generated Go binding around an Ethereum contract.
type Swivel struct {
	SwivelCaller     // Read-only binding to the contract
	SwivelTransactor // Write-only binding to the contract
	SwivelFilterer   // Log filterer for contract events
}

// SwivelCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwivelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwivelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwivelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwivelSession struct {
	Contract     *Swivel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwivelCallerSession struct {
	Contract *SwivelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SwivelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwivelTransactorSession struct {
	Contract     *SwivelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwivelRaw struct {
	Contract *Swivel // Generic contract binding to access the raw methods on
}

// SwivelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwivelCallerRaw struct {
	Contract *SwivelCaller // Generic read-only contract binding to access the raw methods on
}

// SwivelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwivelTransactorRaw struct {
	Contract *SwivelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwivel creates a new instance of Swivel, bound to a specific deployed contract.
func NewSwivel(address common.Address, backend bind.ContractBackend) (*Swivel, error) {
	contract, err := bindSwivel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// NewSwivelCaller creates a new read-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelCaller(address common.Address, caller bind.ContractCaller) (*SwivelCaller, error) {
	contract, err := bindSwivel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelCaller{contract: contract}, nil
}

// NewSwivelTransactor creates a new write-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelTransactor(address common.Address, transactor bind.ContractTransactor) (*SwivelTransactor, error) {
	contract, err := bindSwivel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelTransactor{contract: contract}, nil
}

// NewSwivelFilterer creates a new log filterer instance of Swivel, bound to a specific deployed contract.
func NewSwivelFilterer(address common.Address, filterer bind.ContractFilterer) (*SwivelFilterer, error) {
	contract, err := bindSwivel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwivelFilterer{contract: contract}, nil
}

// bindSwivel binds a generic wrapper to an already deployed contract.
func bindSwivel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.SwivelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transact(opts, method, params...)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCaller) HOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "HOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCallerSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelCaller) MINFEENOMINATOR(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "MIN_FEENOMINATOR")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelSession) MINFEENOMINATOR() (uint16, error) {
	return _Swivel.Contract.MINFEENOMINATOR(&_Swivel.CallOpts)
}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelCallerSession) MINFEENOMINATOR() (uint16, error) {
	return _Swivel.Contract.MINFEENOMINATOR(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCaller) NAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCallerSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCallerSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelCaller) AaveAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "aaveAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelSession) AaveAddr() (common.Address, error) {
	return _Swivel.Contract.AaveAddr(&_Swivel.CallOpts)
}

// AaveAddr is a free data retrieval call binding the contract method 0x81bb8d63.
//
// Solidity: function aaveAddr() view returns(address)
func (_Swivel *SwivelCallerSession) AaveAddr() (common.Address, error) {
	return _Swivel.Contract.AaveAddr(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCallerSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Approvals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "approvals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Approvals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Approvals(&_Swivel.CallOpts, arg0)
}

// Approvals is a free data retrieval call binding the contract method 0x5d0341ba.
//
// Solidity: function approvals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Approvals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Approvals(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCaller) Cancelled(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "cancelled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCallerSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCaller) Domain(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "domain")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCallerSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelCaller) FeeChange(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "feeChange")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelSession) FeeChange() (*big.Int, error) {
	return _Swivel.Contract.FeeChange(&_Swivel.CallOpts)
}

// FeeChange is a free data retrieval call binding the contract method 0x35197f9e.
//
// Solidity: function feeChange() view returns(uint256)
func (_Swivel *SwivelCallerSession) FeeChange() (*big.Int, error) {
	return _Swivel.Contract.FeeChange(&_Swivel.CallOpts)
}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelCaller) Feenominators(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "feenominators", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelSession) Feenominators(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Feenominators(&_Swivel.CallOpts, arg0)
}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelCallerSession) Feenominators(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Feenominators(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCaller) Filled(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "filled", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCaller) MarketPlace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "marketPlace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCallerSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "withdrawals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelTransactor) ApproveUnderlying(opts *bind.TransactOpts, u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "approveUnderlying", u, c)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelSession) ApproveUnderlying(u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ApproveUnderlying(&_Swivel.TransactOpts, u, c)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) ApproveUnderlying(u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ApproveUnderlying(&_Swivel.TransactOpts, u, c)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) AuthRedeem(opts *bind.TransactOpts, p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "authRedeem", p, u, c, t, a)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelSession) AuthRedeem(p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.AuthRedeem(&_Swivel.TransactOpts, p, u, c, t, a)
}

// AuthRedeem is a paid mutator transaction binding the contract method 0x8bfa66be.
//
// Solidity: function authRedeem(uint8 p, address u, address c, address t, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) AuthRedeem(p uint8, u common.Address, c common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.AuthRedeem(&_Swivel.TransactOpts, p, u, c, t, a)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelTransactor) BlockApproval(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockApproval", e)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelSession) BlockApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockApproval(&_Swivel.TransactOpts, e)
}

// BlockApproval is a paid mutator transaction binding the contract method 0xa0e80554.
//
// Solidity: function blockApproval(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) BlockApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockApproval(&_Swivel.TransactOpts, e)
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelTransactor) BlockFeeChange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockFeeChange")
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelSession) BlockFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.BlockFeeChange(&_Swivel.TransactOpts)
}

// BlockFeeChange is a paid mutator transaction binding the contract method 0xf9ad473d.
//
// Solidity: function blockFeeChange() returns(bool)
func (_Swivel *SwivelTransactorSession) BlockFeeChange() (*types.Transaction, error) {
	return _Swivel.Contract.BlockFeeChange(&_Swivel.TransactOpts)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactor) BlockWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockWithdrawal", e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// Cancel is a paid mutator transaction binding the contract method 0x12a444fa.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o) returns(bool)
func (_Swivel *SwivelTransactor) Cancel(opts *bind.TransactOpts, o []HashOrder) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "cancel", o)
}

// Cancel is a paid mutator transaction binding the contract method 0x12a444fa.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o) returns(bool)
func (_Swivel *SwivelSession) Cancel(o []HashOrder) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o)
}

// Cancel is a paid mutator transaction binding the contract method 0x12a444fa.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o) returns(bool)
func (_Swivel *SwivelTransactorSession) Cancel(o []HashOrder) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o)
}

// ChangeFee is a paid mutator transaction binding the contract method 0x172bfa94.
//
// Solidity: function changeFee(uint16[4] f) returns(bool)
func (_Swivel *SwivelTransactor) ChangeFee(opts *bind.TransactOpts, f [4]uint16) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "changeFee", f)
}

// ChangeFee is a paid mutator transaction binding the contract method 0x172bfa94.
//
// Solidity: function changeFee(uint16[4] f) returns(bool)
func (_Swivel *SwivelSession) ChangeFee(f [4]uint16) (*types.Transaction, error) {
	return _Swivel.Contract.ChangeFee(&_Swivel.TransactOpts, f)
}

// ChangeFee is a paid mutator transaction binding the contract method 0x172bfa94.
//
// Solidity: function changeFee(uint16[4] f) returns(bool)
func (_Swivel *SwivelTransactorSession) ChangeFee(f [4]uint16) (*types.Transaction, error) {
	return _Swivel.Contract.ChangeFee(&_Swivel.TransactOpts, f)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) CombineTokens(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "combineTokens", p, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) CombineTokens(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, p, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) CombineTokens(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, p, u, m, a)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Exit(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "exit", o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Initiate(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "initiate", o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactor) RedeemSwivelVaultInterest(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemSwivelVaultInterest", p, u, m)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelSession) RedeemSwivelVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemSwivelVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemSwivelVaultInterest is a paid mutator transaction binding the contract method 0xb6907677.
//
// Solidity: function redeemSwivelVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemSwivelVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemSwivelVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactor) RedeemVaultInterest(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemVaultInterest", p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) RedeemZcToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemZcToken", p, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemZcToken(&_Swivel.TransactOpts, p, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemZcToken(&_Swivel.TransactOpts, p, u, m, a)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelTransactor) ScheduleApproval(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleApproval", e)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelSession) ScheduleApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleApproval(&_Swivel.TransactOpts, e)
}

// ScheduleApproval is a paid mutator transaction binding the contract method 0xf22c692e.
//
// Solidity: function scheduleApproval(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleApproval(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleApproval(&_Swivel.TransactOpts, e)
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x761a7e70.
//
// Solidity: function scheduleFeeChange(uint16[4] f) returns(bool)
func (_Swivel *SwivelTransactor) ScheduleFeeChange(opts *bind.TransactOpts, f [4]uint16) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleFeeChange", f)
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x761a7e70.
//
// Solidity: function scheduleFeeChange(uint16[4] f) returns(bool)
func (_Swivel *SwivelSession) ScheduleFeeChange(f [4]uint16) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleFeeChange(&_Swivel.TransactOpts, f)
}

// ScheduleFeeChange is a paid mutator transaction binding the contract method 0x761a7e70.
//
// Solidity: function scheduleFeeChange(uint16[4] f) returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleFeeChange(f [4]uint16) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleFeeChange(&_Swivel.TransactOpts, f)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactor) ScheduleWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleWithdrawal", e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelTransactor) SetAdmin(opts *bind.TransactOpts, a common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "setAdmin", a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.SetAdmin(&_Swivel.TransactOpts, a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelTransactorSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.SetAdmin(&_Swivel.TransactOpts, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) SplitUnderlying(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "splitUnderlying", p, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) SplitUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, p, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) SplitUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, p, u, m, a)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelTransactor) Withdraw(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "withdraw", e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// SwivelBlockApprovalIterator is returned from FilterBlockApproval and is used to iterate over the raw logs and unpacked data for BlockApproval events raised by the Swivel contract.
type SwivelBlockApprovalIterator struct {
	Event *SwivelBlockApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockApproval represents a BlockApproval event raised by the Swivel contract.
type SwivelBlockApproval struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBlockApproval is a free log retrieval operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) FilterBlockApproval(opts *bind.FilterOpts, token []common.Address) (*SwivelBlockApprovalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelBlockApprovalIterator{contract: _Swivel.contract, event: "BlockApproval", logs: logs, sub: sub}, nil
}

// WatchBlockApproval is a free log subscription operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) WatchBlockApproval(opts *bind.WatchOpts, sink chan<- *SwivelBlockApproval, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockApproval)
				if err := _Swivel.contract.UnpackLog(event, "BlockApproval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockApproval is a log parse operation binding the contract event 0x28294d7092ed60d20702d49d934aafe161e401c695a6bf21327f39e2c20656ec.
//
// Solidity: event BlockApproval(address indexed token)
func (_Swivel *SwivelFilterer) ParseBlockApproval(log types.Log) (*SwivelBlockApproval, error) {
	event := new(SwivelBlockApproval)
	if err := _Swivel.contract.UnpackLog(event, "BlockApproval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelBlockFeeChangeIterator is returned from FilterBlockFeeChange and is used to iterate over the raw logs and unpacked data for BlockFeeChange events raised by the Swivel contract.
type SwivelBlockFeeChangeIterator struct {
	Event *SwivelBlockFeeChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockFeeChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockFeeChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockFeeChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockFeeChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockFeeChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockFeeChange represents a BlockFeeChange event raised by the Swivel contract.
type SwivelBlockFeeChange struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBlockFeeChange is a free log retrieval operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) FilterBlockFeeChange(opts *bind.FilterOpts) (*SwivelBlockFeeChangeIterator, error) {

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockFeeChange")
	if err != nil {
		return nil, err
	}
	return &SwivelBlockFeeChangeIterator{contract: _Swivel.contract, event: "BlockFeeChange", logs: logs, sub: sub}, nil
}

// WatchBlockFeeChange is a free log subscription operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) WatchBlockFeeChange(opts *bind.WatchOpts, sink chan<- *SwivelBlockFeeChange) (event.Subscription, error) {

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockFeeChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockFeeChange)
				if err := _Swivel.contract.UnpackLog(event, "BlockFeeChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockFeeChange is a log parse operation binding the contract event 0x6875685eb5dbc8e2796d75d2dc9e9cb607b610d0558ee7336df418a26d4846e8.
//
// Solidity: event BlockFeeChange()
func (_Swivel *SwivelFilterer) ParseBlockFeeChange(log types.Log) (*SwivelBlockFeeChange, error) {
	event := new(SwivelBlockFeeChange)
	if err := _Swivel.contract.UnpackLog(event, "BlockFeeChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelBlockWithdrawalIterator is returned from FilterBlockWithdrawal and is used to iterate over the raw logs and unpacked data for BlockWithdrawal events raised by the Swivel contract.
type SwivelBlockWithdrawalIterator struct {
	Event *SwivelBlockWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockWithdrawal represents a BlockWithdrawal event raised by the Swivel contract.
type SwivelBlockWithdrawal struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBlockWithdrawal is a free log retrieval operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) FilterBlockWithdrawal(opts *bind.FilterOpts, token []common.Address) (*SwivelBlockWithdrawalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelBlockWithdrawalIterator{contract: _Swivel.contract, event: "BlockWithdrawal", logs: logs, sub: sub}, nil
}

// WatchBlockWithdrawal is a free log subscription operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) WatchBlockWithdrawal(opts *bind.WatchOpts, sink chan<- *SwivelBlockWithdrawal, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockWithdrawal)
				if err := _Swivel.contract.UnpackLog(event, "BlockWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockWithdrawal is a log parse operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) ParseBlockWithdrawal(log types.Log) (*SwivelBlockWithdrawal, error) {
	event := new(SwivelBlockWithdrawal)
	if err := _Swivel.contract.UnpackLog(event, "BlockWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelCancelIterator is returned from FilterCancel and is used to iterate over the raw logs and unpacked data for Cancel events raised by the Swivel contract.
type SwivelCancelIterator struct {
	Event *SwivelCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelCancel represents a Cancel event raised by the Swivel contract.
type SwivelCancel struct {
	Key  [32]byte
	Hash [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterCancel is a free log retrieval operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) FilterCancel(opts *bind.FilterOpts, key [][32]byte) (*SwivelCancelIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return &SwivelCancelIterator{contract: _Swivel.contract, event: "Cancel", logs: logs, sub: sub}, nil
}

// WatchCancel is a free log subscription operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) WatchCancel(opts *bind.WatchOpts, sink chan<- *SwivelCancel, key [][32]byte) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelCancel)
				if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancel is a log parse operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) ParseCancel(log types.Log) (*SwivelCancel, error) {
	event := new(SwivelCancel)
	if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelChangeFeeIterator is returned from FilterChangeFee and is used to iterate over the raw logs and unpacked data for ChangeFee events raised by the Swivel contract.
type SwivelChangeFeeIterator struct {
	Event *SwivelChangeFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelChangeFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelChangeFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelChangeFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelChangeFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelChangeFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelChangeFee represents a ChangeFee event raised by the Swivel contract.
type SwivelChangeFee struct {
	Index *big.Int
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterChangeFee is a free log retrieval operation binding the contract event 0x91e72fa36e0202be93e86c97a3d3d3497cf0a06cf859b14b616a304367835a8e.
//
// Solidity: event ChangeFee(uint256 indexed index, uint256 indexed value)
func (_Swivel *SwivelFilterer) FilterChangeFee(opts *bind.FilterOpts, index []*big.Int, value []*big.Int) (*SwivelChangeFeeIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ChangeFee", indexRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &SwivelChangeFeeIterator{contract: _Swivel.contract, event: "ChangeFee", logs: logs, sub: sub}, nil
}

// WatchChangeFee is a free log subscription operation binding the contract event 0x91e72fa36e0202be93e86c97a3d3d3497cf0a06cf859b14b616a304367835a8e.
//
// Solidity: event ChangeFee(uint256 indexed index, uint256 indexed value)
func (_Swivel *SwivelFilterer) WatchChangeFee(opts *bind.WatchOpts, sink chan<- *SwivelChangeFee, index []*big.Int, value []*big.Int) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ChangeFee", indexRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelChangeFee)
				if err := _Swivel.contract.UnpackLog(event, "ChangeFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangeFee is a log parse operation binding the contract event 0x91e72fa36e0202be93e86c97a3d3d3497cf0a06cf859b14b616a304367835a8e.
//
// Solidity: event ChangeFee(uint256 indexed index, uint256 indexed value)
func (_Swivel *SwivelFilterer) ParseChangeFee(log types.Log) (*SwivelChangeFee, error) {
	event := new(SwivelChangeFee)
	if err := _Swivel.contract.UnpackLog(event, "ChangeFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelExitIterator is returned from FilterExit and is used to iterate over the raw logs and unpacked data for Exit events raised by the Swivel contract.
type SwivelExitIterator struct {
	Event *SwivelExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelExit represents a Exit event raised by the Swivel contract.
type SwivelExit struct {
	Key    [32]byte
	Hash   [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExit is a free log retrieval operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterExit(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelExitIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelExitIterator{contract: _Swivel.contract, event: "Exit", logs: logs, sub: sub}, nil
}

// WatchExit is a free log subscription operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchExit(opts *bind.WatchOpts, sink chan<- *SwivelExit, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelExit)
				if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExit is a log parse operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseExit(log types.Log) (*SwivelExit, error) {
	event := new(SwivelExit)
	if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelInitiateIterator is returned from FilterInitiate and is used to iterate over the raw logs and unpacked data for Initiate events raised by the Swivel contract.
type SwivelInitiateIterator struct {
	Event *SwivelInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelInitiate represents a Initiate event raised by the Swivel contract.
type SwivelInitiate struct {
	Key    [32]byte
	Hash   [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterInitiate is a free log retrieval operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterInitiate(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelInitiateIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelInitiateIterator{contract: _Swivel.contract, event: "Initiate", logs: logs, sub: sub}, nil
}

// WatchInitiate is a free log subscription operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchInitiate(opts *bind.WatchOpts, sink chan<- *SwivelInitiate, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelInitiate)
				if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiate is a log parse operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseInitiate(log types.Log) (*SwivelInitiate, error) {
	event := new(SwivelInitiate)
	if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleApprovalIterator is returned from FilterScheduleApproval and is used to iterate over the raw logs and unpacked data for ScheduleApproval events raised by the Swivel contract.
type SwivelScheduleApprovalIterator struct {
	Event *SwivelScheduleApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleApproval represents a ScheduleApproval event raised by the Swivel contract.
type SwivelScheduleApproval struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterScheduleApproval is a free log retrieval operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleApproval(opts *bind.FilterOpts, token []common.Address) (*SwivelScheduleApprovalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleApprovalIterator{contract: _Swivel.contract, event: "ScheduleApproval", logs: logs, sub: sub}, nil
}

// WatchScheduleApproval is a free log subscription operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleApproval(opts *bind.WatchOpts, sink chan<- *SwivelScheduleApproval, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleApproval", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleApproval)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleApproval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleApproval is a log parse operation binding the contract event 0x21263a04a74448e43f067f1f26a13bf97e989ae0fedb64b3a84a2d87908f3d16.
//
// Solidity: event ScheduleApproval(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleApproval(log types.Log) (*SwivelScheduleApproval, error) {
	event := new(SwivelScheduleApproval)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleApproval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleFeeChangeIterator is returned from FilterScheduleFeeChange and is used to iterate over the raw logs and unpacked data for ScheduleFeeChange events raised by the Swivel contract.
type SwivelScheduleFeeChangeIterator struct {
	Event *SwivelScheduleFeeChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleFeeChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleFeeChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleFeeChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleFeeChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleFeeChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleFeeChange represents a ScheduleFeeChange event raised by the Swivel contract.
type SwivelScheduleFeeChange struct {
	Proposal [4]uint16
	Hold     *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterScheduleFeeChange is a free log retrieval operation binding the contract event 0x996dcde4d8c5a2baa561812ac7ceca074aea97d25dcd0d75106a654433c5544a.
//
// Solidity: event ScheduleFeeChange(uint16[4] proposal, uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleFeeChange(opts *bind.FilterOpts) (*SwivelScheduleFeeChangeIterator, error) {

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleFeeChange")
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleFeeChangeIterator{contract: _Swivel.contract, event: "ScheduleFeeChange", logs: logs, sub: sub}, nil
}

// WatchScheduleFeeChange is a free log subscription operation binding the contract event 0x996dcde4d8c5a2baa561812ac7ceca074aea97d25dcd0d75106a654433c5544a.
//
// Solidity: event ScheduleFeeChange(uint16[4] proposal, uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleFeeChange(opts *bind.WatchOpts, sink chan<- *SwivelScheduleFeeChange) (event.Subscription, error) {

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleFeeChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleFeeChange)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleFeeChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleFeeChange is a log parse operation binding the contract event 0x996dcde4d8c5a2baa561812ac7ceca074aea97d25dcd0d75106a654433c5544a.
//
// Solidity: event ScheduleFeeChange(uint16[4] proposal, uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleFeeChange(log types.Log) (*SwivelScheduleFeeChange, error) {
	event := new(SwivelScheduleFeeChange)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleFeeChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleWithdrawalIterator is returned from FilterScheduleWithdrawal and is used to iterate over the raw logs and unpacked data for ScheduleWithdrawal events raised by the Swivel contract.
type SwivelScheduleWithdrawalIterator struct {
	Event *SwivelScheduleWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleWithdrawal represents a ScheduleWithdrawal event raised by the Swivel contract.
type SwivelScheduleWithdrawal struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterScheduleWithdrawal is a free log retrieval operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleWithdrawal(opts *bind.FilterOpts, token []common.Address) (*SwivelScheduleWithdrawalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleWithdrawalIterator{contract: _Swivel.contract, event: "ScheduleWithdrawal", logs: logs, sub: sub}, nil
}

// WatchScheduleWithdrawal is a free log subscription operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleWithdrawal(opts *bind.WatchOpts, sink chan<- *SwivelScheduleWithdrawal, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleWithdrawal)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleWithdrawal is a log parse operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleWithdrawal(log types.Log) (*SwivelScheduleWithdrawal, error) {
	event := new(SwivelScheduleWithdrawal)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelSetAdminIterator is returned from FilterSetAdmin and is used to iterate over the raw logs and unpacked data for SetAdmin events raised by the Swivel contract.
type SwivelSetAdminIterator struct {
	Event *SwivelSetAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelSetAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelSetAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelSetAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelSetAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelSetAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelSetAdmin represents a SetAdmin event raised by the Swivel contract.
type SwivelSetAdmin struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterSetAdmin is a free log retrieval operation binding the contract event 0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1.
//
// Solidity: event SetAdmin(address indexed admin)
func (_Swivel *SwivelFilterer) FilterSetAdmin(opts *bind.FilterOpts, admin []common.Address) (*SwivelSetAdminIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "SetAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return &SwivelSetAdminIterator{contract: _Swivel.contract, event: "SetAdmin", logs: logs, sub: sub}, nil
}

// WatchSetAdmin is a free log subscription operation binding the contract event 0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1.
//
// Solidity: event SetAdmin(address indexed admin)
func (_Swivel *SwivelFilterer) WatchSetAdmin(opts *bind.WatchOpts, sink chan<- *SwivelSetAdmin, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "SetAdmin", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelSetAdmin)
				if err := _Swivel.contract.UnpackLog(event, "SetAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAdmin is a log parse operation binding the contract event 0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1.
//
// Solidity: event SetAdmin(address indexed admin)
func (_Swivel *SwivelFilterer) ParseSetAdmin(log types.Log) (*SwivelSetAdmin, error) {
	event := new(SwivelSetAdmin)
	if err := _Swivel.contract.UnpackLog(event, "SetAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
