// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package swivel

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HashOrder is an auto generated low-level Go binding around an user-defined struct.
type HashOrder struct {
	Key        [32]byte
	Protocol   uint8
	Maker      common.Address
	Underlying common.Address
	Vault      bool
	Exit       bool
	Principal  *big.Int
	Premium    *big.Int
	Maturity   *big.Int
	Expiry     *big.Int
}

// SigComponents is an auto generated low-level Go binding around an user-defined struct.
type SigComponents struct {
	V uint8
	R [32]byte
	S [32]byte
}

// SwivelMetaData contains all meta data concerning the Swivel contract.
var SwivelMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BlockWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"}],\"name\":\"Initiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"name\":\"ScheduleWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feenominator\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"u\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"c\",\"type\":\"address[]\"}],\"name\":\"approveUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"blockWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order\",\"name\":\"o\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components\",\"name\":\"c\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"combineTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feenominators\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"vault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structHash.Order[]\",\"name\":\"o\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"a\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structSig.Components[]\",\"name\":\"c\",\"type\":\"tuple[]\"}],\"name\":\"initiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"redeemZcToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"scheduleWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"i\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"d\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"splitUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162004abf38038062004abf8339810160408190526200003491620001f9565b600380546001600160a01b03191633179055604080518082018252600e81526d53776976656c2046696e616e636560901b602080830191909152825180840190935260058352640332e302e360dc1b83820152620000a09290469030906200188c620000ee821b17901c565b60809081526001600160a01b03821660a05260408051918201815260c88083526102586020840152610190918301919091526060820152620000e6906004908162000145565b50506200022b565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b600183019183908215620001d05791602002820160005b838211156200019e57835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026200015c565b8015620001ce5782816101000a81549061ffff02191690556002016020816001010492830192600103026200019e565b505b50620001de929150620001e2565b5090565b5b80821115620001de5760008155600101620001e3565b6000602082840312156200020c57600080fd5b81516001600160a01b03811681146200022457600080fd5b9392505050565b60805160a051614813620002ac60003960008181610249015281816107ee01528181610df10152818161126b0152818161151f015281816119f0015281816120420152818161242d015281816126f701528181612ddd015281816130c1015281816132be015261373d0152600081816103bc0152613d5c01526148136000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806395cb60c4116100e3578063c2fb26a61161008c578063f851a44011610066578063f851a440146103fb578063f8eaad351461041b578063ffa1ad741461042e57600080fd5b8063c2fb26a6146103b7578063c94cdbbd146103de578063d0886f97146103f157600080fd5b8063a102e384116100bd578063a102e38414610348578063a3f4df7e1461035b578063b16a33cc146103a457600080fd5b806395cb60c41461030f57806399b64de114610322578063a0b06b501461033557600080fd5b80632fd9ee8a1161014557806352a4eec61161011f57806352a4eec6146102c9578063704b6c02146102dc5780637a9262a2146102ef57600080fd5b80632fd9ee8a146102905780634af60607146102a357806351cff8d9146102b657600080fd5b8063288cdc9111610176578063288cdc91146101f35780632ac12622146102215780632e25d2a61461024457600080fd5b80630d3f53521461019d57806310510f11146101bd57806325dedb85146101e0575b600080fd5b6101a5602181565b60405161ffff90911681526020015b60405180910390f35b6101d06101cb366004614197565b61046a565b60405190151581526020016101b4565b6101d06101ee366004614260565b61062e565b6102136102013660046142cc565b60016020526000908152604090205481565b6040519081526020016101b4565b6101d061022f3660046142cc565b60006020819052908152604090205460ff1681565b61026b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b4565b6101d061029e36600461432b565b610789565b6101d06102b1366004614197565b6109e6565b6101d06102c436600461436f565b610b9b565b6101d06102d736600461432b565b610d8d565b6101d06102ea36600461436f565b610feb565b6102136102fd36600461436f565b60026020526000908152604090205481565b6101a561031d3660046142cc565b6110a2565b6101d061033036600461439e565b6110d0565b6101d06103433660046143d1565b61120d565b6101d061035636600461436f565b6113f8565b6103976040518060400160405280600e81526020017f53776976656c2046696e616e636500000000000000000000000000000000000081525081565b6040516101b49190614410565b6101d06103b236600461432b565b6114ba565b6102137f000000000000000000000000000000000000000000000000000000000000000081565b6101d06103ec366004614483565b61169d565b6102136203f48081565b60035461026b9073ffffffffffffffffffffffffffffffffffffffff1681565b6101d061042936600461436f565b6117b4565b6103976040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525081565b600085815b8181101561061f57600089898381811061048b5761048b6144e7565b905061014002018036038101906104a29190614580565b90508060a0015161055f57806080015161050d576105088a8a848181106104cb576104cb6144e7565b905061014002018989858181106104e4576104e46144e7565b905060200201358888868181106104fd576104fd6144e7565b9050606002016118e3565b61060c565b6105088a8a84818110610522576105226144e7565b9050610140020189898581811061053b5761053b6144e7565b90506020020135888886818110610554576105546144e7565b905060600201611f25565b80608001516105ba576105088a8a8481811061057d5761057d6144e7565b90506101400201898985818110610596576105966144e7565b905060200201358888868181106105af576105af6144e7565b905060600201612300565b61060c8a8a848181106105cf576105cf6144e7565b905061014002018989858181106105e8576105e86144e7565b90506020020135888886818110610601576106016144e7565b90506060020161262b565b508061061781614656565b91505061046f565b50600198975050505050505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff1633811461069e5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a65640000000000000060448201526064015b60405180910390fd5b848381146106ee5760405162461bcd60e51b815260206004820152601560248201527f6172726179206c656e677468206d69736d6174636800000000000000000000006044820152606401610695565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60005b8281101561061f57600089898381811061072e5761072e6144e7565b9050602002016020810190610743919061436f565b90506107768189898581811061075b5761075b6144e7565b9050602002016020810190610770919061436f565b85612a74565b508061078181614656565b915050610712565b6040517f87e157c100000000000000000000000000000000000000000000000000000000815260ff8516600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052336064830152608482018390526000917f0000000000000000000000000000000000000000000000000000000000000000918216906387e157c19060a4016020604051808303816000875af1158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d919061468e565b6108cf5760405162461bcd60e51b815260206004820152602560248201527f6275726e205a63546f6b656e2072656d6f76696e67204e6f74696f6e616c206660448201527f61696c65640000000000000000000000000000000000000000000000000000006064820152608401610695565b6040517f2512ca6300000000000000000000000000000000000000000000000000000000815260ff8716600482015273ffffffffffffffffffffffffffffffffffffffff86811660248301526044820186905260009190831690632512ca639060640160408051808303816000875af1158015610950573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097491906146ab565b509050610982878286612b27565b6109ce5760405162461bcd60e51b815260206004820152600f60248201527f7769746864726177206661696c656400000000000000000000000000000000006044820152606401610695565b6109d9863386612bf5565b5060019695505050505050565b600085815b8181101561061f576000898983818110610a0757610a076144e7565b90506101400201803603810190610a1e9190614580565b90508060a00151610adb578060800151610a8957610a848a8a84818110610a4757610a476144e7565b90506101400201898985818110610a6057610a606144e7565b90506020020135888886818110610a7957610a796144e7565b905060600201612ca2565b610b88565b610a848a8a84818110610a9e57610a9e6144e7565b90506101400201898985818110610ab757610ab76144e7565b90506020020135888886818110610ad057610ad06144e7565b905060600201612f95565b8060800151610b3657610a848a8a84818110610af957610af96144e7565b90506101400201898985818110610b1257610b126144e7565b90506020020135888886818110610b2b57610b2b6144e7565b90506060020161321e565b610b888a8a84818110610b4b57610b4b6144e7565b90506101400201898985818110610b6457610b646144e7565b90506020020135888886818110610b7d57610b7d6144e7565b90506060020161369d565b5080610b9381614656565b9150506109eb565b60035460009073ffffffffffffffffffffffffffffffffffffffff16338114610c065760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610695565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081205490819003610c7c5760405162461bcd60e51b815260206004820152601760248201527f6e6f207769746864726177616c207363686564756c65640000000000000000006044820152606401610695565b80421015610ccc5760405162461bcd60e51b815260206004820152601860248201527f7769746864726177616c207374696c6c206f6e20686f6c6400000000000000006044820152606401610695565b73ffffffffffffffffffffffffffffffffffffffff8481166000818152600260205260408082209190915560035490517f70a082310000000000000000000000000000000000000000000000000000000081523060048201528793610d82938593909116916370a08231906024016020604051808303816000875af1158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d91906146e5565b612bf5565b506001949350505050565b600083610d9c81333086613b22565b6040517f2512ca6300000000000000000000000000000000000000000000000000000000815260ff8716600482015273ffffffffffffffffffffffffffffffffffffffff8681166024830152604482018690527f000000000000000000000000000000000000000000000000000000000000000091600091831690632512ca639060640160408051808303816000875af1158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6291906146ab565b509050610e70888287613bf2565b610ebc5760405162461bcd60e51b815260206004820152600e60248201527f6465706f736974206661696c65640000000000000000000000000000000000006044820152606401610695565b6040517f01cc644800000000000000000000000000000000000000000000000000000000815260ff8916600482015273ffffffffffffffffffffffffffffffffffffffff888116602483015260448201889052336064830152608482018790528316906301cc64489060a4016020604051808303816000875af1158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b919061468e565b610fdd5760405162461bcd60e51b815260206004820152602360248201527f6d696e74205a63546f6b656e20616464696e67204e6f74696f6e616c2066616960448201527f6c656400000000000000000000000000000000000000000000000000000000006064820152608401610695565b506001979650505050505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff163381146110565760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610695565b6003805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001915050919050565b600481600481106110b257600080fd5b60109182820401919006600202915054906101000a900461ffff1681565b60035460009073ffffffffffffffffffffffffffffffffffffffff1633811461113b5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610695565b602161ffff841610156111905760405162461bcd60e51b815260206004820152600c60248201527f66656520746f6f206869676800000000000000000000000000000000000000006044820152606401610695565b8260048561ffff16600481106111a8576111a86144e7565b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055508261ffff168461ffff167f032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b560405160405180910390a35060019392505050565b6040517f3a660bd800000000000000000000000000000000000000000000000000000000815260ff8416600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152604482018390523360648301526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690633a660bd8906084016020604051808303816000875af11580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd91906146e5565b6040517f2512ca6300000000000000000000000000000000000000000000000000000000815260ff8816600482015273ffffffffffffffffffffffffffffffffffffffff878116602483015260448201879052919250600091841690632512ca639060640160408051808303816000875af1158015611360573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138491906146ab565b509050611392878284613bf2565b6113de5760405162461bcd60e51b815260206004820152600e60248201527f6465706f736974206661696c65640000000000000000000000000000000000006044820152606401610695565b6113e9863384612bf5565b600193505050505b9392505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff163381146114635760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610695565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260026020526040808220829055517fb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d9190a250600192915050565b6040517f9f6eddc400000000000000000000000000000000000000000000000000000000815260ff8516600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052336064830152608482018390526000917f000000000000000000000000000000000000000000000000000000000000000091839190831690639f6eddc49060a4016020604051808303816000875af115801561156d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159191906146e5565b6040517f2512ca6300000000000000000000000000000000000000000000000000000000815260ff8916600482015273ffffffffffffffffffffffffffffffffffffffff888116602483015260448201889052919250600091841690632512ca639060640160408051808303816000875af1158015611614573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163891906146ab565b509050611646888284613bf2565b6116925760405162461bcd60e51b815260206004820152600e60248201527f6465706f736974206661696c65640000000000000000000000000000000000006044820152606401610695565b610fdd873384612bf5565b6000806116aa8484613c71565b90506116bc606085016040860161436f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117365760405162461bcd60e51b815260206004820152601460248201527f73656e646572206d757374206265206d616b65720000000000000000000000006044820152606401610695565b6000818152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055518435907f9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6906117a29084815260200190565b60405180910390a25060019392505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff1633811461181f5760405162461bcd60e51b815260206004820152601960248201527f73656e646572206d75737420626520617574686f72697a6564000000000000006044820152606401610695565b600061182e6203f480426146fe565b73ffffffffffffffffffffffffffffffffffffffff85166000818152600260205260409081902083905551919250907fe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f906117a29084815260200190565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b60006118ef8483613c71565b60008181526001602052604090205490915060e08501359061191190856146fe565b111561195f5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610695565b6000818152600160205260408120805485929061197d9084906146fe565b9091555060009050611995608086016060870161436f565b90506119b281336119ac6060890160408a0161436f565b87613b22565b600060e08601356119c760c088013587614716565b6119d19190614753565b90506119ee826119e76060890160408a0161436f565b3084613b22565b7f0000000000000000000000000000000000000000000000000000000000000000600073ffffffffffffffffffffffffffffffffffffffff8216632512ca63611a3d60408b0160208c0161478e565b611a4d60808c0160608d0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff909216600483015273ffffffffffffffffffffffffffffffffffffffff1660248201526101008b0135604482015260640160408051808303816000875af1158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee91906146ab565b506040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810185905290915073ffffffffffffffffffffffffffffffffffffffff82169063a0712d68906024016020604051808303816000875af1158015611b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8391906146e5565b15611bd05760405162461bcd60e51b815260206004820152600e60248201527f6465706f736974206661696c65640000000000000000000000000000000000006044820152606401610695565b73ffffffffffffffffffffffffffffffffffffffff821663c06760c7611bfc60408b0160208c0161478e565b611c0c60808c0160608d0161436f565b6101008c0135611c2260608e0160408f0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff909416600485015273ffffffffffffffffffffffffffffffffffffffff9283166024850152604484019190915216606482015233608482015260a4810186905260c4016020604051808303816000875af1158015611cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd6919061468e565b611d225760405162461bcd60e51b815260206004820152601960248201527f637573746f6469616c20696e697469617465206661696c6564000000000000006044820152606401610695565b600454600090611d3e90640100000000900461ffff1685614753565b905073ffffffffffffffffffffffffffffffffffffffff831663db850901611d6c60408c0160208d0161478e565b611d7c60808d0160608e0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff909216600483015273ffffffffffffffffffffffffffffffffffffffff1660248201526101008c013560448201523360648201526084810184905260a4016020604051808303816000875af1158015611e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2b919061468e565b611e775760405162461bcd60e51b815260206004820152601c60248201527f6e6f74696f6e616c20666565207472616e73666572206661696c6564000000006044820152606401610695565b33611e8860608b0160408c0161436f565b73ffffffffffffffffffffffffffffffffffffffff168a600001357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef898d6080016020810190611ed891906147a9565b8e60a0016020810190611eeb91906147a9565b604080519384529115156020840152151590820152606081018d90526080810189905260a0015b60405180910390a4505050505050505050565b6000611f318483613c71565b60008181526001602052604090205490915060c085013590611f5390856146fe565b1115611fa15760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610695565b60008181526001602052604081208054859290611fbf9084906146fe565b9091555060009050611fd7608086016060870161436f565b9050600060c0860135611fee60e088013587614716565b611ff89190614753565b90506120158261200e6060890160408a0161436f565b3384613b22565b6004546000906120299061ffff1683614753565b905061204083333061203b858b6146fe565b613b22565b7f0000000000000000000000000000000000000000000000000000000000000000600073ffffffffffffffffffffffffffffffffffffffff8216632512ca6361208f60408c0160208d0161478e565b61209f60808d0160608e0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff909216600483015273ffffffffffffffffffffffffffffffffffffffff1660248201526101008c0135604482015260640160408051808303816000875af115801561211c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214091906146ab565b50905061215d61215660408b0160208c0161478e565b828a613bf2565b6121a95760405162461bcd60e51b815260206004820152600e60248201527f6465706f736974206661696c65640000000000000000000000000000000000006044820152606401610695565b73ffffffffffffffffffffffffffffffffffffffff821663c06760c76121d560408c0160208d0161478e565b6121e560808d0160608e0161436f565b8c6101000135338e60400160208101906121ff919061436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff909516600486015273ffffffffffffffffffffffffffffffffffffffff938416602486015260448501929092528216606484015216608482015260a481018b905260c4016020604051808303816000875af1158015612290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b4919061468e565b611e775760405162461bcd60e51b815260206004820152601960248201527f637573746f6469616c20696e697469617465206661696c6564000000000000006044820152606401610695565b600061230c8483613c71565b60008181526001602052604090205490915060c08501359061232e90856146fe565b111561237c5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610695565b6000818152600160205260408120805485929061239a9084906146fe565b909155506000905060c08501356123b560e087013586614716565b6123bf9190614753565b905060006123d3608087016060880161436f565b90506123f481336123ea60608a0160408b0161436f565b61203b868a6147c6565b6004546000906124089061ffff1684614753565b905061241682333084613b22565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663fcbaab2e61246260408a0160208b0161478e565b61247260808b0160608c0161436f565b6101008b013561248860608d0160408e0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff909416600485015273ffffffffffffffffffffffffffffffffffffffff9283166024850152604484019190915216606482015233608482015260a4810189905260c4016020604051808303816000875af1158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c919061468e565b6125885760405162461bcd60e51b815260206004820152601760248201527f7a63546f6b656e2065786368616e6765206661696c65640000000000000000006044820152606401610695565b336125996060890160408a0161436f565b73ffffffffffffffffffffffffffffffffffffffff1688357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef876125e360a08d0160808e016147a9565b6125f360c08e0160a08f016147a9565b604080519384529115156020840152151590820152606081018b90526080810188905260a0015b60405180910390a450505050505050565b60006126378483613c71565b60008181526001602052604090205490915060e08501359061265990856146fe565b11156126a75760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610695565b600081815260016020526040812080548592906126c59084906146fe565b909155506126f590506126de608086016060870161436f565b336126ef606088016040890161436f565b86613b22565b7f0000000000000000000000000000000000000000000000000000000000000000600060e086013561272b60c088013587614716565b6127359190614753565b905073ffffffffffffffffffffffffffffffffffffffff82166315042ddf6127636040890160208a0161478e565b61277360808a0160608b0161436f565b6101008a013561278960608c0160408d0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff909416600485015273ffffffffffffffffffffffffffffffffffffffff9283166024850152604484019190915216606482015233608482015260a4810184905260c4016020604051808303816000875af1158015612819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283d919061468e565b6128895760405162461bcd60e51b815260206004820152601560248201527f7661756c742065786368616e6765206661696c656400000000000000000000006044820152606401610695565b6004546000906128a590640100000000900461ffff1683614753565b905073ffffffffffffffffffffffffffffffffffffffff831663db8509016128d360408a0160208b0161478e565b6128e360808b0160608c0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff909216600483015273ffffffffffffffffffffffffffffffffffffffff1660248201526101008a013560448201523360648201526084810184905260a4016020604051808303816000875af115801561296e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612992919061468e565b6129de5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74696f6e616c20666565207472616e73666572206661696c6564000000006044820152606401610695565b336129ef6060890160408a0161436f565b73ffffffffffffffffffffffffffffffffffffffff1688357f32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef87612a3960a08d0160808e016147a9565b612a4960c08e0160a08f016147a9565b604080519384529115156020840152151590820152606081018b90526080810187905260a00161261a565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af1915050612ad581613e1e565b612b215760405162461bcd60e51b815260206004820152600e60248201527f617070726f7665206661696c65640000000000000000000000000000000000006044820152606401610695565b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff851601612bed576040517f852a12e30000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff84169063852a12e3906024015b6020604051808303816000875af1158015612bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be591906146e5565b1590506113f1565b5060006113f1565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af1915050612c5681613e1e565b612b215760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401610695565b6000612cae8483613c71565b60008181526001602052604090205490915060e085013590612cd090856146fe565b1115612d1e5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610695565b60008181526001602052604081208054859290612d3c9084906146fe565b9091555060009050612d54608086016060870161436f565b9050600060e0860135612d6b60c088013587614716565b612d759190614753565b9050612d9682612d8b6060890160408a0161436f565b3361203b89866147c6565b600454600090612db09062010000900461ffff1683614753565b9050612dc6836119e760608a0160408b0161436f565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663fcbaab2e612e1260408a0160208b0161478e565b612e2260808b0160608c0161436f565b6101008b013533612e3960608e0160408f0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff909516600486015273ffffffffffffffffffffffffffffffffffffffff938416602486015260448501929092528216606484015216608482015260a4810185905260c4016020604051808303816000875af1158015612eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eee919061468e565b612f3a5760405162461bcd60e51b815260206004820152601760248201527f7a63546f6b656e2065786368616e6765206661696c65640000000000000000006044820152606401610695565b33612f4b6060890160408a0161436f565b73ffffffffffffffffffffffffffffffffffffffff1688357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd926671283487612a3960a08d0160808e016147a9565b6000612fa18483613c71565b60008181526001602052604090205490915060c085013590612fc390856146fe565b11156130115760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610695565b6000818152600160205260408120805485929061302f9084906146fe565b9091555060009050613047608086016060870161436f565b9050600060c086013561305e60e088013587614716565b6130689190614753565b905061307e8261200e6060890160408a0161436f565b60045460009061309c906601000000000000900461ffff1683614753565b90506130aa83333084613b22565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166315042ddf6130f660408a0160208b0161478e565b61310660808b0160608c0161436f565b6101008b01353361311d60608e0160408f0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff909516600486015273ffffffffffffffffffffffffffffffffffffffff938416602486015260448501929092528216606484015216608482015260a4810189905260c4016020604051808303816000875af11580156131ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d2919061468e565b612f3a5760405162461bcd60e51b815260206004820152601560248201527f7661756c742065786368616e6765206661696c656400000000000000000000006044820152606401610695565b600061322a8483613c71565b60008181526001602052604090205490915060c08501359061324c90856146fe565b111561329a5760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610695565b600081815260016020526040812080548592906132b89084906146fe565b909155507f00000000000000000000000000000000000000000000000000000000000000009050600073ffffffffffffffffffffffffffffffffffffffff8216632512ca6361330d6040890160208a0161478e565b61331d60808a0160608b0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff909216600483015273ffffffffffffffffffffffffffffffffffffffff166024820152610100890135604482015260640160408051808303816000875af115801561339a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133be91906146ab565b5090506133db6133d4604088016020890161478e565b8287612b27565b6134275760405162461bcd60e51b815260206004820152600f60248201527f7769746864726177206661696c656400000000000000000000000000000000006044820152606401610695565b6000613439608088016060890161436f565b9050600060c088013561345060e08a013589614716565b61345a9190614753565b905061347a8261347060608b0160408c0161436f565b610d7d848b6147c6565b600454600090613498906601000000000000900461ffff1683614753565b90506134a98333610d7d84866147c6565b73ffffffffffffffffffffffffffffffffffffffff8516630f0016b66134d560408c0160208d0161478e565b6134e560808d0160608e0161436f565b8c61010001358d60400160208101906134fe919061436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815260ff909416600485015273ffffffffffffffffffffffffffffffffffffffff9283166024850152604484019190915216606482015233608482015260a481018b905260c4016020604051808303816000875af115801561358e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b2919061468e565b6135fe5760405162461bcd60e51b815260206004820152601560248201527f637573746f6469616c2065786974206661696c656400000000000000000000006044820152606401610695565b3361360f60608b0160408c0161436f565b73ffffffffffffffffffffffffffffffffffffffff168a600001357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834898d608001602081019061365f91906147a9565b8e60a001602081019061367291906147a9565b604080519384529115156020840152151590820152606081018d90526080810187905260a001611f12565b60006136a98483613c71565b60008181526001602052604090205490915060e0850135906136cb90856146fe565b11156137195760405162461bcd60e51b815260206004820152601f60248201527f74616b657220616d6f756e74203e20617661696c61626c6520766f6c756d65006044820152606401610695565b600081815260016020526040812080548592906137379084906146fe565b909155507f00000000000000000000000000000000000000000000000000000000000000009050600073ffffffffffffffffffffffffffffffffffffffff8216632512ca6361378c6040890160208a0161478e565b61379c60808a0160608b0161436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff909216600483015273ffffffffffffffffffffffffffffffffffffffff166024820152610100890135604482015260640160408051808303816000875af1158015613819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383d91906146ab565b509050600060e087013561385560c089013588614716565b61385f9190614753565b905061387b6138746040890160208a0161478e565b8383612b27565b6138c75760405162461bcd60e51b815260206004820152600f60248201527f7769746864726177206661696c656400000000000000000000000000000000006044820152606401610695565b60006138d96080890160608a0161436f565b6004549091506000906138f69062010000900461ffff1684614753565b90506139128233836139088c886147c6565b610d7d91906147c6565b61392c8261392660608c0160408d0161436f565b8a612bf5565b73ffffffffffffffffffffffffffffffffffffffff8516630f0016b661395860408c0160208d0161478e565b61396860808d0160608e0161436f565b8c6101000135338e6040016020810190613982919061436f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff909516600486015273ffffffffffffffffffffffffffffffffffffffff938416602486015260448501929092528216606484015216608482015260a4810186905260c4016020604051808303816000875af1158015613a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a37919061468e565b613a835760405162461bcd60e51b815260206004820152601560248201527f637573746f6469616c2065786974206661696c656400000000000000000000006044820152606401610695565b33613a9460608b0160408c0161436f565b73ffffffffffffffffffffffffffffffffffffffff168a600001357f51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834898d6080016020810190613ae491906147a9565b8e60a0016020810190613af791906147a9565b604080519384529115156020840152151590820152606081018d90526080810188905260a001611f12565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260008060648360008a5af1915050613b9f81613e1e565b613beb5760405162461bcd60e51b815260206004820152601460248201527f7472616e736665722066726f6d206661696c65640000000000000000000000006044820152606401610695565b5050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff851601612bed576040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff84169063a0712d6890602401612ba2565b600080613c7d84613e68565b60008181526020819052604090205490915060ff1615613cdf5760405162461bcd60e51b815260206004820152600f60248201527f6f726465722063616e63656c6c656400000000000000000000000000000000006044820152606401610695565b428461012001351015613d345760405162461bcd60e51b815260206004820152600d60248201527f6f726465722065787069726564000000000000000000000000000000000000006044820152606401610695565b6040517f190100000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060028201526022810182905260429020613d959084613f83565b73ffffffffffffffffffffffffffffffffffffffff16613dbb606086016040870161436f565b73ffffffffffffffffffffffffffffffffffffffff16146113f15760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610695565b6000803d83613e3157806000803e806000fd5b8060208114613e49578015613e5a5760009250613e5f565b816000803e60005115159250613e5f565b600192505b50909392505050565b60007fbc200cfe92556575f801f821f26e6d54f6421fa132e4b2d65319cac1c687d8e68235613e9d604085016020860161478e565b613ead606086016040870161436f565b613ebd608087016060880161436f565b613ecd60a08801608089016147a9565b613edd60c0890160a08a016147a9565b60408051602081019890985287019590955260ff909316606086015273ffffffffffffffffffffffffffffffffffffffff91821660808601521660a0840152151560c08381019190915290151560e083810191909152908401356101008381019190915290840135610120838101919091529084013561014083015283013561016082015261018001604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a060408301351115613ff95760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202273222076616c756500000000006044820152606401610695565b614006602083018361478e565b60ff16601b1480614026575061401f602083018361478e565b60ff16601c145b6140725760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202276222076616c756500000000006044820152606401610695565b600183614082602085018561478e565b604080516000815260208181018084529490945260ff9092168282015291850135606082015290840135608082015260a0016020604051602081039080840390855afa1580156140d6573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00151949350505050565b60008083601f84011261411857600080fd5b50813567ffffffffffffffff81111561413057600080fd5b6020830191508360208260051b850101111561414b57600080fd5b9250929050565b60008083601f84011261416457600080fd5b50813567ffffffffffffffff81111561417c57600080fd5b60208301915083602060608302850101111561414b57600080fd5b600080600080600080606087890312156141b057600080fd5b863567ffffffffffffffff808211156141c857600080fd5b818901915089601f8301126141dc57600080fd5b8135818111156141eb57600080fd5b8a60206101408302850101111561420157600080fd5b60209283019850965090880135908082111561421c57600080fd5b6142288a838b01614106565b9096509450604089013591508082111561424157600080fd5b5061424e89828a01614152565b979a9699509497509295939492505050565b6000806000806040858703121561427657600080fd5b843567ffffffffffffffff8082111561428e57600080fd5b61429a88838901614106565b909650945060208701359150808211156142b357600080fd5b506142c087828801614106565b95989497509550505050565b6000602082840312156142de57600080fd5b5035919050565b803560ff811681146142f657600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461431d57600080fd5b50565b80356142f6816142fb565b6000806000806080858703121561434157600080fd5b61434a856142e5565b9350602085013561435a816142fb565b93969395505050506040820135916060013590565b60006020828403121561438157600080fd5b81356113f1816142fb565b803561ffff811681146142f657600080fd5b600080604083850312156143b157600080fd5b6143ba8361438c565b91506143c86020840161438c565b90509250929050565b6000806000606084860312156143e657600080fd5b6143ef846142e5565b925060208401356143ff816142fb565b929592945050506040919091013590565b600060208083528351808285015260005b8181101561443d57858101830151858201604001528201614421565b8181111561444f576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000808284036101a081121561449857600080fd5b610140808212156144a857600080fd5b84935060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0830112156144db57600080fd5b92959390920193505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b604051610140810167ffffffffffffffff81118282101715614561577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b801515811461431d57600080fd5b80356142f681614567565b6000610140828403121561459357600080fd5b61459b614516565b823581526145ab602084016142e5565b60208201526145bc60408401614320565b60408201526145cd60608401614320565b60608201526145de60808401614575565b60808201526145ef60a08401614575565b60a082015260c0838101359082015260e080840135908201526101008084013590820152610120928301359281019290925250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361468757614687614627565b5060010190565b6000602082840312156146a057600080fd5b81516113f181614567565b600080604083850312156146be57600080fd5b82516146c9816142fb565b60208401519092506146da816142fb565b809150509250929050565b6000602082840312156146f757600080fd5b5051919050565b6000821982111561471157614711614627565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561474e5761474e614627565b500290565b600082614789577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000602082840312156147a057600080fd5b6113f1826142e5565b6000602082840312156147bb57600080fd5b81356113f181614567565b6000828210156147d8576147d8614627565b50039056fea2646970667358221220cad40653c94dbe0f11e63d64c78c23347c340389899c53a00649218cc0e0de2864736f6c634300080d0033",
}

// SwivelABI is the input ABI used to generate the binding from.
// Deprecated: Use SwivelMetaData.ABI instead.
var SwivelABI = SwivelMetaData.ABI

// SwivelBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SwivelMetaData.Bin instead.
var SwivelBin = SwivelMetaData.Bin

// DeploySwivel deploys a new Ethereum contract, binding an instance of Swivel to it.
func DeploySwivel(auth *bind.TransactOpts, backend bind.ContractBackend, m common.Address) (common.Address, *types.Transaction, *Swivel, error) {
	parsed, err := SwivelMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SwivelBin), backend, m)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// Swivel is an auto generated Go binding around an Ethereum contract.
type Swivel struct {
	SwivelCaller     // Read-only binding to the contract
	SwivelTransactor // Write-only binding to the contract
	SwivelFilterer   // Log filterer for contract events
}

// SwivelCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwivelCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwivelTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwivelFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwivelSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwivelSession struct {
	Contract     *Swivel           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwivelCallerSession struct {
	Contract *SwivelCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SwivelTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwivelTransactorSession struct {
	Contract     *SwivelTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwivelRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwivelRaw struct {
	Contract *Swivel // Generic contract binding to access the raw methods on
}

// SwivelCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwivelCallerRaw struct {
	Contract *SwivelCaller // Generic read-only contract binding to access the raw methods on
}

// SwivelTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwivelTransactorRaw struct {
	Contract *SwivelTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwivel creates a new instance of Swivel, bound to a specific deployed contract.
func NewSwivel(address common.Address, backend bind.ContractBackend) (*Swivel, error) {
	contract, err := bindSwivel(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Swivel{SwivelCaller: SwivelCaller{contract: contract}, SwivelTransactor: SwivelTransactor{contract: contract}, SwivelFilterer: SwivelFilterer{contract: contract}}, nil
}

// NewSwivelCaller creates a new read-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelCaller(address common.Address, caller bind.ContractCaller) (*SwivelCaller, error) {
	contract, err := bindSwivel(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelCaller{contract: contract}, nil
}

// NewSwivelTransactor creates a new write-only instance of Swivel, bound to a specific deployed contract.
func NewSwivelTransactor(address common.Address, transactor bind.ContractTransactor) (*SwivelTransactor, error) {
	contract, err := bindSwivel(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwivelTransactor{contract: contract}, nil
}

// NewSwivelFilterer creates a new log filterer instance of Swivel, bound to a specific deployed contract.
func NewSwivelFilterer(address common.Address, filterer bind.ContractFilterer) (*SwivelFilterer, error) {
	contract, err := bindSwivel(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwivelFilterer{contract: contract}, nil
}

// bindSwivel binds a generic wrapper to an already deployed contract.
func bindSwivel(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SwivelABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.SwivelCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.SwivelTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Swivel *SwivelCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Swivel.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Swivel *SwivelTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Swivel *SwivelTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Swivel.Contract.contract.Transact(opts, method, params...)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCaller) HOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "HOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// HOLD is a free data retrieval call binding the contract method 0xd0886f97.
//
// Solidity: function HOLD() view returns(uint256)
func (_Swivel *SwivelCallerSession) HOLD() (*big.Int, error) {
	return _Swivel.Contract.HOLD(&_Swivel.CallOpts)
}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelCaller) MINFEENOMINATOR(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "MIN_FEENOMINATOR")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelSession) MINFEENOMINATOR() (uint16, error) {
	return _Swivel.Contract.MINFEENOMINATOR(&_Swivel.CallOpts)
}

// MINFEENOMINATOR is a free data retrieval call binding the contract method 0x0d3f5352.
//
// Solidity: function MIN_FEENOMINATOR() view returns(uint16)
func (_Swivel *SwivelCallerSession) MINFEENOMINATOR() (uint16, error) {
	return _Swivel.Contract.MINFEENOMINATOR(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCaller) NAME(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "NAME")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// NAME is a free data retrieval call binding the contract method 0xa3f4df7e.
//
// Solidity: function NAME() view returns(string)
func (_Swivel *SwivelCallerSession) NAME() (string, error) {
	return _Swivel.Contract.NAME(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Swivel *SwivelCallerSession) VERSION() (string, error) {
	return _Swivel.Contract.VERSION(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Swivel *SwivelCallerSession) Admin() (common.Address, error) {
	return _Swivel.Contract.Admin(&_Swivel.CallOpts)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCaller) Cancelled(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "cancelled", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Cancelled is a free data retrieval call binding the contract method 0x2ac12622.
//
// Solidity: function cancelled(bytes32 ) view returns(bool)
func (_Swivel *SwivelCallerSession) Cancelled(arg0 [32]byte) (bool, error) {
	return _Swivel.Contract.Cancelled(&_Swivel.CallOpts, arg0)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCaller) Domain(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "domain")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(bytes32)
func (_Swivel *SwivelCallerSession) Domain() ([32]byte, error) {
	return _Swivel.Contract.Domain(&_Swivel.CallOpts)
}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelCaller) Feenominators(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "feenominators", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelSession) Feenominators(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Feenominators(&_Swivel.CallOpts, arg0)
}

// Feenominators is a free data retrieval call binding the contract method 0x95cb60c4.
//
// Solidity: function feenominators(uint256 ) view returns(uint16)
func (_Swivel *SwivelCallerSession) Feenominators(arg0 *big.Int) (uint16, error) {
	return _Swivel.Contract.Feenominators(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCaller) Filled(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "filled", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// Filled is a free data retrieval call binding the contract method 0x288cdc91.
//
// Solidity: function filled(bytes32 ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Filled(arg0 [32]byte) (*big.Int, error) {
	return _Swivel.Contract.Filled(&_Swivel.CallOpts, arg0)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCaller) MarketPlace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "marketPlace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// MarketPlace is a free data retrieval call binding the contract method 0x2e25d2a6.
//
// Solidity: function marketPlace() view returns(address)
func (_Swivel *SwivelCallerSession) MarketPlace() (common.Address, error) {
	return _Swivel.Contract.MarketPlace(&_Swivel.CallOpts)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCaller) Withdrawals(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Swivel.contract.Call(opts, &out, "withdrawals", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// Withdrawals is a free data retrieval call binding the contract method 0x7a9262a2.
//
// Solidity: function withdrawals(address ) view returns(uint256)
func (_Swivel *SwivelCallerSession) Withdrawals(arg0 common.Address) (*big.Int, error) {
	return _Swivel.Contract.Withdrawals(&_Swivel.CallOpts, arg0)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelTransactor) ApproveUnderlying(opts *bind.TransactOpts, u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "approveUnderlying", u, c)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelSession) ApproveUnderlying(u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ApproveUnderlying(&_Swivel.TransactOpts, u, c)
}

// ApproveUnderlying is a paid mutator transaction binding the contract method 0x25dedb85.
//
// Solidity: function approveUnderlying(address[] u, address[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) ApproveUnderlying(u []common.Address, c []common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ApproveUnderlying(&_Swivel.TransactOpts, u, c)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactor) BlockWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "blockWithdrawal", e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// BlockWithdrawal is a paid mutator transaction binding the contract method 0xa102e384.
//
// Solidity: function blockWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) BlockWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.BlockWithdrawal(&_Swivel.TransactOpts, e)
}

// Cancel is a paid mutator transaction binding the contract method 0xc94cdbbd.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactor) Cancel(opts *bind.TransactOpts, o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "cancel", o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0xc94cdbbd.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// Cancel is a paid mutator transaction binding the contract method 0xc94cdbbd.
//
// Solidity: function cancel((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256) o, (uint8,bytes32,bytes32) c) returns(bool)
func (_Swivel *SwivelTransactorSession) Cancel(o HashOrder, c SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Cancel(&_Swivel.TransactOpts, o, c)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) CombineTokens(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "combineTokens", p, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) CombineTokens(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, p, u, m, a)
}

// CombineTokens is a paid mutator transaction binding the contract method 0x2fd9ee8a.
//
// Solidity: function combineTokens(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) CombineTokens(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.CombineTokens(&_Swivel.TransactOpts, p, u, m, a)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Exit(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "exit", o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Exit is a paid mutator transaction binding the contract method 0x4af60607.
//
// Solidity: function exit((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Exit(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Exit(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactor) Initiate(opts *bind.TransactOpts, o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "initiate", o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// Initiate is a paid mutator transaction binding the contract method 0x10510f11.
//
// Solidity: function initiate((bytes32,uint8,address,address,bool,bool,uint256,uint256,uint256,uint256)[] o, uint256[] a, (uint8,bytes32,bytes32)[] c) returns(bool)
func (_Swivel *SwivelTransactorSession) Initiate(o []HashOrder, a []*big.Int, c []SigComponents) (*types.Transaction, error) {
	return _Swivel.Contract.Initiate(&_Swivel.TransactOpts, o, a, c)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactor) RedeemVaultInterest(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemVaultInterest", p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0xa0b06b50.
//
// Solidity: function redeemVaultInterest(uint8 p, address u, uint256 m) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemVaultInterest(p uint8, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemVaultInterest(&_Swivel.TransactOpts, p, u, m)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) RedeemZcToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "redeemZcToken", p, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemZcToken(&_Swivel.TransactOpts, p, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0xb16a33cc.
//
// Solidity: function redeemZcToken(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) RedeemZcToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.RedeemZcToken(&_Swivel.TransactOpts, p, u, m, a)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactor) ScheduleWithdrawal(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "scheduleWithdrawal", e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// ScheduleWithdrawal is a paid mutator transaction binding the contract method 0xf8eaad35.
//
// Solidity: function scheduleWithdrawal(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) ScheduleWithdrawal(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.ScheduleWithdrawal(&_Swivel.TransactOpts, e)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelTransactor) SetAdmin(opts *bind.TransactOpts, a common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "setAdmin", a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.SetAdmin(&_Swivel.TransactOpts, a)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address a) returns(bool)
func (_Swivel *SwivelTransactorSession) SetAdmin(a common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.SetAdmin(&_Swivel.TransactOpts, a)
}

// SetFee is a paid mutator transaction binding the contract method 0x99b64de1.
//
// Solidity: function setFee(uint16 i, uint16 d) returns(bool)
func (_Swivel *SwivelTransactor) SetFee(opts *bind.TransactOpts, i uint16, d uint16) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "setFee", i, d)
}

// SetFee is a paid mutator transaction binding the contract method 0x99b64de1.
//
// Solidity: function setFee(uint16 i, uint16 d) returns(bool)
func (_Swivel *SwivelSession) SetFee(i uint16, d uint16) (*types.Transaction, error) {
	return _Swivel.Contract.SetFee(&_Swivel.TransactOpts, i, d)
}

// SetFee is a paid mutator transaction binding the contract method 0x99b64de1.
//
// Solidity: function setFee(uint16 i, uint16 d) returns(bool)
func (_Swivel *SwivelTransactorSession) SetFee(i uint16, d uint16) (*types.Transaction, error) {
	return _Swivel.Contract.SetFee(&_Swivel.TransactOpts, i, d)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactor) SplitUnderlying(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "splitUnderlying", p, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelSession) SplitUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, p, u, m, a)
}

// SplitUnderlying is a paid mutator transaction binding the contract method 0x52a4eec6.
//
// Solidity: function splitUnderlying(uint8 p, address u, uint256 m, uint256 a) returns(bool)
func (_Swivel *SwivelTransactorSession) SplitUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _Swivel.Contract.SplitUnderlying(&_Swivel.TransactOpts, p, u, m, a)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelTransactor) Withdraw(opts *bind.TransactOpts, e common.Address) (*types.Transaction, error) {
	return _Swivel.contract.Transact(opts, "withdraw", e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// Withdraw is a paid mutator transaction binding the contract method 0x51cff8d9.
//
// Solidity: function withdraw(address e) returns(bool)
func (_Swivel *SwivelTransactorSession) Withdraw(e common.Address) (*types.Transaction, error) {
	return _Swivel.Contract.Withdraw(&_Swivel.TransactOpts, e)
}

// SwivelBlockWithdrawalIterator is returned from FilterBlockWithdrawal and is used to iterate over the raw logs and unpacked data for BlockWithdrawal events raised by the Swivel contract.
type SwivelBlockWithdrawalIterator struct {
	Event *SwivelBlockWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelBlockWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelBlockWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelBlockWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelBlockWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelBlockWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelBlockWithdrawal represents a BlockWithdrawal event raised by the Swivel contract.
type SwivelBlockWithdrawal struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBlockWithdrawal is a free log retrieval operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) FilterBlockWithdrawal(opts *bind.FilterOpts, token []common.Address) (*SwivelBlockWithdrawalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "BlockWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelBlockWithdrawalIterator{contract: _Swivel.contract, event: "BlockWithdrawal", logs: logs, sub: sub}, nil
}

// WatchBlockWithdrawal is a free log subscription operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) WatchBlockWithdrawal(opts *bind.WatchOpts, sink chan<- *SwivelBlockWithdrawal, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "BlockWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelBlockWithdrawal)
				if err := _Swivel.contract.UnpackLog(event, "BlockWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBlockWithdrawal is a log parse operation binding the contract event 0xb1c1232c5dd039bb1c46cc05eaf25828e4f8596b7f68bdb23073ba78b9ca382d.
//
// Solidity: event BlockWithdrawal(address indexed token)
func (_Swivel *SwivelFilterer) ParseBlockWithdrawal(log types.Log) (*SwivelBlockWithdrawal, error) {
	event := new(SwivelBlockWithdrawal)
	if err := _Swivel.contract.UnpackLog(event, "BlockWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelCancelIterator is returned from FilterCancel and is used to iterate over the raw logs and unpacked data for Cancel events raised by the Swivel contract.
type SwivelCancelIterator struct {
	Event *SwivelCancel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelCancelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelCancel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelCancel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelCancelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelCancelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelCancel represents a Cancel event raised by the Swivel contract.
type SwivelCancel struct {
	Key  [32]byte
	Hash [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterCancel is a free log retrieval operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) FilterCancel(opts *bind.FilterOpts, key [][32]byte) (*SwivelCancelIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return &SwivelCancelIterator{contract: _Swivel.contract, event: "Cancel", logs: logs, sub: sub}, nil
}

// WatchCancel is a free log subscription operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) WatchCancel(opts *bind.WatchOpts, sink chan<- *SwivelCancel, key [][32]byte) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Cancel", keyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelCancel)
				if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCancel is a log parse operation binding the contract event 0x9e5d8891dc1b047de610617bc9bc2d8ccffebbc3d63363431a546831245858a6.
//
// Solidity: event Cancel(bytes32 indexed key, bytes32 hash)
func (_Swivel *SwivelFilterer) ParseCancel(log types.Log) (*SwivelCancel, error) {
	event := new(SwivelCancel)
	if err := _Swivel.contract.UnpackLog(event, "Cancel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelExitIterator is returned from FilterExit and is used to iterate over the raw logs and unpacked data for Exit events raised by the Swivel contract.
type SwivelExitIterator struct {
	Event *SwivelExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelExit represents a Exit event raised by the Swivel contract.
type SwivelExit struct {
	Key    [32]byte
	Hash   [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExit is a free log retrieval operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterExit(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelExitIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelExitIterator{contract: _Swivel.contract, event: "Exit", logs: logs, sub: sub}, nil
}

// WatchExit is a free log subscription operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchExit(opts *bind.WatchOpts, sink chan<- *SwivelExit, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Exit", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelExit)
				if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExit is a log parse operation binding the contract event 0x51cad9177cf46d59109ae978bb3cf5ffed2bb3d53fb3682fa56fbd9266712834.
//
// Solidity: event Exit(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseExit(log types.Log) (*SwivelExit, error) {
	event := new(SwivelExit)
	if err := _Swivel.contract.UnpackLog(event, "Exit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelInitiateIterator is returned from FilterInitiate and is used to iterate over the raw logs and unpacked data for Initiate events raised by the Swivel contract.
type SwivelInitiateIterator struct {
	Event *SwivelInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelInitiate represents a Initiate event raised by the Swivel contract.
type SwivelInitiate struct {
	Key    [32]byte
	Hash   [32]byte
	Maker  common.Address
	Vault  bool
	Exit   bool
	Sender common.Address
	Amount *big.Int
	Filled *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterInitiate is a free log retrieval operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) FilterInitiate(opts *bind.FilterOpts, key [][32]byte, maker []common.Address, sender []common.Address) (*SwivelInitiateIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &SwivelInitiateIterator{contract: _Swivel.contract, event: "Initiate", logs: logs, sub: sub}, nil
}

// WatchInitiate is a free log subscription operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) WatchInitiate(opts *bind.WatchOpts, sink chan<- *SwivelInitiate, key [][32]byte, maker []common.Address, sender []common.Address) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}

	var makerRule []interface{}
	for _, makerItem := range maker {
		makerRule = append(makerRule, makerItem)
	}

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "Initiate", keyRule, makerRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelInitiate)
				if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiate is a log parse operation binding the contract event 0x32bc401d77ffde781b234d480866e0c360e724770a30ea3299309f9171e400ef.
//
// Solidity: event Initiate(bytes32 indexed key, bytes32 hash, address indexed maker, bool vault, bool exit, address indexed sender, uint256 amount, uint256 filled)
func (_Swivel *SwivelFilterer) ParseInitiate(log types.Log) (*SwivelInitiate, error) {
	event := new(SwivelInitiate)
	if err := _Swivel.contract.UnpackLog(event, "Initiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelScheduleWithdrawalIterator is returned from FilterScheduleWithdrawal and is used to iterate over the raw logs and unpacked data for ScheduleWithdrawal events raised by the Swivel contract.
type SwivelScheduleWithdrawalIterator struct {
	Event *SwivelScheduleWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelScheduleWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelScheduleWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelScheduleWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelScheduleWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelScheduleWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelScheduleWithdrawal represents a ScheduleWithdrawal event raised by the Swivel contract.
type SwivelScheduleWithdrawal struct {
	Token common.Address
	Hold  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterScheduleWithdrawal is a free log retrieval operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) FilterScheduleWithdrawal(opts *bind.FilterOpts, token []common.Address) (*SwivelScheduleWithdrawalIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "ScheduleWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return &SwivelScheduleWithdrawalIterator{contract: _Swivel.contract, event: "ScheduleWithdrawal", logs: logs, sub: sub}, nil
}

// WatchScheduleWithdrawal is a free log subscription operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) WatchScheduleWithdrawal(opts *bind.WatchOpts, sink chan<- *SwivelScheduleWithdrawal, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "ScheduleWithdrawal", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelScheduleWithdrawal)
				if err := _Swivel.contract.UnpackLog(event, "ScheduleWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleWithdrawal is a log parse operation binding the contract event 0xe4b67652e856f57a7747dd2473850ce987087f4b1744a870504f1c047cb56f4f.
//
// Solidity: event ScheduleWithdrawal(address indexed token, uint256 hold)
func (_Swivel *SwivelFilterer) ParseScheduleWithdrawal(log types.Log) (*SwivelScheduleWithdrawal, error) {
	event := new(SwivelScheduleWithdrawal)
	if err := _Swivel.contract.UnpackLog(event, "ScheduleWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SwivelSetFeeIterator is returned from FilterSetFee and is used to iterate over the raw logs and unpacked data for SetFee events raised by the Swivel contract.
type SwivelSetFeeIterator struct {
	Event *SwivelSetFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SwivelSetFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SwivelSetFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SwivelSetFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SwivelSetFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SwivelSetFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SwivelSetFee represents a SetFee event raised by the Swivel contract.
type SwivelSetFee struct {
	Index        *big.Int
	Feenominator *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetFee is a free log retrieval operation binding the contract event 0x032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5.
//
// Solidity: event SetFee(uint256 indexed index, uint256 indexed feenominator)
func (_Swivel *SwivelFilterer) FilterSetFee(opts *bind.FilterOpts, index []*big.Int, feenominator []*big.Int) (*SwivelSetFeeIterator, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var feenominatorRule []interface{}
	for _, feenominatorItem := range feenominator {
		feenominatorRule = append(feenominatorRule, feenominatorItem)
	}

	logs, sub, err := _Swivel.contract.FilterLogs(opts, "SetFee", indexRule, feenominatorRule)
	if err != nil {
		return nil, err
	}
	return &SwivelSetFeeIterator{contract: _Swivel.contract, event: "SetFee", logs: logs, sub: sub}, nil
}

// WatchSetFee is a free log subscription operation binding the contract event 0x032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5.
//
// Solidity: event SetFee(uint256 indexed index, uint256 indexed feenominator)
func (_Swivel *SwivelFilterer) WatchSetFee(opts *bind.WatchOpts, sink chan<- *SwivelSetFee, index []*big.Int, feenominator []*big.Int) (event.Subscription, error) {

	var indexRule []interface{}
	for _, indexItem := range index {
		indexRule = append(indexRule, indexItem)
	}
	var feenominatorRule []interface{}
	for _, feenominatorItem := range feenominator {
		feenominatorRule = append(feenominatorRule, feenominatorItem)
	}

	logs, sub, err := _Swivel.contract.WatchLogs(opts, "SetFee", indexRule, feenominatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SwivelSetFee)
				if err := _Swivel.contract.UnpackLog(event, "SetFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFee is a log parse operation binding the contract event 0x032dc6a2d839eb179729a55633fdf1c41a1fc4739394154117005db2b354b9b5.
//
// Solidity: event SetFee(uint256 indexed index, uint256 indexed feenominator)
func (_Swivel *SwivelFilterer) ParseSetFee(log types.Log) (*SwivelSetFee, error) {
	event := new(SwivelSetFee)
	if err := _Swivel.contract.UnpackLog(event, "SetFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
