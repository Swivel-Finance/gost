// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package marketplace

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketPlaceABI is the input ABI used to generate the binding from.
const MarketPlaceABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcToken\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodialExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodialInitiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matured\",\"type\":\"uint256\"}],\"name\":\"Mature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2pVaultExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2pZcTokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RedeemVaultInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemZcToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferVaultNotional\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"burnZcTokenRemovingNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"cTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"custodialExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"custodialInitiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zcTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"matureMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maturityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"mintZcTokenAddingNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"p2pVaultExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"p2pZcTokenExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"redeemZcToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"}],\"name\":\"setSwivelAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swivel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"transferVaultNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"transferVaultNotionalFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MarketPlaceBin is the compiled bytecode used for deploying new contracts.
var MarketPlaceBin = "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c615dee61007460003960008181611bbe015281816128930152612ca10152615dee6000f3fe60806040523480156200001157600080fd5b50600436106200013c5760003560e01c806365a963aa11620000bd578063c86adf7c116200007b578063c86adf7c1462000423578063e5a2aa621462000459578063ef267f2c146200048f578063f851a44014620004c5578063f8e51bcb14620004e7576200013c565b806365a963aa14620003155780636ce327ec146200034b5780638c6b9b411462000381578063b50a66f714620003b7578063bddbfbe414620003ed576200013c565b806327ee93be116200010b57806327ee93be14620002075780633cf9a4e3146200023d57806340d37cdf14620002735780635292ecf214620002a95780635db0ae5814620002df576200013c565b8063012b264a146200014157806305e1dc251462000163578063154e0f2e146200019957806317b3bba714620001cf575b600080fd5b6200014b6200051d565b6040516200015a91906200391e565b60405180910390f35b6200018160048036038101906200017b919062003382565b62000543565b6040516200019091906200391e565b60405180910390f35b620001b76004803603810190620001b1919062003565565b620005c0565b604051620001c6919062003a6a565b60405180910390f35b620001ed6004803603810190620001e7919062003382565b62000ced565b604051620001fe9392919062003968565b60405180910390f35b6200022560048036038101906200021f919062003382565b62000d84565b60405162000234919062003a6a565b60405180910390f35b6200025b6004803603810190620002559190620034f9565b62000db3565b6040516200026a919062003a6a565b60405180910390f35b6200029160048036038101906200028b919062003382565b62000f5c565b604051620002a0919062003a6a565b60405180910390f35b620002c76004803603810190620002c19190620034f9565b620012a6565b604051620002d6919062003a6a565b60405180910390f35b620002fd6004803603810190620002f7919062003382565b62001452565b6040516200030c919062003a6a565b60405180910390f35b6200033360048036038101906200032d9190620033c3565b62001978565b60405162000342919062003a6a565b60405180910390f35b62000369600480360381019062000363919062003445565b62001bba565b60405162000378919062003a6a565b60405180910390f35b6200039f6004803603810190620003999190620033c3565b62001f70565b604051620003ae919062003a6a565b60405180910390f35b620003d56004803603810190620003cf9190620034f9565b620022f7565b604051620003e4919062003a6a565b60405180910390f35b6200040b6004803603810190620004059190620033c3565b62002628565b6040516200041a919062003a6a565b60405180910390f35b6200044160048036038101906200043b919062003382565b6200286a565b60405162000450919062003cc9565b60405180910390f35b62000477600480360381019062000471919062003356565b6200288f565b60405162000486919062003a6a565b60405180910390f35b620004ad6004803603810190620004a79190620034f9565b6200296e565b604051620004bc919062003a6a565b60405180910390f35b620004cf62002c9f565b604051620004de91906200391e565b60405180910390f35b620005056004803603810190620004ff9190620033c3565b62002cc3565b60405162000514919062003a6a565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1662000a1f5762000790858562001452565b620007d2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007c99062003c1f565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856040518363ffffffff1660e01b815260040162000813929190620039e2565b602060405180830381600087803b1580156200082e57600080fd5b505af115801562000843573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008699190620035bb565b620008ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008a29062003c41565b60405180910390fd5b6000816000015173ffffffffffffffffffffffffffffffffffffffff1663852a12e3856040518263ffffffff1660e01b8152600401620008ec919062003cc9565b602060405180830381600087803b1580156200090757600080fd5b505af11580156200091c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009429190620035e7565b1462000985576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200097c9062003ca7565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401620009c2929190620039e2565b602060405180830381600087803b158015620009dd57600080fd5b505af1158015620009f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a189190620035bb565b5062000c79565b806020015173ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856040518363ffffffff1660e01b815260040162000a60929190620039e2565b602060405180830381600087803b15801562000a7b57600080fd5b505af115801562000a90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ab69190620035bb565b62000af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000aef9062003c41565b60405180910390fd5b600062000b078686866200304a565b90506000826000015173ffffffffffffffffffffffffffffffffffffffff1663852a12e3836040518263ffffffff1660e01b815260040162000b4a919062003cc9565b602060405180830381600087803b15801562000b6557600080fd5b505af115801562000b7a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ba09190620035e7565b1462000be3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000bda9062003ca7565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040162000c20929190620039e2565b602060405180830381600087803b15801562000c3b57600080fd5b505af115801562000c50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c769190620035bb565b50505b3373ffffffffffffffffffffffffffffffffffffffff16848673ffffffffffffffffffffffffffffffffffffffff167f49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e458660405162000cd9919062003cc9565b60405180910390a460019150509392505050565b6000602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000e49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e409062003a87565b60405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b326258d85856040518363ffffffff1660e01b815260040162000ef8929190620039e2565b602060405180830381600087803b15801562000f1357600080fd5b505af115801562000f28573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f4e9190620035bb565b506001915050949350505050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319caf46c336040518263ffffffff1660e01b81526004016200100c91906200391e565b602060405180830381600087803b1580156200102757600080fd5b505af11580156200103c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010629190620035e7565b905060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3836040518263ffffffff1660e01b815260040162001113919062003cc9565b602060405180830381600087803b1580156200112e57600080fd5b505af115801562001143573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011699190620035e7565b14620011ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011a39062003bfd565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401620011e9929190620039e2565b602060405180830381600087803b1580156200120457600080fd5b505af115801562001219573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200123f9190620035bb565b503373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c27987460405160405180910390a4600191505092915050565b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663177946733385856040518463ffffffff1660e01b81526004016200135993929190620039a5565b602060405180830381600087803b1580156200137457600080fd5b505af115801562001389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013af9190620035bb565b620013f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013e89062003b97565b60405180910390fd5b838573ffffffffffffffffffffffffffffffffffffffff167f1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf30983386866040516200143e93929190620039a5565b60405180910390a360019050949350505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615620014f5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620014ec9062003c63565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663204f83f96040518163ffffffff1660e01b815260040160206040518083038186803b158015620015ae57600080fd5b505afa158015620015c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015e99190620035e7565b4210156200162e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016259062003aed565b60405180910390fd5b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620016eb57600080fd5b505af115801562001700573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017269190620035e7565b905080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff0219169083151502179055506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b868d516040518163ffffffff1660e01b815260040160206040518083038186803b1580156200189e57600080fd5b505afa158015620018b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018d99190620035bb565b6200191b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019129062003aed565b60405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff167e80e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a442846040516200196592919062003d23565b60405180910390a3600191505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a059062003a87565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040518463ffffffff1660e01b815260040162001abf93929190620039a5565b602060405180830381600087803b15801562001ada57600080fd5b505af115801562001aef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b159190620035bb565b62001b57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b4e9062003bdb565b60405180910390fd5b858773ffffffffffffffffffffffffffffffffffffffff167f86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef5442287878760405162001ba493929190620039a5565b60405180910390a3600191505095945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001c4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001c459062003acb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562001ce3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001cda9062003c85565b60405180910390fd5b60008787868660405162001cf7906200326c565b62001d06949392919062003a0f565b604051809103906000f08015801562001d23573d6000803e3d6000fd5b50905060008787600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405162001d5b906200327a565b62001d699392919062003ce6565b604051809103906000f08015801562001d86573d6000803e3d6000fd5b50905060405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152506000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050878973ffffffffffffffffffffffffffffffffffffffff167f5c8943d544aa04815bd907fde89a7a9156cd14eb9ffe4f5c3b1277d7557a2d22898560405162001f589291906200393b565b60405180910390a36001935050505095945050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002006576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ffd9062003a87565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac86856040518363ffffffff1660e01b8152600401620020b5929190620039e2565b602060405180830381600087803b158015620020d057600080fd5b505af1158015620020e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200210b9190620035bb565b6200214d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620021449062003aa9565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663613a28d185856040518363ffffffff1660e01b8152600401620021fc929190620039e2565b602060405180830381600087803b1580156200221757600080fd5b505af11580156200222c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620022529190620035bb565b62002294576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200228b9062003bb9565b60405180910390fd5b858773ffffffffffffffffffffffffffffffffffffffff167f219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59878787604051620022e193929190620039a5565b60405180910390a3600191505095945050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200238d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620023849062003a87565b60405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac85856040518363ffffffff1660e01b81526004016200243c929190620039e2565b602060405180830381600087803b1580156200245757600080fd5b505af11580156200246c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024929190620035bb565b620024d4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620024cb9062003aa9565b60405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663613a28d185856040518363ffffffff1660e01b815260040162002583929190620039e2565b602060405180830381600087803b1580156200259e57600080fd5b505af1158015620025b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025d99190620035bb565b6200261b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620026129062003bb9565b60405180910390fd5b6001915050949350505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620026be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620026b59062003a87565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663177946738686866040518463ffffffff1660e01b81526004016200276f93929190620039a5565b602060405180830381600087803b1580156200278a57600080fd5b505af11580156200279f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027c59190620035bb565b62002807576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620027fe9062003b0f565b60405180910390fd5b858773ffffffffffffffffffffffffffffffffffffffff167f31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f1528787876040516200285493929190620039a5565b60405180910390a3600191505095945050505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b60007f00000000000000000000000000000000000000000000000000000000000000008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002923576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200291a9062003acb565b60405180910390fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001915050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002a04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620029fb9062003a87565b60405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1985856040518363ffffffff1660e01b815260040162002ab3929190620039e2565b602060405180830381600087803b15801562002ace57600080fd5b505af115801562002ae3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b099190620035bb565b62002b4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002b429062003b31565b60405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a01cfffb85856040518363ffffffff1660e01b815260040162002bfa929190620039e2565b602060405180830381600087803b15801562002c1557600080fd5b505af115801562002c2a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c509190620035bb565b62002c92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002c899062003b53565b60405180910390fd5b6001915050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002d509062003a87565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1986856040518363ffffffff1660e01b815260040162002e08929190620039e2565b602060405180830381600087803b15801562002e2357600080fd5b505af115801562002e38573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e5e9190620035bb565b62002ea0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002e979062003b75565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a01cfffb85856040518363ffffffff1660e01b815260040162002f4f929190620039e2565b602060405180830381600087803b15801562002f6a57600080fd5b505af115801562002f7f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002fa59190620035bb565b62002fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002fde9062003b53565b60405180910390fd5b858773ffffffffffffffffffffffffffffffffffffffff167f8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c5168787876040516200303493929190620039a5565b60405180910390a3600191505095945050505050565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020546000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200315957600080fd5b505af11580156200316e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620031949190620035e7565b620031a0919062003ec1565b90506000633b9aca0067016345785d8a0000600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020546a52b7d2dcc80cd2e4000000856200321c919062003e60565b62003228919062003e28565b62003234919062003e28565b62003240919062003dcb565b9050633b9aca00848262003255919062003e60565b62003261919062003e28565b925050509392505050565b610d39806200436783390190565b610d1980620050a083390190565b60006200329f620032998462003d79565b62003d50565b905082815260208101848484011115620032b857600080fd5b620032c584828562003f46565b509392505050565b600081359050620032de8162004318565b92915050565b600081519050620032f58162004332565b92915050565b600082601f8301126200330d57600080fd5b81356200331f84826020860162003288565b91505092915050565b60008135905062003339816200434c565b92915050565b60008151905062003350816200434c565b92915050565b6000602082840312156200336957600080fd5b60006200337984828501620032cd565b91505092915050565b600080604083850312156200339657600080fd5b6000620033a685828601620032cd565b9250506020620033b98582860162003328565b9150509250929050565b600080600080600060a08688031215620033dc57600080fd5b6000620033ec88828901620032cd565b9550506020620033ff8882890162003328565b94505060406200341288828901620032cd565b93505060606200342588828901620032cd565b9250506080620034388882890162003328565b9150509295509295909350565b600080600080600060a086880312156200345e57600080fd5b60006200346e88828901620032cd565b9550506020620034818882890162003328565b94505060406200349488828901620032cd565b935050606086013567ffffffffffffffff811115620034b257600080fd5b620034c088828901620032fb565b925050608086013567ffffffffffffffff811115620034de57600080fd5b620034ec88828901620032fb565b9150509295509295909350565b600080600080608085870312156200351057600080fd5b60006200352087828801620032cd565b9450506020620035338782880162003328565b93505060406200354687828801620032cd565b9250506060620035598782880162003328565b91505092959194509250565b6000806000606084860312156200357b57600080fd5b60006200358b86828701620032cd565b93505060206200359e8682870162003328565b9250506040620035b18682870162003328565b9150509250925092565b600060208284031215620035ce57600080fd5b6000620035de84828501620032e4565b91505092915050565b600060208284031215620035fa57600080fd5b60006200360a848285016200333f565b91505092915050565b6200361e8162003efc565b82525050565b6200362f8162003f10565b82525050565b6000620036428262003daf565b6200364e818562003dba565b93506200366081856020860162003f55565b6200366b816200404e565b840191505092915050565b600062003685601e8362003dba565b915062003692826200405f565b602082019050919050565b6000620036ac600b8362003dba565b9150620036b98262004088565b602082019050919050565b6000620036d360148362003dba565b9150620036e082620040b1565b602082019050919050565b6000620036fa60148362003dba565b91506200370782620040da565b602082019050919050565b60006200372160188362003dba565b91506200372e8262004103565b602082019050919050565b60006200374860138362003dba565b915062003755826200412c565b602082019050919050565b60006200376f60138362003dba565b91506200377c8262004155565b602082019050919050565b600062003796600b8362003dba565b9150620037a3826200417e565b602082019050919050565b6000620037bd60158362003dba565b9150620037ca82620041a7565b602082019050919050565b6000620037e460168362003dba565b9150620037f182620041d0565b602082019050919050565b60006200380b60178362003dba565b91506200381882620041f9565b602082019050919050565b600062003832601f8362003dba565b91506200383f8262004222565b602082019050919050565b600062003859601b8362003dba565b915062003866826200424b565b602082019050919050565b600062003880600e8362003dba565b91506200388d8262004274565b602082019050919050565b6000620038a760168362003dba565b9150620038b4826200429d565b602082019050919050565b6000620038ce601f8362003dba565b9150620038db82620042c6565b602082019050919050565b6000620038f560188362003dba565b91506200390282620042ef565b602082019050919050565b620039188162003f3c565b82525050565b600060208201905062003935600083018462003613565b92915050565b600060408201905062003952600083018562003613565b62003961602083018462003613565b9392505050565b60006060820190506200397f600083018662003613565b6200398e602083018562003613565b6200399d604083018462003613565b949350505050565b6000606082019050620039bc600083018662003613565b620039cb602083018562003613565b620039da60408301846200390d565b949350505050565b6000604082019050620039f9600083018562003613565b62003a0860208301846200390d565b9392505050565b600060808201905062003a26600083018762003613565b62003a3560208301866200390d565b818103604083015262003a49818562003635565b9050818103606083015262003a5f818462003635565b905095945050505050565b600060208201905062003a81600083018462003624565b92915050565b6000602082019050818103600083015262003aa28162003676565b9050919050565b6000602082019050818103600083015262003ac4816200369d565b9050919050565b6000602082019050818103600083015262003ae681620036c4565b9050919050565b6000602082019050818103600083015262003b0881620036eb565b9050919050565b6000602082019050818103600083015262003b2a8162003712565b9050919050565b6000602082019050818103600083015262003b4c8162003739565b9050919050565b6000602082019050818103600083015262003b6e8162003760565b9050919050565b6000602082019050818103600083015262003b908162003787565b9050919050565b6000602082019050818103600083015262003bb281620037ae565b9050919050565b6000602082019050818103600083015262003bd481620037d5565b9050919050565b6000602082019050818103600083015262003bf681620037fc565b9050919050565b6000602082019050818103600083015262003c188162003823565b9050919050565b6000602082019050818103600083015262003c3a816200384a565b9050919050565b6000602082019050818103600083015262003c5c8162003871565b9050919050565b6000602082019050818103600083015262003c7e8162003898565b9050919050565b6000602082019050818103600083015262003ca081620038bf565b9050919050565b6000602082019050818103600083015262003cc281620038e6565b9050919050565b600060208201905062003ce060008301846200390d565b92915050565b600060608201905062003cfd60008301866200390d565b62003d0c602083018562003613565b62003d1b604083018462003613565b949350505050565b600060408201905062003d3a60008301856200390d565b62003d4960208301846200390d565b9392505050565b600062003d5c62003d6f565b905062003d6a828262003f8b565b919050565b6000604051905090565b600067ffffffffffffffff82111562003d975762003d966200401f565b5b62003da2826200404e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600062003dd88262003f3c565b915062003de58362003f3c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562003e1d5762003e1c62003fc1565b5b828201905092915050565b600062003e358262003f3c565b915062003e428362003f3c565b92508262003e555762003e5462003ff0565b5b828204905092915050565b600062003e6d8262003f3c565b915062003e7a8362003f3c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562003eb65762003eb562003fc1565b5b828202905092915050565b600062003ece8262003f3c565b915062003edb8362003f3c565b92508282101562003ef15762003ef062003fc1565b5b828203905092915050565b600062003f098262003f1c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101562003f7557808201518184015260208101905062003f58565b8381111562003f85576000848401525b50505050565b62003f96826200404e565b810181811067ffffffffffffffff8211171562003fb85762003fb76200401f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f73656e646572206d7573742062652053776976656c20636f6e74726163740000600082015250565b7f6275726e206661696c6564000000000000000000000000000000000000000000600082015250565b7f73656e646572206d7573742062652061646d696e000000000000000000000000600082015250565b7f6d61747572697479206e6f742072656163686564000000000000000000000000600082015250565b7f7472616e73666572206e6f74696f6e616c206661696c65640000000000000000600082015250565b7f6d696e74207a63546f6b656e206661696c656400000000000000000000000000600082015250565b7f616464206e6f74696f6e616c206661696c656400000000000000000000000000600082015250565b7f6d696e74206661696c6564000000000000000000000000000000000000000000600082015250565b7f7661756c74207472616e73666572206661696c65640000000000000000000000600082015250565b7f72656d6f7665206e6f74696f6e616c206661696c656400000000000000000000600082015250565b7f7a63546f6b656e207472616e73666572206661696c6564000000000000000000600082015250565b7f726564656d7074696f6e2066726f6d20436f6d706f756e64206661696c656400600082015250565b7f6661696c656420746f206d617475726520746865206d61726b65740000000000600082015250565b7f636f756c64206e6f74206275726e000000000000000000000000000000000000600082015250565b7f6d61726b657420616c7265616479206d61747572656400000000000000000000600082015250565b7f73776976656c20636f6e74726163742061646472657373206e6f742073657400600082015250565b7f63546f6b656e20726564656d7074696f6e206661696c65640000000000000000600082015250565b620043238162003efc565b81146200432f57600080fd5b50565b6200433d8162003f10565b81146200434957600080fd5b50565b620043578162003f3c565b81146200436357600080fd5b5056fe60806040523480156200001157600080fd5b5060405162000d3938038062000d3983398181016040528101906200003791906200020b565b83600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600681905550816003908051906020019062000097929190620000bb565b508060049080519060200190620000b0929190620000bb565b50505050506200048b565b828054620000c9906200037c565b90600052602060002090601f016020900481019282620000ed576000855562000139565b82601f106200010857805160ff191683800117855562000139565b8280016001018555821562000139579182015b82811115620001385782518255916020019190600101906200011b565b5b5090506200014891906200014c565b5090565b5b80821115620001675760008160009055506001016200014d565b5090565b6000620001826200017c84620002d2565b620002a9565b9050828152602081018484840111156200019b57600080fd5b620001a884828562000346565b509392505050565b600081519050620001c18162000457565b92915050565b600082601f830112620001d957600080fd5b8151620001eb8482602086016200016b565b91505092915050565b600081519050620002058162000471565b92915050565b600080600080608085870312156200022257600080fd5b60006200023287828801620001b0565b94505060206200024587828801620001f4565b935050604085015167ffffffffffffffff8111156200026357600080fd5b6200027187828801620001c7565b925050606085015167ffffffffffffffff8111156200028f57600080fd5b6200029d87828801620001c7565b91505092959194509250565b6000620002b5620002c8565b9050620002c38282620003b2565b919050565b6000604051905090565b600067ffffffffffffffff821115620002f057620002ef62000417565b5b620002fb8262000446565b9050602081019050919050565b600062000315826200031c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200036657808201518184015260208101905062000349565b8381111562000376576000848401525b50505050565b600060028204905060018216806200039557607f821691505b60208210811415620003ac57620003ab620003e8565b5b50919050565b620003bd8262000446565b810181811067ffffffffffffffff82111715620003df57620003de62000417565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620004628162000308565b81146200046e57600080fd5b50565b6200047c816200033c565b81146200048857600080fd5b50565b61089e806200049b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063b4c4a4c81161008c578063e541efa211610066578063e541efa214610224578063e7ba677414610255578063ee4db57014610271578063fdfe5f4d146102a1576100cf565b8063b4c4a4c8146101bc578063b9bb928c146101d8578063bba0ad39146101f4576100cf565b8063204f83f9146100d457806323b872dd146100f257806340c10f19146101225780636521b96a146101525780636f307dc31461016e5780639dc29fac1461018c575b600080fd5b6100dc6102bd565b6040516100e991906107c0565b60405180910390f35b61010c60048036038101906101079190610657565b6102c7565b60405161011991906107a5565b60405180910390f35b61013c600480360381019061013791906106a6565b6103c1565b60405161014991906107a5565b60405180910390f35b61016c600480360381019061016791906106e2565b61041f565b005b61017661043c565b6040516101839190610761565b60405180910390f35b6101a660048036038101906101a191906106a6565b610466565b6040516101b391906107a5565b60405180910390f35b6101d660048036038101906101d1919061070b565b6104c3565b005b6101f260048036038101906101ed91906106e2565b6104cd565b005b61020e6004803603810190610209919061062e565b6104ea565b60405161021b91906107c0565b60405180910390f35b61023e6004803603810190610239919061062e565b610502565b60405161024c92919061077c565b60405180910390f35b61026f600480360381019061026a919061062e565b610546565b005b61028b6004803603810190610286919061062e565b61058a565b60405161029891906107c0565b60405180910390f35b6102bb60048036038101906102b691906106e2565b6105a2565b005b6000600654905090565b60006102d16105bf565b83816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281602001818152505080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050600760029054906101000a900460ff169150509392505050565b600081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760019054906101000a900460ff16905092915050565b80600760026101000a81548160ff02191690831515021790555050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900460ff16905092915050565b8060068190555050565b80600760006101000a81548160ff02191690831515021790555050565b60006020528060005260406000206000915090505481565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090505481565b80600760016101000a81548160ff02191690831515021790555050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000813590506105fe81610823565b92915050565b6000813590506106138161083a565b92915050565b60008135905061062881610851565b92915050565b60006020828403121561064057600080fd5b600061064e848285016105ef565b91505092915050565b60008060006060848603121561066c57600080fd5b600061067a868287016105ef565b935050602061068b868287016105ef565b925050604061069c86828701610619565b9150509250925092565b600080604083850312156106b957600080fd5b60006106c7858286016105ef565b92505060206106d885828601610619565b9150509250929050565b6000602082840312156106f457600080fd5b600061070284828501610604565b91505092915050565b60006020828403121561071d57600080fd5b600061072b84828501610619565b91505092915050565b61073d816107db565b82525050565b61074c816107ed565b82525050565b61075b81610819565b82525050565b60006020820190506107766000830184610734565b92915050565b60006040820190506107916000830185610734565b61079e6020830184610752565b9392505050565b60006020820190506107ba6000830184610743565b92915050565b60006020820190506107d56000830184610752565b92915050565b60006107e6826107f9565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61082c816107db565b811461083757600080fd5b50565b610843816107ed565b811461084e57600080fd5b50565b61085a81610819565b811461086557600080fd5b5056fea2646970667358221220e787395d68a9a75e210b6a319824039b39d1fd4888dbf232260ea4ddd145117964736f6c6343000804003360806040523480156200001157600080fd5b5060405162000d1938038062000d198339818101604052810190620000379190620000f7565b8260078190555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001bf565b600081519050620000da816200018b565b92915050565b600081519050620000f181620001a5565b92915050565b6000806000606084860312156200010d57600080fd5b60006200011d86828701620000e0565b93505060206200013086828701620000c9565b92505060406200014386828701620000c9565b9150509250925092565b60006200015a8262000161565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000196816200014d565b8114620001a257600080fd5b50565b620001b08162000181565b8114620001bc57600080fd5b50565b610b4a80620001cf6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806375d69a39116100b8578063b7dd34831161007c578063b7dd348314610374578063bbce238614610392578063d0b9d032146103c2578063d6cb2c0d146103de578063da3de9e9146103fa578063e590c3621461041657610137565b806375d69a39146102be578063a01cfffb146102dc578063a701da691461030c578063b326258d14610328578063b4c4a4c81461035857610137565b80633dfa1f41116100ff5780633dfa1f41146102085780635c70b7c1146102385780635dfe12ac14610254578063613a28d1146102705780636b868d51146102a057610137565b8063012b264a1461013c5780630aa93b9b1461015a578063177946731461018a57806319caf46c146101ba578063204f83f9146101ea575b600080fd5b610144610447565b6040516101519190610a0d565b60405180910390f35b610174600480360381019061016f91906108da565b61046d565b6040516101819190610a6c565b60405180910390f35b6101a4600480360381019061019f9190610903565b610485565b6040516101b19190610a51565b60405180910390f35b6101d460048036038101906101cf91906108da565b61057f565b6040516101e19190610a6c565b60405180910390f35b6101f26105cc565b6040516101ff9190610a6c565b60405180910390f35b610222600480360381019061021d91906108da565b6105d6565b60405161022f9190610a6c565b60405180910390f35b610252600480360381019061024d919061098e565b6105ee565b005b61026e6004803603810190610269919061098e565b61060b565b005b61028a60048036038101906102859190610952565b610628565b6040516102979190610a51565b60405180910390f35b6102a8610686565b6040516102b59190610a51565b60405180910390f35b6102c661069d565b6040516102d39190610a0d565b60405180910390f35b6102f660048036038101906102f19190610952565b6106c3565b6040516103039190610a51565b60405180910390f35b6103266004803603810190610321919061098e565b610720565b005b610342600480360381019061033d9190610952565b61073d565b60405161034f9190610a51565b60405180910390f35b610372600480360381019061036d91906109b7565b61079b565b005b61037c6107a5565b6040516103899190610a0d565b60405180910390f35b6103ac60048036038101906103a791906108da565b6107cb565b6040516103b99190610a6c565b60405180910390f35b6103dc60048036038101906103d7919061098e565b6107e3565b005b6103f860048036038101906103f391906109b7565b610800565b005b610414600480360381019061040f919061098e565b61080a565b005b610430600480360381019061042b91906108da565b610827565b60405161043e929190610a28565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b600061048f61086b565b83816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281602001818152505080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050600960039054906101000a900460ff169150509392505050565b600081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008549050919050565b6000600754905090565b60006020528060005260406000206000915090505481565b80600960016101000a81548160ff02191690831515021790555050565b80600960026101000a81548160ff02191690831515021790555050565b600081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960029054906101000a900460ff16905092915050565b6000600960009054906101000a900460ff16905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960019054906101000a900460ff16905092915050565b80600960046101000a81548160ff02191690831515021790555050565b600081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960049054906101000a900460ff16905092915050565b8060078190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090505481565b80600960036101000a81548160ff02191690831515021790555050565b8060088190555050565b80600960006101000a81548160ff02191690831515021790555050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000813590506108aa81610acf565b92915050565b6000813590506108bf81610ae6565b92915050565b6000813590506108d481610afd565b92915050565b6000602082840312156108ec57600080fd5b60006108fa8482850161089b565b91505092915050565b60008060006060848603121561091857600080fd5b60006109268682870161089b565b93505060206109378682870161089b565b9250506040610948868287016108c5565b9150509250925092565b6000806040838503121561096557600080fd5b60006109738582860161089b565b9250506020610984858286016108c5565b9150509250929050565b6000602082840312156109a057600080fd5b60006109ae848285016108b0565b91505092915050565b6000602082840312156109c957600080fd5b60006109d7848285016108c5565b91505092915050565b6109e981610a87565b82525050565b6109f881610a99565b82525050565b610a0781610ac5565b82525050565b6000602082019050610a2260008301846109e0565b92915050565b6000604082019050610a3d60008301856109e0565b610a4a60208301846109fe565b9392505050565b6000602082019050610a6660008301846109ef565b92915050565b6000602082019050610a8160008301846109fe565b92915050565b6000610a9282610aa5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b610ad881610a87565b8114610ae357600080fd5b50565b610aef81610a99565b8114610afa57600080fd5b50565b610b0681610ac5565b8114610b1157600080fd5b5056fea264697066735822122070f97c12705575cb4b6608c34d6fbc0367a3ead3e58d3b4fca60efdd587f15e764736f6c63430008040033a2646970667358221220194759d99c010338f9cce1ccaba71d5ef89a18730847c5c337f98fb1f9e7929064736f6c63430008040033"

// DeployMarketPlace deploys a new Ethereum contract, binding an instance of MarketPlace to it.
func DeployMarketPlace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MarketPlace, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketPlaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// MarketPlace is an auto generated Go binding around an Ethereum contract.
type MarketPlace struct {
	MarketPlaceCaller     // Read-only binding to the contract
	MarketPlaceTransactor // Write-only binding to the contract
	MarketPlaceFilterer   // Log filterer for contract events
}

// MarketPlaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketPlaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketPlaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketPlaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketPlaceSession struct {
	Contract     *MarketPlace      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketPlaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketPlaceCallerSession struct {
	Contract *MarketPlaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MarketPlaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketPlaceTransactorSession struct {
	Contract     *MarketPlaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MarketPlaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketPlaceRaw struct {
	Contract *MarketPlace // Generic contract binding to access the raw methods on
}

// MarketPlaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketPlaceCallerRaw struct {
	Contract *MarketPlaceCaller // Generic read-only contract binding to access the raw methods on
}

// MarketPlaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketPlaceTransactorRaw struct {
	Contract *MarketPlaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarketPlace creates a new instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlace(address common.Address, backend bind.ContractBackend) (*MarketPlace, error) {
	contract, err := bindMarketPlace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// NewMarketPlaceCaller creates a new read-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceCaller(address common.Address, caller bind.ContractCaller) (*MarketPlaceCaller, error) {
	contract, err := bindMarketPlace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCaller{contract: contract}, nil
}

// NewMarketPlaceTransactor creates a new write-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketPlaceTransactor, error) {
	contract, err := bindMarketPlace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransactor{contract: contract}, nil
}

// NewMarketPlaceFilterer creates a new log filterer instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketPlaceFilterer, error) {
	contract, err := bindMarketPlace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceFilterer{contract: contract}, nil
}

// bindMarketPlace binds a generic wrapper to an already deployed contract.
func bindMarketPlace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.MarketPlaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceCaller) CTokenAddress(opts *bind.CallOpts, a common.Address, m *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "cTokenAddress", a, m)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceSession) CTokenAddress(a common.Address, m *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.CTokenAddress(&_MarketPlace.CallOpts, a, m)
}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) CTokenAddress(a common.Address, m *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.CTokenAddress(&_MarketPlace.CallOpts, a, m)
}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr)
func (_MarketPlace *MarketPlaceCaller) Markets(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr  common.Address
	ZcTokenAddr common.Address
	VaultAddr   common.Address
}, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "markets", arg0, arg1)

	outstruct := new(struct {
		CTokenAddr  common.Address
		ZcTokenAddr common.Address
		VaultAddr   common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CTokenAddr = out[0].(common.Address)
	outstruct.ZcTokenAddr = out[1].(common.Address)
	outstruct.VaultAddr = out[2].(common.Address)

	return *outstruct, err

}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr)
func (_MarketPlace *MarketPlaceSession) Markets(arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr  common.Address
	ZcTokenAddr common.Address
	VaultAddr   common.Address
}, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1)
}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr)
func (_MarketPlace *MarketPlaceCallerSession) Markets(arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr  common.Address
	ZcTokenAddr common.Address
	VaultAddr   common.Address
}, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1)
}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCaller) Mature(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "mature", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceSession) Mature(arg0 common.Address, arg1 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Mature(&_MarketPlace.CallOpts, arg0, arg1)
}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCallerSession) Mature(arg0 common.Address, arg1 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Mature(&_MarketPlace.CallOpts, arg0, arg1)
}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceCaller) MaturityRate(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "maturityRate", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceSession) MaturityRate(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _MarketPlace.Contract.MaturityRate(&_MarketPlace.CallOpts, arg0, arg1)
}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceCallerSession) MaturityRate(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _MarketPlace.Contract.MaturityRate(&_MarketPlace.CallOpts, arg0, arg1)
}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Swivel(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "swivel")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceSession) Swivel() (common.Address, error) {
	return _MarketPlace.Contract.Swivel(&_MarketPlace.CallOpts)
}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Swivel() (common.Address, error) {
	return _MarketPlace.Contract.Swivel(&_MarketPlace.CallOpts)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0xb50a66f7.
//
// Solidity: function burnZcTokenRemovingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) BurnZcTokenRemovingNotional(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "burnZcTokenRemovingNotional", u, m, t, a)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0xb50a66f7.
//
// Solidity: function burnZcTokenRemovingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) BurnZcTokenRemovingNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnZcTokenRemovingNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// BurnZcTokenRemovingNotional is a paid mutator transaction binding the contract method 0xb50a66f7.
//
// Solidity: function burnZcTokenRemovingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) BurnZcTokenRemovingNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnZcTokenRemovingNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x6ce327ec.
//
// Solidity: function createMarket(address u, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CreateMarket(opts *bind.TransactOpts, u common.Address, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "createMarket", u, m, c, n, s)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x6ce327ec.
//
// Solidity: function createMarket(address u, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceSession) CreateMarket(u common.Address, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, u, m, c, n, s)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x6ce327ec.
//
// Solidity: function createMarket(address u, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CreateMarket(u common.Address, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, u, m, c, n, s)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CustodialExit(opts *bind.TransactOpts, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "custodialExit", u, m, z, n, a)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) CustodialExit(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialExit(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CustodialExit(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialExit(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CustodialInitiate(opts *bind.TransactOpts, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "custodialInitiate", u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) CustodialInitiate(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialInitiate(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CustodialInitiate(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialInitiate(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) MatureMarket(opts *bind.TransactOpts, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "matureMarket", u, m)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceSession) MatureMarket(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MatureMarket(&_MarketPlace.TransactOpts, u, m)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) MatureMarket(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MatureMarket(&_MarketPlace.TransactOpts, u, m)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0xef267f2c.
//
// Solidity: function mintZcTokenAddingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) MintZcTokenAddingNotional(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "mintZcTokenAddingNotional", u, m, t, a)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0xef267f2c.
//
// Solidity: function mintZcTokenAddingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) MintZcTokenAddingNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintZcTokenAddingNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// MintZcTokenAddingNotional is a paid mutator transaction binding the contract method 0xef267f2c.
//
// Solidity: function mintZcTokenAddingNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) MintZcTokenAddingNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintZcTokenAddingNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) P2pVaultExchange(opts *bind.TransactOpts, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "p2pVaultExchange", u, m, f, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) P2pVaultExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pVaultExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) P2pVaultExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pVaultExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) P2pZcTokenExchange(opts *bind.TransactOpts, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "p2pZcTokenExchange", u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) P2pZcTokenExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pZcTokenExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) P2pZcTokenExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pZcTokenExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x40d37cdf.
//
// Solidity: function redeemVaultInterest(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) RedeemVaultInterest(opts *bind.TransactOpts, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "redeemVaultInterest", u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x40d37cdf.
//
// Solidity: function redeemVaultInterest(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceSession) RedeemVaultInterest(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemVaultInterest(&_MarketPlace.TransactOpts, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x40d37cdf.
//
// Solidity: function redeemVaultInterest(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) RedeemVaultInterest(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemVaultInterest(&_MarketPlace.TransactOpts, u, m)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x154e0f2e.
//
// Solidity: function redeemZcToken(address u, uint256 m, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) RedeemZcToken(opts *bind.TransactOpts, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "redeemZcToken", u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x154e0f2e.
//
// Solidity: function redeemZcToken(address u, uint256 m, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) RedeemZcToken(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemZcToken(&_MarketPlace.TransactOpts, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x154e0f2e.
//
// Solidity: function redeemZcToken(address u, uint256 m, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) RedeemZcToken(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemZcToken(&_MarketPlace.TransactOpts, u, m, a)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) SetSwivelAddress(opts *bind.TransactOpts, s common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "setSwivelAddress", s)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceSession) SetSwivelAddress(s common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetSwivelAddress(&_MarketPlace.TransactOpts, s)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) SetSwivelAddress(s common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetSwivelAddress(&_MarketPlace.TransactOpts, s)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) TransferVaultNotional(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "transferVaultNotional", u, m, t, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) TransferVaultNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) TransferVaultNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0x3cf9a4e3.
//
// Solidity: function transferVaultNotionalFee(address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) TransferVaultNotionalFee(opts *bind.TransactOpts, u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "transferVaultNotionalFee", u, m, f, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0x3cf9a4e3.
//
// Solidity: function transferVaultNotionalFee(address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) TransferVaultNotionalFee(u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotionalFee(&_MarketPlace.TransactOpts, u, m, f, a)
}

// TransferVaultNotionalFee is a paid mutator transaction binding the contract method 0x3cf9a4e3.
//
// Solidity: function transferVaultNotionalFee(address u, uint256 m, address f, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) TransferVaultNotionalFee(u common.Address, m *big.Int, f common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotionalFee(&_MarketPlace.TransactOpts, u, m, f, a)
}

// MarketPlaceCreateIterator is returned from FilterCreate and is used to iterate over the raw logs and unpacked data for Create events raised by the MarketPlace contract.
type MarketPlaceCreateIterator struct {
	Event *MarketPlaceCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCreate represents a Create event raised by the MarketPlace contract.
type MarketPlaceCreate struct {
	Underlying common.Address
	Maturity   *big.Int
	CToken     common.Address
	ZcToken    common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCreate is a free log retrieval operation binding the contract event 0x5c8943d544aa04815bd907fde89a7a9156cd14eb9ffe4f5c3b1277d7557a2d22.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken)
func (_MarketPlace *MarketPlaceFilterer) FilterCreate(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCreateIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "Create", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCreateIterator{contract: _MarketPlace.contract, event: "Create", logs: logs, sub: sub}, nil
}

// WatchCreate is a free log subscription operation binding the contract event 0x5c8943d544aa04815bd907fde89a7a9156cd14eb9ffe4f5c3b1277d7557a2d22.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken)
func (_MarketPlace *MarketPlaceFilterer) WatchCreate(opts *bind.WatchOpts, sink chan<- *MarketPlaceCreate, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "Create", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCreate)
				if err := _MarketPlace.contract.UnpackLog(event, "Create", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreate is a log parse operation binding the contract event 0x5c8943d544aa04815bd907fde89a7a9156cd14eb9ffe4f5c3b1277d7557a2d22.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken)
func (_MarketPlace *MarketPlaceFilterer) ParseCreate(log types.Log) (*MarketPlaceCreate, error) {
	event := new(MarketPlaceCreate)
	if err := _MarketPlace.contract.UnpackLog(event, "Create", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceCustodialExitIterator is returned from FilterCustodialExit and is used to iterate over the raw logs and unpacked data for CustodialExit events raised by the MarketPlace contract.
type MarketPlaceCustodialExitIterator struct {
	Event *MarketPlaceCustodialExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCustodialExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCustodialExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCustodialExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCustodialExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCustodialExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCustodialExit represents a CustodialExit event raised by the MarketPlace contract.
type MarketPlaceCustodialExit struct {
	Underlying common.Address
	Maturity   *big.Int
	ZcTarget   common.Address
	NTarget    common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCustodialExit is a free log retrieval operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterCustodialExit(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCustodialExitIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CustodialExit", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCustodialExitIterator{contract: _MarketPlace.contract, event: "CustodialExit", logs: logs, sub: sub}, nil
}

// WatchCustodialExit is a free log subscription operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchCustodialExit(opts *bind.WatchOpts, sink chan<- *MarketPlaceCustodialExit, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CustodialExit", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCustodialExit)
				if err := _MarketPlace.contract.UnpackLog(event, "CustodialExit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodialExit is a log parse operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseCustodialExit(log types.Log) (*MarketPlaceCustodialExit, error) {
	event := new(MarketPlaceCustodialExit)
	if err := _MarketPlace.contract.UnpackLog(event, "CustodialExit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceCustodialInitiateIterator is returned from FilterCustodialInitiate and is used to iterate over the raw logs and unpacked data for CustodialInitiate events raised by the MarketPlace contract.
type MarketPlaceCustodialInitiateIterator struct {
	Event *MarketPlaceCustodialInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCustodialInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCustodialInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCustodialInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCustodialInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCustodialInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCustodialInitiate represents a CustodialInitiate event raised by the MarketPlace contract.
type MarketPlaceCustodialInitiate struct {
	Underlying common.Address
	Maturity   *big.Int
	ZcTarget   common.Address
	NTarget    common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCustodialInitiate is a free log retrieval operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterCustodialInitiate(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCustodialInitiateIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CustodialInitiate", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCustodialInitiateIterator{contract: _MarketPlace.contract, event: "CustodialInitiate", logs: logs, sub: sub}, nil
}

// WatchCustodialInitiate is a free log subscription operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchCustodialInitiate(opts *bind.WatchOpts, sink chan<- *MarketPlaceCustodialInitiate, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CustodialInitiate", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCustodialInitiate)
				if err := _MarketPlace.contract.UnpackLog(event, "CustodialInitiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodialInitiate is a log parse operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseCustodialInitiate(log types.Log) (*MarketPlaceCustodialInitiate, error) {
	event := new(MarketPlaceCustodialInitiate)
	if err := _MarketPlace.contract.UnpackLog(event, "CustodialInitiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceMatureIterator is returned from FilterMature and is used to iterate over the raw logs and unpacked data for Mature events raised by the MarketPlace contract.
type MarketPlaceMatureIterator struct {
	Event *MarketPlaceMature // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceMatureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceMature)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceMature)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceMatureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceMatureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceMature represents a Mature event raised by the MarketPlace contract.
type MarketPlaceMature struct {
	Underlying   common.Address
	Maturity     *big.Int
	MaturityRate *big.Int
	Matured      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMature is a free log retrieval operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) FilterMature(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceMatureIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "Mature", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceMatureIterator{contract: _MarketPlace.contract, event: "Mature", logs: logs, sub: sub}, nil
}

// WatchMature is a free log subscription operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) WatchMature(opts *bind.WatchOpts, sink chan<- *MarketPlaceMature, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "Mature", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceMature)
				if err := _MarketPlace.contract.UnpackLog(event, "Mature", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMature is a log parse operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) ParseMature(log types.Log) (*MarketPlaceMature, error) {
	event := new(MarketPlaceMature)
	if err := _MarketPlace.contract.UnpackLog(event, "Mature", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceP2pVaultExchangeIterator is returned from FilterP2pVaultExchange and is used to iterate over the raw logs and unpacked data for P2pVaultExchange events raised by the MarketPlace contract.
type MarketPlaceP2pVaultExchangeIterator struct {
	Event *MarketPlaceP2pVaultExchange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceP2pVaultExchangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceP2pVaultExchange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceP2pVaultExchange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceP2pVaultExchangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceP2pVaultExchangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceP2pVaultExchange represents a P2pVaultExchange event raised by the MarketPlace contract.
type MarketPlaceP2pVaultExchange struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterP2pVaultExchange is a free log retrieval operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterP2pVaultExchange(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceP2pVaultExchangeIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "P2pVaultExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceP2pVaultExchangeIterator{contract: _MarketPlace.contract, event: "P2pVaultExchange", logs: logs, sub: sub}, nil
}

// WatchP2pVaultExchange is a free log subscription operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchP2pVaultExchange(opts *bind.WatchOpts, sink chan<- *MarketPlaceP2pVaultExchange, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "P2pVaultExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceP2pVaultExchange)
				if err := _MarketPlace.contract.UnpackLog(event, "P2pVaultExchange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseP2pVaultExchange is a log parse operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseP2pVaultExchange(log types.Log) (*MarketPlaceP2pVaultExchange, error) {
	event := new(MarketPlaceP2pVaultExchange)
	if err := _MarketPlace.contract.UnpackLog(event, "P2pVaultExchange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceP2pZcTokenExchangeIterator is returned from FilterP2pZcTokenExchange and is used to iterate over the raw logs and unpacked data for P2pZcTokenExchange events raised by the MarketPlace contract.
type MarketPlaceP2pZcTokenExchangeIterator struct {
	Event *MarketPlaceP2pZcTokenExchange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceP2pZcTokenExchange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceP2pZcTokenExchange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceP2pZcTokenExchange represents a P2pZcTokenExchange event raised by the MarketPlace contract.
type MarketPlaceP2pZcTokenExchange struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterP2pZcTokenExchange is a free log retrieval operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterP2pZcTokenExchange(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceP2pZcTokenExchangeIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "P2pZcTokenExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceP2pZcTokenExchangeIterator{contract: _MarketPlace.contract, event: "P2pZcTokenExchange", logs: logs, sub: sub}, nil
}

// WatchP2pZcTokenExchange is a free log subscription operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchP2pZcTokenExchange(opts *bind.WatchOpts, sink chan<- *MarketPlaceP2pZcTokenExchange, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "P2pZcTokenExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceP2pZcTokenExchange)
				if err := _MarketPlace.contract.UnpackLog(event, "P2pZcTokenExchange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseP2pZcTokenExchange is a log parse operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseP2pZcTokenExchange(log types.Log) (*MarketPlaceP2pZcTokenExchange, error) {
	event := new(MarketPlaceP2pZcTokenExchange)
	if err := _MarketPlace.contract.UnpackLog(event, "P2pZcTokenExchange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceRedeemVaultInterestIterator is returned from FilterRedeemVaultInterest and is used to iterate over the raw logs and unpacked data for RedeemVaultInterest events raised by the MarketPlace contract.
type MarketPlaceRedeemVaultInterestIterator struct {
	Event *MarketPlaceRedeemVaultInterest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceRedeemVaultInterestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceRedeemVaultInterest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceRedeemVaultInterest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceRedeemVaultInterestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceRedeemVaultInterestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceRedeemVaultInterest represents a RedeemVaultInterest event raised by the MarketPlace contract.
type MarketPlaceRedeemVaultInterest struct {
	Underlying common.Address
	Maturity   *big.Int
	Sender     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemVaultInterest is a free log retrieval operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) FilterRedeemVaultInterest(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int, sender []common.Address) (*MarketPlaceRedeemVaultInterestIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "RedeemVaultInterest", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceRedeemVaultInterestIterator{contract: _MarketPlace.contract, event: "RedeemVaultInterest", logs: logs, sub: sub}, nil
}

// WatchRedeemVaultInterest is a free log subscription operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) WatchRedeemVaultInterest(opts *bind.WatchOpts, sink chan<- *MarketPlaceRedeemVaultInterest, underlying []common.Address, maturity []*big.Int, sender []common.Address) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "RedeemVaultInterest", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceRedeemVaultInterest)
				if err := _MarketPlace.contract.UnpackLog(event, "RedeemVaultInterest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemVaultInterest is a log parse operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) ParseRedeemVaultInterest(log types.Log) (*MarketPlaceRedeemVaultInterest, error) {
	event := new(MarketPlaceRedeemVaultInterest)
	if err := _MarketPlace.contract.UnpackLog(event, "RedeemVaultInterest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceRedeemZcTokenIterator is returned from FilterRedeemZcToken and is used to iterate over the raw logs and unpacked data for RedeemZcToken events raised by the MarketPlace contract.
type MarketPlaceRedeemZcTokenIterator struct {
	Event *MarketPlaceRedeemZcToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceRedeemZcTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceRedeemZcToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceRedeemZcToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceRedeemZcTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceRedeemZcTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceRedeemZcToken represents a RedeemZcToken event raised by the MarketPlace contract.
type MarketPlaceRedeemZcToken struct {
	Underlying common.Address
	Maturity   *big.Int
	Sender     common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemZcToken is a free log retrieval operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterRedeemZcToken(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int, sender []common.Address) (*MarketPlaceRedeemZcTokenIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "RedeemZcToken", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceRedeemZcTokenIterator{contract: _MarketPlace.contract, event: "RedeemZcToken", logs: logs, sub: sub}, nil
}

// WatchRedeemZcToken is a free log subscription operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchRedeemZcToken(opts *bind.WatchOpts, sink chan<- *MarketPlaceRedeemZcToken, underlying []common.Address, maturity []*big.Int, sender []common.Address) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "RedeemZcToken", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceRedeemZcToken)
				if err := _MarketPlace.contract.UnpackLog(event, "RedeemZcToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemZcToken is a log parse operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseRedeemZcToken(log types.Log) (*MarketPlaceRedeemZcToken, error) {
	event := new(MarketPlaceRedeemZcToken)
	if err := _MarketPlace.contract.UnpackLog(event, "RedeemZcToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceTransferVaultNotionalIterator is returned from FilterTransferVaultNotional and is used to iterate over the raw logs and unpacked data for TransferVaultNotional events raised by the MarketPlace contract.
type MarketPlaceTransferVaultNotionalIterator struct {
	Event *MarketPlaceTransferVaultNotional // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceTransferVaultNotionalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceTransferVaultNotional)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceTransferVaultNotional)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceTransferVaultNotionalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceTransferVaultNotionalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceTransferVaultNotional represents a TransferVaultNotional event raised by the MarketPlace contract.
type MarketPlaceTransferVaultNotional struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransferVaultNotional is a free log retrieval operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterTransferVaultNotional(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceTransferVaultNotionalIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "TransferVaultNotional", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransferVaultNotionalIterator{contract: _MarketPlace.contract, event: "TransferVaultNotional", logs: logs, sub: sub}, nil
}

// WatchTransferVaultNotional is a free log subscription operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchTransferVaultNotional(opts *bind.WatchOpts, sink chan<- *MarketPlaceTransferVaultNotional, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "TransferVaultNotional", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceTransferVaultNotional)
				if err := _MarketPlace.contract.UnpackLog(event, "TransferVaultNotional", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferVaultNotional is a log parse operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseTransferVaultNotional(log types.Log) (*MarketPlaceTransferVaultNotional, error) {
	event := new(MarketPlaceTransferVaultNotional)
	if err := _MarketPlace.contract.UnpackLog(event, "TransferVaultNotional", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
