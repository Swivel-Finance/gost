// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package MarketPlace

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketPlaceMetaData contains all meta data concerning the MarketPlace contract.
var MarketPlaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"r\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Exists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Invalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"}],\"name\":\"buyPrincipalToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"}],\"name\":\"buyUnderlying\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address[8]\",\"name\":\"t\",\"type\":\"address[8]\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"d\",\"type\":\"uint8\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"}],\"name\":\"sellPrincipalToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"a\",\"type\":\"uint128\"}],\"name\":\"sellUnderlying\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101c0604052600060a081815260c082905260e08290526101008290526101208290526101408290526101608290526101808290526101a0919091526200004b906003906009620000a0565b503480156200005957600080fd5b5060405162003002380380620030028339810160408190526200007c9162000150565b600280546001600160a01b031916331790556001600160a01b031660805262000182565b600183019183908215620001275791602002820160005b83821115620000f657835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302620000b7565b8015620001255782816101000a81549060ff0219169055600101602081600001049283019260010302620000f6565b505b506200013592915062000139565b5090565b5b808211156200013557600081556001016200013a565b6000602082840312156200016357600080fd5b81516001600160a01b03811681146200017b57600080fd5b9392505050565b608051612e5d620001a5600039600081816101580152610dae0152612e5d6000f3fe60806040523480156200001157600080fd5b5060043610620000e45760003560e01c80638f38a555116200008b578063cef26d431162000062578063cef26d431462000253578063f851a440146200026a578063fe3ee169146200028b57600080fd5b80638f38a55514620001e1578063ad31b1981462000225578063c9ac53b1146200023c57600080fd5b806334503b1a11620000c057806334503b1a146200017a5780636d605fcf14620001b35780638ef6c83e14620001ca57600080fd5b8062dde10e14620000e9578063125cf47f14620001155780632ba29d381462000152575b600080fd5b62000100620000fa36600462001180565b620002a2565b60405190151581526020015b60405180910390f35b6200012c62000126366004620011d2565b620002cd565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016200010c565b6200012c7f000000000000000000000000000000000000000000000000000000000000000081565b620001916200018b3660046200123b565b62000316565b6040516fffffffffffffffffffffffffffffffff90911681526020016200010c565b62000100620001c436600462001293565b620005e8565b62000191620001db3660046200123b565b6200073d565b6200012c620001f2366004620012da565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b62000191620002363660046200123b565b62000988565b620001916200024d3660046200123b565b62000b20565b620001006200026436600462001384565b62000cb8565b6002546200012c9073ffffffffffffffffffffffffffffffffffffffff1681565b620001006200029c366004620014ab565b62000f1f565b60038160098110620002b357600080fd5b60209182820401919006915054906101000a900460ff1681565b60006020528260005260406000206020528160005260406000208160098110620002f657600080fd5b015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60008460038160ff1660098110620003325762000332620014eb565b602081049091015460ff601f9092166101000a90041615620003b5576040517f53a2556c00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7072696e6370616c20706175736564000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845282528083205481517fdc3bfba900000000000000000000000000000000000000000000000000000000815291519416936200048393859363dc3bfba99360048082019492939183900301908290875af115801562000443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046991906200151a565b82866fffffffffffffffffffffffffffffffff1662000fb9565b6040517f27bab0630000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff82169063bc3d1c4e90339083906327bab063906024015b6020604051808303816000875af11580156200050d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000533919062001541565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526fffffffffffffffffffffffffffffffff1660248201526044015b6020604051808303816000875af1158015620005b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005dd919062001541565b979650505050505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff163381146200063e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff85811660009081526001602090815260408083208884529091529020541615620006da576040517f1ed713cc00000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20616c726561647920657869737473000000000000000000000000006044820152606401620003ac565b505073ffffffffffffffffffffffffffffffffffffffff928316600090815260016020818152604080842095845294905292902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016919093161790915590565b60008460038160ff1660098110620007595762000759620014eb565b602081049091015460ff601f9092166101000a90041615620007d8576040517f53a2556c00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7072696e6370616c2070617573656400000000000000000000000000000000006044820152606401620003ac565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845282528083205481517f5001f3b5000000000000000000000000000000000000000000000000000000008152915194169362000866938593635001f3b59360048082019492939183900301908290875af115801562000443573d6000803e3d6000fd5b6040517ffdb0732d0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff82169063fe2846b1903390839063fdb0732d906024015b6020604051808303816000875af1158015620008f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000916919062001541565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526fffffffffffffffffffffffffffffffff90811660248301528716604482015260640162000597565b60008460038160ff1660098110620009a457620009a4620014eb565b602081049091015460ff601f9092166101000a9004161562000a23576040517f53a2556c00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7072696e6370616c2070617573656400000000000000000000000000000000006044820152606401620003ac565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845282528083205481517fdc3bfba9000000000000000000000000000000000000000000000000000000008152915194169362000ab193859363dc3bfba99360048082019492939183900301908290875af115801562000443573d6000803e3d6000fd5b6040517fb0f289210000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff821690639ebdc9b4903390839063b0f2892190602401620008d0565b60008460038160ff166009811062000b3c5762000b3c620014eb565b602081049091015460ff601f9092166101000a9004161562000bbb576040517f53a2556c00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7072696e6370616c2070617573656400000000000000000000000000000000006044820152606401620003ac565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845282528083205481517f5001f3b5000000000000000000000000000000000000000000000000000000008152915194169362000c49938593635001f3b59360048082019492939183900301908290875af115801562000443573d6000803e3d6000fd5b6040517f13e7bc8c0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff82169063bcc1694f90339083906313e7bc8c90602401620004ed565b60025460009073ffffffffffffffffffffffffffffffffffffffff1633811462000d0e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8a81166000908152602081815260408083208d8452909152902054161562000da8576040517f1ed713cc00000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d61726b657420616c72656164792065786973747300000000000000000000006044820152606401620003ac565b60008a8a7f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a8a60405162000de090620010d9565b62000df3989796959493929190620015aa565b604051809103906000f08015801562000e10573d6000803e3d6000fd5b50604080516101208101825273ffffffffffffffffffffffffffffffffffffffff83811682528c5181166020808401919091528d8101518216838501528d84015182166060808501919091528e015182166080808501919091528e0151821660a0808501919091528e0151821660c0808501919091528e0151821660e0808501919091528e01518216610100840152908f1660009081528082528381208f8252909152919091209192509062000ec990826009620010e7565b506040518b9073ffffffffffffffffffffffffffffffffffffffff8e16907f0ce205d5fda43f489af3d143ec11073757d0079e07852a6c1799f1e29e72e1ee90600090a35060019b9a5050505050505050505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff1633811462000f75576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260038560ff166009811062000f8f5762000f8f620014eb565b602091828204019190066101000a81548160ff021916908315150217905550600191505092915050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af19150506200101c816200108a565b62001084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7472616e73666572206661696c656400000000000000000000000000000000006044820152606401620003ac565b50505050565b6000803d836200109e57806000803e806000fd5b8060208114620010b9578015620010cb5760009250620010d0565b816000803e60005115159250620010d0565b600192505b50909392505050565b61180d806200161b83390190565b826009810192821562001157579160200282015b828111156200115757825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190620010fb565b506200116592915062001169565b5090565b5b808211156200116557600081556001016200116a565b6000602082840312156200119357600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114620011bd57600080fd5b50565b8035620011cd816200119a565b919050565b600080600060608486031215620011e857600080fd5b8335620011f5816200119a565b95602085013595506040909401359392505050565b803560ff81168114620011cd57600080fd5b6fffffffffffffffffffffffffffffffff81168114620011bd57600080fd5b600080600080608085870312156200125257600080fd5b6200125d856200120a565b935060208501356200126f816200119a565b925060408501359150606085013562001288816200121c565b939692955090935050565b600080600060608486031215620012a957600080fd5b8335620012b6816200119a565b9250602084013591506040840135620012cf816200119a565b809150509250925092565b60008060408385031215620012ee57600080fd5b8235620012fb816200119a565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f8401126200134b57600080fd5b50813567ffffffffffffffff8111156200136457600080fd5b6020830191508360208285010111156200137d57600080fd5b9250929050565b6000806000806000806000806101a0898b031215620013a257600080fd5b8835620013af816200119a565b97506020898101359750605f8a018b13620013c957600080fd5b604051610100810167ffffffffffffffff8282108183111715620013f157620013f162001309565b816040528291506101408d018e8111156200140b57600080fd5b60408e015b8181101562001432576200142481620011c0565b845292850192850162001410565b50839a508035945050808411156200144957600080fd5b620014578e858f0162001338565b90995097506101608d01359350889250808411156200147557600080fd5b505050620014868b828c0162001338565b90945092506200149c90506101808a016200120a565b90509295985092959890939650565b60008060408385031215620014bf57600080fd5b620014ca836200120a565b915060208301358015158114620014e057600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156200152d57600080fd5b81516200153a816200119a565b9392505050565b6000602082840312156200155457600080fd5b81516200153a816200121c565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff808b16835289602084015280891660408401525060c06060830152620015ec60c08301878962001561565b82810360808401526200160181868862001561565b91505060ff831660a0830152999850505050505050505056fe6101806040526003610140819052623f3f3f60e81b61016090815262000027919081620001f1565b50604080518082019091526003808252623f3f3f60e81b60209092019182526200005491600491620001f1565b506005805460ff191660121790557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96080523480156200009357600080fd5b506040516200180d3803806200180d833981016040819052620000b69162000381565b8282828282828260039080519060200190620000d4929190620001f1565b508151620000ea906004906020850190620001f1565b506005805460ff191660ff9290921691909117905550504660c081905262000112906200013b565b60a0525050506001600160a01b039586166101005250505060e091909152166101205262000514565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60036040516200016f919062000471565b60408051918290038220828201825260018352603160f81b602093840152815180840194909452838201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606084015260808301949094523060a0808401919091528451808403909101815260c09092019093528051920191909120919050565b828054620001ff9062000435565b90600052602060002090601f0160209004810192826200022357600085556200026e565b82601f106200023e57805160ff19168380011785556200026e565b828001600101855582156200026e579182015b828111156200026e57825182559160200191906001019062000251565b506200027c92915062000280565b5090565b5b808211156200027c576000815560010162000281565b80516001600160a01b0381168114620002af57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002dc57600080fd5b81516001600160401b0380821115620002f957620002f9620002b4565b604051601f8301601f19908116603f01168101908282118183101715620003245762000324620002b4565b816040528381526020925086838588010111156200034157600080fd5b600091505b8382101562000365578582018301518183018401529082019062000346565b83821115620003775760008385830101525b9695505050505050565b60008060008060008060c087890312156200039b57600080fd5b620003a68762000297565b955060208701519450620003bd6040880162000297565b60608801519094506001600160401b0380821115620003db57600080fd5b620003e98a838b01620002ca565b945060808901519150808211156200040057600080fd5b506200040f89828a01620002ca565b92505060a087015160ff811681146200042757600080fd5b809150509295509295509295565b600181811c908216806200044a57607f821691505b6020821081036200046b57634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c9150808316806200048e57607f831692505b60208084108203620004ae57634e487b7160e01b86526022600452602486fd5b818015620004c55760018114620004d75762000506565b60ff1986168952848901965062000506565b60008a81526020902060005b86811015620004fe5781548b820152908501908301620004e3565b505084890196505b509498975050505050505050565b60805160a05160c05160e051610100516101205161125c620005b16000396000818161026a015261058801526000818161033d015261052501526000818161023001528181610469015281816104b70152818161054d0152818161069b01526107670152600081816103d5015281816106f101526108e7015260008181610727015261091c0152600081816102b60152610851015261125c6000f3fe608060405234801561001057600080fd5b50600436106101ad5760003560e01c80634cdad506116100ee57806395d89b4111610097578063ce96cb7711610071578063ce96cb77146103f7578063d505accf1461040a578063d905777e146103f7578063dd62ed3e1461041f57600080fd5b806395d89b41146103b5578063a9059cbb146103bd578063cd0d0096146103d057600080fd5b806370a08231116100c857806370a082311461035f5780637bde82f2146101b25780637ecebe001461039557600080fd5b80634cdad5061461021057806354fd4d50146102ff5780636f307dc31461033857600080fd5b8063204f83f91161015b5780632ba29d38116101355780632ba29d381461026557806330adf81f146102b1578063313ce567146102d85780633644e515146102f757600080fd5b8063204f83f91461022b57806323b872dd1461025257806325a8d87d1461021057600080fd5b80630a28a4771161018c5780630a28a4771461021057806318160ddd146102235780631dc7f5211461021057600080fd5b8062f714ce146101b257806306fdde03146101d8578063095ea7b3146101ed575b600080fd5b6101c56101c0366004610e93565b610465565b6040519081526020015b60405180910390f35b6101e06105fc565b6040516101cf9190610ebf565b6102006101fb366004610f32565b61068a565b60405190151581526020016101cf565b6101c561021e366004610f5c565b610697565b6000546101c5565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b610200610260366004610f75565b6106cd565b61028c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101cf565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6005546102e59060ff1681565b60405160ff90911681526020016101cf565b6101c56106ed565b60408051808201909152600181527f310000000000000000000000000000000000000000000000000000000000000060208201526101e0565b61028c7f000000000000000000000000000000000000000000000000000000000000000081565b6101c561036d366004610fb1565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6101c56103a3366004610fb1565b60066020526000908152604090205481565b6101e0610749565b6102006103cb366004610f32565b610756565b6101c57f000000000000000000000000000000000000000000000000000000000000000081565b6101c5610405366004610fb1565b610763565b61041d610418366004610fcc565b6107be565b005b6101c561042d36600461103f565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260026020908152604080832093909416825291909152205490565b60007f00000000000000000000000000000000000000000000000000000000000000004210156104e8576040517f03a428230000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526024015b60405180910390fd5b6040517f70a03ced00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301523360448301528381166064830152608482018590527f000000000000000000000000000000000000000000000000000000000000000016906370a03ced9060a4016020604051808303816000875af11580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f59190611069565b9392505050565b6003805461060990611082565b80601f016020809104026020016040519081016040528092919081815260200182805461063590611082565b80156106825780601f1061065757610100808354040283529160200191610682565b820191906000526020600020905b81548152906001019060200180831161066557829003601f168201915b505050505081565b60006105f5338484610af9565b60007f00000000000000000000000000000000000000000000000000000000000000004210156106c957506000919050565b5090565b60006106d98483610b6f565b506106e5848484610c6a565b949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146107245761071f46610d9a565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6004805461060990611082565b60006105f5338484610c6a565b60007f000000000000000000000000000000000000000000000000000000000000000042101561079557506000919050565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b42841015610828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104df565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260066020526040812080547f0000000000000000000000000000000000000000000000000000000000000000918a918a918a91908661088283611104565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060007f0000000000000000000000000000000000000000000000000000000000000000461461091a5761091546610d9a565b61093c565b7f00000000000000000000000000000000000000000000000000000000000000005b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281019190915260428101839052606201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa158015610a00573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590610a7b57508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610ae1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104df565b610aec8a8a8a610af9565b5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260026020908152604080832094871680845294825280832086905551858152919392917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a35060019392505050565b600073ffffffffffffffffffffffffffffffffffffffff83163314610c615773ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c5f5782811015610c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45524332303a20496e73756666696369656e7420617070726f76616c0000000060448201526064016104df565b610c5d8433858403610af9565b505b505b50600192915050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040812054821115610cf9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f45524332303a20496e73756666696369656e742062616c616e6365000000000060448201526064016104df565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082208054869003905591851681522054610d3990839061113c565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526001602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b5d9086815260200190565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6003604051610dcc9190611154565b604080519182900382208282018252600183527f3100000000000000000000000000000000000000000000000000000000000000602093840152815180840194909452838201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606084015260808301949094523060a0808401919091528451808403909101815260c09092019093528051920191909120919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610e8e57600080fd5b919050565b60008060408385031215610ea657600080fd5b82359150610eb660208401610e6a565b90509250929050565b600060208083528351808285015260005b81811015610eec57858101830151858201604001528201610ed0565b81811115610efe576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008060408385031215610f4557600080fd5b610f4e83610e6a565b946020939093013593505050565b600060208284031215610f6e57600080fd5b5035919050565b600080600060608486031215610f8a57600080fd5b610f9384610e6a565b9250610fa160208501610e6a565b9150604084013590509250925092565b600060208284031215610fc357600080fd5b6105f582610e6a565b600080600080600080600060e0888a031215610fe757600080fd5b610ff088610e6a565b9650610ffe60208901610e6a565b95506040880135945060608801359350608088013560ff8116811461102257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561105257600080fd5b61105b83610e6a565b9150610eb660208401610e6a565b60006020828403121561107b57600080fd5b5051919050565b600181811c9082168061109657607f821691505b6020821081036110cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611135576111356110d5565b5060010190565b6000821982111561114f5761114f6110d5565b500190565b600080835481600182811c91508083168061117057607f831692505b602080841082036111a8577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b8180156111bc57600181146111eb57611218565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650611218565b60008a81526020902060005b868110156112105781548b8201529085019083016111f7565b505084890196505b50949897505050505050505056fea26469706673582212203b537120bd831c6abea83a28cae2abaf676da10b3ad92830c62773c41cc0820064736f6c634300080d0033a26469706673582212200a3872a04eac4c37472f357e31f9cecbae581d9fc3d3908353728d2cb411ba0964736f6c634300080d0033",
}

// MarketPlaceABI is the input ABI used to generate the binding from.
// Deprecated: Use MarketPlaceMetaData.ABI instead.
var MarketPlaceABI = MarketPlaceMetaData.ABI

// MarketPlaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MarketPlaceMetaData.Bin instead.
var MarketPlaceBin = MarketPlaceMetaData.Bin

// DeployMarketPlace deploys a new Ethereum contract, binding an instance of MarketPlace to it.
func DeployMarketPlace(auth *bind.TransactOpts, backend bind.ContractBackend, r common.Address) (common.Address, *types.Transaction, *MarketPlace, error) {
	parsed, err := MarketPlaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MarketPlaceBin), backend, r)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// MarketPlace is an auto generated Go binding around an Ethereum contract.
type MarketPlace struct {
	MarketPlaceCaller     // Read-only binding to the contract
	MarketPlaceTransactor // Write-only binding to the contract
	MarketPlaceFilterer   // Log filterer for contract events
}

// MarketPlaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketPlaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketPlaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketPlaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketPlaceSession struct {
	Contract     *MarketPlace      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketPlaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketPlaceCallerSession struct {
	Contract *MarketPlaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MarketPlaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketPlaceTransactorSession struct {
	Contract     *MarketPlaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MarketPlaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketPlaceRaw struct {
	Contract *MarketPlace // Generic contract binding to access the raw methods on
}

// MarketPlaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketPlaceCallerRaw struct {
	Contract *MarketPlaceCaller // Generic read-only contract binding to access the raw methods on
}

// MarketPlaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketPlaceTransactorRaw struct {
	Contract *MarketPlaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarketPlace creates a new instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlace(address common.Address, backend bind.ContractBackend) (*MarketPlace, error) {
	contract, err := bindMarketPlace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// NewMarketPlaceCaller creates a new read-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceCaller(address common.Address, caller bind.ContractCaller) (*MarketPlaceCaller, error) {
	contract, err := bindMarketPlace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCaller{contract: contract}, nil
}

// NewMarketPlaceTransactor creates a new write-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketPlaceTransactor, error) {
	contract, err := bindMarketPlace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransactor{contract: contract}, nil
}

// NewMarketPlaceFilterer creates a new log filterer instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketPlaceFilterer, error) {
	contract, err := bindMarketPlace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceFilterer{contract: contract}, nil
}

// bindMarketPlace binds a generic wrapper to an already deployed contract.
func bindMarketPlace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.MarketPlaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// Markets is a free data retrieval call binding the contract method 0x125cf47f.
//
// Solidity: function markets(address , uint256 , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceCaller) Markets(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int, arg2 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "markets", arg0, arg1, arg2)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Markets is a free data retrieval call binding the contract method 0x125cf47f.
//
// Solidity: function markets(address , uint256 , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceSession) Markets(arg0 common.Address, arg1 *big.Int, arg2 *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1, arg2)
}

// Markets is a free data retrieval call binding the contract method 0x125cf47f.
//
// Solidity: function markets(address , uint256 , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Markets(arg0 common.Address, arg1 *big.Int, arg2 *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1, arg2)
}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCaller) Paused(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "paused", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceSession) Paused(arg0 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Paused(&_MarketPlace.CallOpts, arg0)
}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCallerSession) Paused(arg0 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Paused(&_MarketPlace.CallOpts, arg0)
}

// Pools is a free data retrieval call binding the contract method 0x8f38a555.
//
// Solidity: function pools(address , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceCaller) Pools(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "pools", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Pools is a free data retrieval call binding the contract method 0x8f38a555.
//
// Solidity: function pools(address , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceSession) Pools(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.Pools(&_MarketPlace.CallOpts, arg0, arg1)
}

// Pools is a free data retrieval call binding the contract method 0x8f38a555.
//
// Solidity: function pools(address , uint256 ) view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Pools(arg0 common.Address, arg1 *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.Pools(&_MarketPlace.CallOpts, arg0, arg1)
}

// Redeemer is a free data retrieval call binding the contract method 0x2ba29d38.
//
// Solidity: function redeemer() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Redeemer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "redeemer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Redeemer is a free data retrieval call binding the contract method 0x2ba29d38.
//
// Solidity: function redeemer() view returns(address)
func (_MarketPlace *MarketPlaceSession) Redeemer() (common.Address, error) {
	return _MarketPlace.Contract.Redeemer(&_MarketPlace.CallOpts)
}

// Redeemer is a free data retrieval call binding the contract method 0x2ba29d38.
//
// Solidity: function redeemer() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Redeemer() (common.Address, error) {
	return _MarketPlace.Contract.Redeemer(&_MarketPlace.CallOpts)
}

// Burn is a paid mutator transaction binding the contract method 0xde7bf0a2.
//
// Solidity: function burn(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactor) Burn(opts *bind.TransactOpts, u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "burn", u, m, minRatio, maxRatio)
}

// Burn is a paid mutator transaction binding the contract method 0xde7bf0a2.
//
// Solidity: function burn(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceSession) Burn(u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.Burn(&_MarketPlace.TransactOpts, u, m, minRatio, maxRatio)
}

// Burn is a paid mutator transaction binding the contract method 0xde7bf0a2.
//
// Solidity: function burn(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactorSession) Burn(u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.Burn(&_MarketPlace.TransactOpts, u, m, minRatio, maxRatio)
}

// BurnForUnderlying is a paid mutator transaction binding the contract method 0x7674535d.
//
// Solidity: function burnForUnderlying(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256)
func (_MarketPlace *MarketPlaceTransactor) BurnForUnderlying(opts *bind.TransactOpts, u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "burnForUnderlying", u, m, minRatio, maxRatio)
}

// BurnForUnderlying is a paid mutator transaction binding the contract method 0x7674535d.
//
// Solidity: function burnForUnderlying(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256)
func (_MarketPlace *MarketPlaceSession) BurnForUnderlying(u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnForUnderlying(&_MarketPlace.TransactOpts, u, m, minRatio, maxRatio)
}

// BurnForUnderlying is a paid mutator transaction binding the contract method 0x7674535d.
//
// Solidity: function burnForUnderlying(address u, uint256 m, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256)
func (_MarketPlace *MarketPlaceTransactorSession) BurnForUnderlying(u common.Address, m *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BurnForUnderlying(&_MarketPlace.TransactOpts, u, m, minRatio, maxRatio)
}

// BuyPrincipalToken is a paid mutator transaction binding the contract method 0x8ef6c83e.
//
// Solidity: function buyPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactor) BuyPrincipalToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "buyPrincipalToken", p, u, m, a)
}

// BuyPrincipalToken is a paid mutator transaction binding the contract method 0x8ef6c83e.
//
// Solidity: function buyPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceSession) BuyPrincipalToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BuyPrincipalToken(&_MarketPlace.TransactOpts, p, u, m, a)
}

// BuyPrincipalToken is a paid mutator transaction binding the contract method 0x8ef6c83e.
//
// Solidity: function buyPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactorSession) BuyPrincipalToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BuyPrincipalToken(&_MarketPlace.TransactOpts, p, u, m, a)
}

// BuyUnderlying is a paid mutator transaction binding the contract method 0xad31b198.
//
// Solidity: function buyUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactor) BuyUnderlying(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "buyUnderlying", p, u, m, a)
}

// BuyUnderlying is a paid mutator transaction binding the contract method 0xad31b198.
//
// Solidity: function buyUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceSession) BuyUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BuyUnderlying(&_MarketPlace.TransactOpts, p, u, m, a)
}

// BuyUnderlying is a paid mutator transaction binding the contract method 0xad31b198.
//
// Solidity: function buyUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactorSession) BuyUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.BuyUnderlying(&_MarketPlace.TransactOpts, p, u, m, a)
}

// CreateMarket is a paid mutator transaction binding the contract method 0xcef26d43.
//
// Solidity: function createMarket(address u, uint256 m, address[8] t, string n, string s, uint8 d) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CreateMarket(opts *bind.TransactOpts, u common.Address, m *big.Int, t [8]common.Address, n string, s string, d uint8) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "createMarket", u, m, t, n, s, d)
}

// CreateMarket is a paid mutator transaction binding the contract method 0xcef26d43.
//
// Solidity: function createMarket(address u, uint256 m, address[8] t, string n, string s, uint8 d) returns(bool)
func (_MarketPlace *MarketPlaceSession) CreateMarket(u common.Address, m *big.Int, t [8]common.Address, n string, s string, d uint8) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, u, m, t, n, s, d)
}

// CreateMarket is a paid mutator transaction binding the contract method 0xcef26d43.
//
// Solidity: function createMarket(address u, uint256 m, address[8] t, string n, string s, uint8 d) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CreateMarket(u common.Address, m *big.Int, t [8]common.Address, n string, s string, d uint8) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, u, m, t, n, s, d)
}

// Mint is a paid mutator transaction binding the contract method 0xdfc8fff6.
//
// Solidity: function mint(address u, uint256 m, uint256 underlyingAmount, uint256 principalTokenAmount, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactor) Mint(opts *bind.TransactOpts, u common.Address, m *big.Int, underlyingAmount *big.Int, principalTokenAmount *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "mint", u, m, underlyingAmount, principalTokenAmount, minRatio, maxRatio)
}

// Mint is a paid mutator transaction binding the contract method 0xdfc8fff6.
//
// Solidity: function mint(address u, uint256 m, uint256 underlyingAmount, uint256 principalTokenAmount, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceSession) Mint(u common.Address, m *big.Int, underlyingAmount *big.Int, principalTokenAmount *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.Mint(&_MarketPlace.TransactOpts, u, m, underlyingAmount, principalTokenAmount, minRatio, maxRatio)
}

// Mint is a paid mutator transaction binding the contract method 0xdfc8fff6.
//
// Solidity: function mint(address u, uint256 m, uint256 underlyingAmount, uint256 principalTokenAmount, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactorSession) Mint(u common.Address, m *big.Int, underlyingAmount *big.Int, principalTokenAmount *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.Mint(&_MarketPlace.TransactOpts, u, m, underlyingAmount, principalTokenAmount, minRatio, maxRatio)
}

// MintWithUnderlying is a paid mutator transaction binding the contract method 0x23f86bef.
//
// Solidity: function mintWithUnderlying(address u, uint256 m, uint256 a, uint256 ptBought, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactor) MintWithUnderlying(opts *bind.TransactOpts, u common.Address, m *big.Int, a *big.Int, ptBought *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "mintWithUnderlying", u, m, a, ptBought, minRatio, maxRatio)
}

// MintWithUnderlying is a paid mutator transaction binding the contract method 0x23f86bef.
//
// Solidity: function mintWithUnderlying(address u, uint256 m, uint256 a, uint256 ptBought, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceSession) MintWithUnderlying(u common.Address, m *big.Int, a *big.Int, ptBought *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintWithUnderlying(&_MarketPlace.TransactOpts, u, m, a, ptBought, minRatio, maxRatio)
}

// MintWithUnderlying is a paid mutator transaction binding the contract method 0x23f86bef.
//
// Solidity: function mintWithUnderlying(address u, uint256 m, uint256 a, uint256 ptBought, uint256 minRatio, uint256 maxRatio) returns(uint256, uint256, uint256)
func (_MarketPlace *MarketPlaceTransactorSession) MintWithUnderlying(u common.Address, m *big.Int, a *big.Int, ptBought *big.Int, minRatio *big.Int, maxRatio *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MintWithUnderlying(&_MarketPlace.TransactOpts, u, m, a, ptBought, minRatio, maxRatio)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) Pause(opts *bind.TransactOpts, p uint8, s bool) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "pause", p, s)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool s) returns(bool)
func (_MarketPlace *MarketPlaceSession) Pause(p uint8, s bool) (*types.Transaction, error) {
	return _MarketPlace.Contract.Pause(&_MarketPlace.TransactOpts, p, s)
}

// Pause is a paid mutator transaction binding the contract method 0xfe3ee169.
//
// Solidity: function pause(uint8 p, bool s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) Pause(p uint8, s bool) (*types.Transaction, error) {
	return _MarketPlace.Contract.Pause(&_MarketPlace.TransactOpts, p, s)
}

// SellPrincipalToken is a paid mutator transaction binding the contract method 0x34503b1a.
//
// Solidity: function sellPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactor) SellPrincipalToken(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "sellPrincipalToken", p, u, m, a)
}

// SellPrincipalToken is a paid mutator transaction binding the contract method 0x34503b1a.
//
// Solidity: function sellPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceSession) SellPrincipalToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.SellPrincipalToken(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SellPrincipalToken is a paid mutator transaction binding the contract method 0x34503b1a.
//
// Solidity: function sellPrincipalToken(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactorSession) SellPrincipalToken(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.SellPrincipalToken(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SellUnderlying is a paid mutator transaction binding the contract method 0xc9ac53b1.
//
// Solidity: function sellUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactor) SellUnderlying(opts *bind.TransactOpts, p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "sellUnderlying", p, u, m, a)
}

// SellUnderlying is a paid mutator transaction binding the contract method 0xc9ac53b1.
//
// Solidity: function sellUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceSession) SellUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.SellUnderlying(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SellUnderlying is a paid mutator transaction binding the contract method 0xc9ac53b1.
//
// Solidity: function sellUnderlying(uint8 p, address u, uint256 m, uint128 a) returns(uint128)
func (_MarketPlace *MarketPlaceTransactorSession) SellUnderlying(p uint8, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.SellUnderlying(&_MarketPlace.TransactOpts, p, u, m, a)
}

// SetPool is a paid mutator transaction binding the contract method 0x6d605fcf.
//
// Solidity: function setPool(address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) SetPool(opts *bind.TransactOpts, u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "setPool", u, m, a)
}

// SetPool is a paid mutator transaction binding the contract method 0x6d605fcf.
//
// Solidity: function setPool(address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceSession) SetPool(u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetPool(&_MarketPlace.TransactOpts, u, m, a)
}

// SetPool is a paid mutator transaction binding the contract method 0x6d605fcf.
//
// Solidity: function setPool(address u, uint256 m, address a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) SetPool(u common.Address, m *big.Int, a common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetPool(&_MarketPlace.TransactOpts, u, m, a)

}

// MarketPlaceCreateMarketIterator is returned from FilterCreateMarket and is used to iterate over the raw logs and unpacked data for CreateMarket events raised by the MarketPlace contract.
type MarketPlaceCreateMarketIterator struct {
	Event *MarketPlaceCreateMarket // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCreateMarketIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCreateMarket)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCreateMarket)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCreateMarketIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCreateMarketIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCreateMarket represents a CreateMarket event raised by the MarketPlace contract.
type MarketPlaceCreateMarket struct {
	Underlying common.Address
	Maturity   *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCreateMarket is a free log retrieval operation binding the contract event 0x0ce205d5fda43f489af3d143ec11073757d0079e07852a6c1799f1e29e72e1ee.
//
// Solidity: event CreateMarket(address indexed underlying, uint256 indexed maturity)
func (_MarketPlace *MarketPlaceFilterer) FilterCreateMarket(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCreateMarketIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CreateMarket", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCreateMarketIterator{contract: _MarketPlace.contract, event: "CreateMarket", logs: logs, sub: sub}, nil
}

// WatchCreateMarket is a free log subscription operation binding the contract event 0x0ce205d5fda43f489af3d143ec11073757d0079e07852a6c1799f1e29e72e1ee.
//
// Solidity: event CreateMarket(address indexed underlying, uint256 indexed maturity)
func (_MarketPlace *MarketPlaceFilterer) WatchCreateMarket(opts *bind.WatchOpts, sink chan<- *MarketPlaceCreateMarket, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CreateMarket", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCreateMarket)
				if err := _MarketPlace.contract.UnpackLog(event, "CreateMarket", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateMarket is a log parse operation binding the contract event 0x0ce205d5fda43f489af3d143ec11073757d0079e07852a6c1799f1e29e72e1ee.
//
// Solidity: event CreateMarket(address indexed underlying, uint256 indexed maturity)
func (_MarketPlace *MarketPlaceFilterer) ParseCreateMarket(log types.Log) (*MarketPlaceCreateMarket, error) {
	event := new(MarketPlaceCreateMarket)
	if err := _MarketPlace.contract.UnpackLog(event, "CreateMarket", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
