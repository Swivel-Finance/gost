// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package marketplace

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MarketPlaceABI is the input ABI used to generate the binding from.
const MarketPlaceABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcToken\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodialExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zcTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodialInitiate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matured\",\"type\":\"uint256\"}],\"name\":\"Mature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2pVaultExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"P2pZcTokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RedeemVaultInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemZcToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferVaultNotional\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"cTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"custodialExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"z\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"custodialInitiate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zcTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"matureMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maturityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"p2pVaultExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"p2pZcTokenExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"redeemVaultInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"redeemZcToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"}],\"name\":\"setSwivelAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swivel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"transferVaultNotional\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// MarketPlaceBin is the compiled bytecode used for deploying new contracts.
var MarketPlaceBin = "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c6151da610074600039600081816119a701528181612292015261236f01526151da6000f3fe60806040523480156200001157600080fd5b5060043610620001185760003560e01c806365a963aa11620000a5578063c86adf7c116200006f578063c86adf7c1462000393578063e5a2aa6214620003c9578063f851a44014620003ff578063f8e51bcb14620004215762000118565b806365a963aa14620002bb5780636ce327ec14620002f15780638c6b9b411462000327578063bddbfbe4146200035d5762000118565b806327ee93be11620000e757806327ee93be14620001e357806340d37cdf14620002195780635292ecf2146200024f5780635db0ae5814620002855762000118565b8063012b264a146200011d57806305e1dc25146200013f578063154e0f2e146200017557806317b3bba714620001ab575b600080fd5b6200012762000457565b60405162000136919062002f9e565b60405180910390f35b6200015d600480360381019062000157919062002a50565b6200047d565b6040516200016c919062002f9e565b60405180910390f35b6200019360048036038101906200018d919062002c33565b620004fa565b604051620001a29190620030ea565b60405180910390f35b620001c96004803603810190620001c3919062002a50565b62000c7f565b604051620001da9392919062002fe8565b60405180910390f35b620002016004803603810190620001fb919062002a50565b62000d16565b604051620002109190620030ea565b60405180910390f35b62000237600480360381019062000231919062002a50565b62000d45565b604051620002469190620030ea565b60405180910390f35b6200026d600480360381019062000267919062002bc7565b6200108f565b6040516200027c9190620030ea565b60405180910390f35b620002a360048036038101906200029d919062002a50565b6200123b565b604051620002b29190620030ea565b60405180910390f35b620002d96004803603810190620002d3919062002a91565b62001761565b604051620002e89190620030ea565b60405180910390f35b6200030f600480360381019062000309919062002b13565b620019a3565b6040516200031e9190620030ea565b60405180910390f35b6200034560048036038101906200033f919062002a91565b62001ca0565b604051620003549190620030ea565b60405180910390f35b6200037b600480360381019062000375919062002a91565b62002027565b6040516200038a9190620030ea565b60405180910390f35b620003b16004803603810190620003ab919062002a50565b62002269565b604051620003c0919062003305565b60405180910390f35b620003e76004803603810190620003e1919062002a24565b6200228e565b604051620003f69190620030ea565b60405180910390f35b620004096200236d565b60405162000418919062002f9e565b60405180910390f35b6200043f600480360381019062000439919062002a91565b62002391565b6040516200044e9190620030ea565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16620008d6576200056b84846200123b565b620005ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005a4906200327d565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016200065c92919062003062565b602060405180830381600087803b1580156200067757600080fd5b505af11580156200068c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b2919062002c89565b620006f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006eb906200329f565b60405180910390fd5b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3846040518263ffffffff1660e01b8152600401620007a3919062003305565b602060405180830381600087803b158015620007be57600080fd5b505af1158015620007d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f9919062002cb5565b146200083c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200083390620032e3565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016200087992919062003062565b602060405180830381600087803b1580156200089457600080fd5b505af1158015620008a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008cf919062002c89565b5062000c0c565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016200098592919062003062565b602060405180830381600087803b158015620009a057600080fd5b505af1158015620009b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009db919062002c89565b62000a1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a14906200329f565b60405180910390fd5b600062000a2c85858562002718565b905060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3836040518263ffffffff1660e01b815260040162000add919062003305565b602060405180830381600087803b15801562000af857600080fd5b505af115801562000b0d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b33919062002cb5565b1462000b76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b6d90620032e3565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040162000bb392919062003062565b602060405180830381600087803b15801562000bce57600080fd5b505af115801562000be3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c09919062002c89565b50505b3373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e458560405162000c6c919062003305565b60405180910390a4600190509392505050565b6000602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319caf46c336040518263ffffffff1660e01b815260040162000df5919062002f9e565b602060405180830381600087803b15801562000e1057600080fd5b505af115801562000e25573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e4b919062002cb5565b905060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663852a12e3836040518263ffffffff1660e01b815260040162000efc919062003305565b602060405180830381600087803b15801562000f1757600080fd5b505af115801562000f2c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f52919062002cb5565b1462000f95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f8c906200325b565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040162000fd292919062003062565b602060405180830381600087803b15801562000fed57600080fd5b505af115801562001002573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001028919062002c89565b503373ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff167f646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c27987460405160405180910390a4600191505092915050565b60008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663177946733385856040518463ffffffff1660e01b8152600401620011429392919062003025565b602060405180830381600087803b1580156200115d57600080fd5b505af115801562001172573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001198919062002c89565b620011da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011d190620031f5565b60405180910390fd5b838573ffffffffffffffffffffffffffffffffffffffff167f1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098338686604051620012279392919062003025565b60405180910390a360019050949350505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1615620012de576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012d590620032c1565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663204f83f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200139757600080fd5b505afa158015620013ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013d2919062002cb5565b42101562001417576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200140e906200316d565b60405180910390fd5b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620014d457600080fd5b505af1158015620014e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200150f919062002cb5565b905080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555060018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff0219169083151502179055506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b868d516040518163ffffffff1660e01b815260040160206040518083038186803b1580156200168757600080fd5b505afa1580156200169c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016c2919062002c89565b62001704576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016fb906200316d565b60405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff167e80e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a442846040516200174e9291906200334f565b60405180910390a3600191505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620017f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017ee9062003107565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040518463ffffffff1660e01b8152600401620018a89392919062003025565b602060405180830381600087803b158015620018c357600080fd5b505af1158015620018d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018fe919062002c89565b62001940576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620019379062003239565b60405180910390fd5b858773ffffffffffffffffffffffffffffffffffffffff167f86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef544228787876040516200198d9392919062003025565b60405180910390a3600191505095945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001a37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a2e906200314b565b60405180910390fd5b60008787868660405162001a4b906200293a565b62001a5a94939291906200308f565b604051809103906000f08015801562001a77573d6000803e3d6000fd5b5090506000878760405162001a8c9062002948565b62001a9992919062003322565b604051809103906000f08015801562001ab6573d6000803e3d6000fd5b50905060405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff168152506000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050878973ffffffffffffffffffffffffffffffffffffffff167f5c8943d544aa04815bd907fde89a7a9156cd14eb9ffe4f5c3b1277d7557a2d22898560405162001c8892919062002fbb565b60405180910390a36001935050505095945050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001d36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001d2d9062003107565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac86856040518363ffffffff1660e01b815260040162001de592919062003062565b602060405180830381600087803b15801562001e0057600080fd5b505af115801562001e15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e3b919062002c89565b62001e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001e749062003129565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663613a28d185856040518363ffffffff1660e01b815260040162001f2c92919062003062565b602060405180830381600087803b15801562001f4757600080fd5b505af115801562001f5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f82919062002c89565b62001fc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001fbb9062003217565b60405180910390fd5b858773ffffffffffffffffffffffffffffffffffffffff167f219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59878787604051620020119392919062003025565b60405180910390a3600191505095945050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620020bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620020b49062003107565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663177946738686866040518463ffffffff1660e01b81526004016200216e9392919062003025565b602060405180830381600087803b1580156200218957600080fd5b505af11580156200219e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021c4919062002c89565b62002206576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620021fd906200318f565b60405180910390fd5b858773ffffffffffffffffffffffffffffffffffffffff167f31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152878787604051620022539392919062003025565b60405180910390a3600191505095945050505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b60007f00000000000000000000000000000000000000000000000000000000000000008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162002319906200314b565b60405180910390fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462002427576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200241e9062003107565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1986856040518363ffffffff1660e01b8152600401620024d692919062003062565b602060405180830381600087803b158015620024f157600080fd5b505af115801562002506573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200252c919062002c89565b6200256e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200256590620031d3565b60405180910390fd5b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a01cfffb85856040518363ffffffff1660e01b81526004016200261d92919062003062565b602060405180830381600087803b1580156200263857600080fd5b505af11580156200264d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002673919062002c89565b620026b5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620026ac90620031b1565b60405180910390fd5b858773ffffffffffffffffffffffffffffffffffffffff167f8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516878787604051620027029392919062003025565b60405180910390a3600191505095945050505050565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020546000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200282757600080fd5b505af11580156200283c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002862919062002cb5565b6200286e9190620034ed565b90506000633b9aca0067016345785d8a0000600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020546a52b7d2dcc80cd2e400000085620028ea91906200348c565b620028f6919062003454565b62002902919062003454565b6200290e9190620033f7565b9050633b9aca0084826200292391906200348c565b6200292f919062003454565b925050509392505050565b610d39806200394183390190565b610b2b806200467a83390190565b60006200296d6200296784620033a5565b6200337c565b9050828152602081018484840111156200298657600080fd5b6200299384828562003572565b509392505050565b600081359050620029ac81620038f2565b92915050565b600081519050620029c3816200390c565b92915050565b600082601f830112620029db57600080fd5b8135620029ed84826020860162002956565b91505092915050565b60008135905062002a078162003926565b92915050565b60008151905062002a1e8162003926565b92915050565b60006020828403121562002a3757600080fd5b600062002a47848285016200299b565b91505092915050565b6000806040838503121562002a6457600080fd5b600062002a74858286016200299b565b925050602062002a8785828601620029f6565b9150509250929050565b600080600080600060a0868803121562002aaa57600080fd5b600062002aba888289016200299b565b955050602062002acd88828901620029f6565b945050604062002ae0888289016200299b565b935050606062002af3888289016200299b565b925050608062002b0688828901620029f6565b9150509295509295909350565b600080600080600060a0868803121562002b2c57600080fd5b600062002b3c888289016200299b565b955050602062002b4f88828901620029f6565b945050604062002b62888289016200299b565b935050606086013567ffffffffffffffff81111562002b8057600080fd5b62002b8e88828901620029c9565b925050608086013567ffffffffffffffff81111562002bac57600080fd5b62002bba88828901620029c9565b9150509295509295909350565b6000806000806080858703121562002bde57600080fd5b600062002bee878288016200299b565b945050602062002c0187828801620029f6565b935050604062002c14878288016200299b565b925050606062002c2787828801620029f6565b91505092959194509250565b60008060006060848603121562002c4957600080fd5b600062002c59868287016200299b565b935050602062002c6c86828701620029f6565b925050604062002c7f86828701620029f6565b9150509250925092565b60006020828403121562002c9c57600080fd5b600062002cac84828501620029b2565b91505092915050565b60006020828403121562002cc857600080fd5b600062002cd88482850162002a0d565b91505092915050565b62002cec8162003528565b82525050565b62002cfd816200353c565b82525050565b600062002d1082620033db565b62002d1c8185620033e6565b935062002d2e81856020860162003581565b62002d39816200367a565b840191505092915050565b600062002d53601e83620033e6565b915062002d60826200368b565b602082019050919050565b600062002d7a600b83620033e6565b915062002d8782620036b4565b602082019050919050565b600062002da1601483620033e6565b915062002dae82620036dd565b602082019050919050565b600062002dc8601483620033e6565b915062002dd58262003706565b602082019050919050565b600062002def601883620033e6565b915062002dfc826200372f565b602082019050919050565b600062002e16601383620033e6565b915062002e238262003758565b602082019050919050565b600062002e3d600b83620033e6565b915062002e4a8262003781565b602082019050919050565b600062002e64601583620033e6565b915062002e7182620037aa565b602082019050919050565b600062002e8b601683620033e6565b915062002e9882620037d3565b602082019050919050565b600062002eb2601783620033e6565b915062002ebf82620037fc565b602082019050919050565b600062002ed9601f83620033e6565b915062002ee68262003825565b602082019050919050565b600062002f00601b83620033e6565b915062002f0d826200384e565b602082019050919050565b600062002f27600e83620033e6565b915062002f348262003877565b602082019050919050565b600062002f4e601683620033e6565b915062002f5b82620038a0565b602082019050919050565b600062002f75601883620033e6565b915062002f8282620038c9565b602082019050919050565b62002f988162003568565b82525050565b600060208201905062002fb5600083018462002ce1565b92915050565b600060408201905062002fd2600083018562002ce1565b62002fe1602083018462002ce1565b9392505050565b600060608201905062002fff600083018662002ce1565b6200300e602083018562002ce1565b6200301d604083018462002ce1565b949350505050565b60006060820190506200303c600083018662002ce1565b6200304b602083018562002ce1565b6200305a604083018462002f8d565b949350505050565b600060408201905062003079600083018562002ce1565b62003088602083018462002f8d565b9392505050565b6000608082019050620030a6600083018762002ce1565b620030b5602083018662002f8d565b8181036040830152620030c9818562002d03565b90508181036060830152620030df818462002d03565b905095945050505050565b600060208201905062003101600083018462002cf2565b92915050565b60006020820190508181036000830152620031228162002d44565b9050919050565b60006020820190508181036000830152620031448162002d6b565b9050919050565b60006020820190508181036000830152620031668162002d92565b9050919050565b60006020820190508181036000830152620031888162002db9565b9050919050565b60006020820190508181036000830152620031aa8162002de0565b9050919050565b60006020820190508181036000830152620031cc8162002e07565b9050919050565b60006020820190508181036000830152620031ee8162002e2e565b9050919050565b60006020820190508181036000830152620032108162002e55565b9050919050565b60006020820190508181036000830152620032328162002e7c565b9050919050565b60006020820190508181036000830152620032548162002ea3565b9050919050565b60006020820190508181036000830152620032768162002eca565b9050919050565b60006020820190508181036000830152620032988162002ef1565b9050919050565b60006020820190508181036000830152620032ba8162002f18565b9050919050565b60006020820190508181036000830152620032dc8162002f3f565b9050919050565b60006020820190508181036000830152620032fe8162002f66565b9050919050565b60006020820190506200331c600083018462002f8d565b92915050565b600060408201905062003339600083018562002f8d565b62003348602083018462002ce1565b9392505050565b600060408201905062003366600083018562002f8d565b62003375602083018462002f8d565b9392505050565b6000620033886200339b565b9050620033968282620035b7565b919050565b6000604051905090565b600067ffffffffffffffff821115620033c357620033c26200364b565b5b620033ce826200367a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000620034048262003568565b9150620034118362003568565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620034495762003448620035ed565b5b828201905092915050565b6000620034618262003568565b91506200346e8362003568565b9250826200348157620034806200361c565b5b828204905092915050565b6000620034998262003568565b9150620034a68362003568565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620034e257620034e1620035ed565b5b828202905092915050565b6000620034fa8262003568565b9150620035078362003568565b9250828210156200351d576200351c620035ed565b5b828203905092915050565b6000620035358262003548565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015620035a157808201518184015260208101905062003584565b83811115620035b1576000848401525b50505050565b620035c2826200367a565b810181811067ffffffffffffffff82111715620035e457620035e36200364b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f73656e646572206d7573742062652053776976656c20636f6e74726163740000600082015250565b7f6275726e206661696c6564000000000000000000000000000000000000000000600082015250565b7f73656e646572206d7573742062652061646d696e000000000000000000000000600082015250565b7f6d61747572697479206e6f742072656163686564000000000000000000000000600082015250565b7f7472616e73666572206e6f74696f6e616c206661696c65640000000000000000600082015250565b7f616464206e6f74696f6e616c206661696c656400000000000000000000000000600082015250565b7f6d696e74206661696c6564000000000000000000000000000000000000000000600082015250565b7f7661756c74207472616e73666572206661696c65640000000000000000000000600082015250565b7f72656d6f7665206e6f74696f6e616c206661696c656400000000000000000000600082015250565b7f7a63546f6b656e207472616e73666572206661696c6564000000000000000000600082015250565b7f726564656d7074696f6e2066726f6d20436f6d706f756e64206661696c656400600082015250565b7f6661696c656420746f206d617475726520746865206d61726b65740000000000600082015250565b7f636f756c64206e6f74206275726e000000000000000000000000000000000000600082015250565b7f6d61726b657420616c7265616479206d61747572656400000000000000000000600082015250565b7f63546f6b656e20726564656d7074696f6e206661696c65640000000000000000600082015250565b620038fd8162003528565b81146200390957600080fd5b50565b62003917816200353c565b81146200392357600080fd5b50565b620039318162003568565b81146200393d57600080fd5b5056fe60806040523480156200001157600080fd5b5060405162000d3938038062000d3983398181016040528101906200003791906200020b565b83600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600681905550816003908051906020019062000097929190620000bb565b508060049080519060200190620000b0929190620000bb565b50505050506200048b565b828054620000c9906200037c565b90600052602060002090601f016020900481019282620000ed576000855562000139565b82601f106200010857805160ff191683800117855562000139565b8280016001018555821562000139579182015b82811115620001385782518255916020019190600101906200011b565b5b5090506200014891906200014c565b5090565b5b80821115620001675760008160009055506001016200014d565b5090565b6000620001826200017c84620002d2565b620002a9565b9050828152602081018484840111156200019b57600080fd5b620001a884828562000346565b509392505050565b600081519050620001c18162000457565b92915050565b600082601f830112620001d957600080fd5b8151620001eb8482602086016200016b565b91505092915050565b600081519050620002058162000471565b92915050565b600080600080608085870312156200022257600080fd5b60006200023287828801620001b0565b94505060206200024587828801620001f4565b935050604085015167ffffffffffffffff8111156200026357600080fd5b6200027187828801620001c7565b925050606085015167ffffffffffffffff8111156200028f57600080fd5b6200029d87828801620001c7565b91505092959194509250565b6000620002b5620002c8565b9050620002c38282620003b2565b919050565b6000604051905090565b600067ffffffffffffffff821115620002f057620002ef62000417565b5b620002fb8262000446565b9050602081019050919050565b600062000315826200031c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200036657808201518184015260208101905062000349565b8381111562000376576000848401525b50505050565b600060028204905060018216806200039557607f821691505b60208210811415620003ac57620003ab620003e8565b5b50919050565b620003bd8262000446565b810181811067ffffffffffffffff82111715620003df57620003de62000417565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620004628162000308565b81146200046e57600080fd5b50565b6200047c816200033c565b81146200048857600080fd5b50565b61089e806200049b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063b4c4a4c81161008c578063e541efa211610066578063e541efa214610224578063e7ba677414610255578063ee4db57014610271578063fdfe5f4d146102a1576100cf565b8063b4c4a4c8146101bc578063b9bb928c146101d8578063bba0ad39146101f4576100cf565b8063204f83f9146100d457806323b872dd146100f257806340c10f19146101225780636521b96a146101525780636f307dc31461016e5780639dc29fac1461018c575b600080fd5b6100dc6102bd565b6040516100e991906107c0565b60405180910390f35b61010c60048036038101906101079190610657565b6102c7565b60405161011991906107a5565b60405180910390f35b61013c600480360381019061013791906106a6565b6103c1565b60405161014991906107a5565b60405180910390f35b61016c600480360381019061016791906106e2565b61041f565b005b61017661043c565b6040516101839190610761565b60405180910390f35b6101a660048036038101906101a191906106a6565b610466565b6040516101b391906107a5565b60405180910390f35b6101d660048036038101906101d1919061070b565b6104c3565b005b6101f260048036038101906101ed91906106e2565b6104cd565b005b61020e6004803603810190610209919061062e565b6104ea565b60405161021b91906107c0565b60405180910390f35b61023e6004803603810190610239919061062e565b610502565b60405161024c92919061077c565b60405180910390f35b61026f600480360381019061026a919061062e565b610546565b005b61028b6004803603810190610286919061062e565b61058a565b60405161029891906107c0565b60405180910390f35b6102bb60048036038101906102b691906106e2565b6105a2565b005b6000600654905090565b60006102d16105bf565b83816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281602001818152505080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050600760029054906101000a900460ff169150509392505050565b600081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760019054906101000a900460ff16905092915050565b80600760026101000a81548160ff02191690831515021790555050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900460ff16905092915050565b8060068190555050565b80600760006101000a81548160ff02191690831515021790555050565b60006020528060005260406000206000915090505481565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528060005260406000206000915090505481565b80600760016101000a81548160ff02191690831515021790555050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000813590506105fe81610823565b92915050565b6000813590506106138161083a565b92915050565b60008135905061062881610851565b92915050565b60006020828403121561064057600080fd5b600061064e848285016105ef565b91505092915050565b60008060006060848603121561066c57600080fd5b600061067a868287016105ef565b935050602061068b868287016105ef565b925050604061069c86828701610619565b9150509250925092565b600080604083850312156106b957600080fd5b60006106c7858286016105ef565b92505060206106d885828601610619565b9150509250929050565b6000602082840312156106f457600080fd5b600061070284828501610604565b91505092915050565b60006020828403121561071d57600080fd5b600061072b84828501610619565b91505092915050565b61073d816107db565b82525050565b61074c816107ed565b82525050565b61075b81610819565b82525050565b60006020820190506107766000830184610734565b92915050565b60006040820190506107916000830185610734565b61079e6020830184610752565b9392505050565b60006020820190506107ba6000830184610743565b92915050565b60006020820190506107d56000830184610752565b92915050565b60006107e6826107f9565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61082c816107db565b811461083757600080fd5b50565b610843816107ed565b811461084e57600080fd5b50565b61085a81610819565b811461086557600080fd5b5056fea2646970667358221220e787395d68a9a75e210b6a319824039b39d1fd4888dbf232260ea4ddd145117964736f6c63430008040033608060405234801561001057600080fd5b50604051610b2b380380610b2b833981810160405281019061003291906100ab565b8160058190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610151565b60008151905061009081610123565b92915050565b6000815190506100a58161013a565b92915050565b600080604083850312156100be57600080fd5b60006100cc85828601610096565b92505060206100dd85828601610081565b9150509250929050565b60006100f2826100f9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61012c816100e7565b811461013757600080fd5b50565b61014381610119565b811461014e57600080fd5b50565b6109cb806101606000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636b868d51116100a2578063b7dd348311610071578063b7dd3483146102de578063d0b9d032146102fc578063d6cb2c0d14610318578063da3de9e914610334578063e590c362146103505761010b565b80636b868d511461025657806375d69a3914610274578063a01cfffb14610292578063b4c4a4c8146102c25761010b565b80633dfa1f41116100de5780633dfa1f41146101be5780635c70b7c1146101ee5780635dfe12ac1461020a578063613a28d1146102265761010b565b80630aa93b9b14610110578063177946731461014057806319caf46c14610170578063204f83f9146101a0575b600080fd5b61012a6004803603810190610125919061075b565b610381565b60405161013791906108ed565b60405180910390f35b61015a60048036038101906101559190610784565b610399565b60405161016791906108d2565b60405180910390f35b61018a6004803603810190610185919061075b565b610493565b60405161019791906108ed565b60405180910390f35b6101a86104e0565b6040516101b591906108ed565b60405180910390f35b6101d860048036038101906101d3919061075b565b6104ea565b6040516101e591906108ed565b60405180910390f35b6102086004803603810190610203919061080f565b610502565b005b610224600480360381019061021f919061080f565b61051f565b005b610240600480360381019061023b91906107d3565b61053c565b60405161024d91906108d2565b60405180910390f35b61025e61059a565b60405161026b91906108d2565b60405180910390f35b61027c6105b1565b604051610289919061088e565b60405180910390f35b6102ac60048036038101906102a791906107d3565b6105d7565b6040516102b991906108d2565b60405180910390f35b6102dc60048036038101906102d79190610838565b610634565b005b6102e661063e565b6040516102f3919061088e565b60405180910390f35b6103166004803603810190610311919061080f565b610664565b005b610332600480360381019061032d9190610838565b610681565b005b61034e6004803603810190610349919061080f565b61068b565b005b61036a6004803603810190610365919061075b565b6106a8565b6040516103789291906108a9565b60405180910390f35b60016020528060005260406000206000915090505481565b60006103a36106ec565b83816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281602001818152505080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050600760039054906101000a900460ff169150509392505050565b600081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006549050919050565b6000600554905090565b60006020528060005260406000206000915090505481565b80600760016101000a81548160ff02191690831515021790555050565b80600760026101000a81548160ff02191690831515021790555050565b600081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760029054906101000a900460ff16905092915050565b6000600760009054906101000a900460ff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760019054906101000a900460ff16905092915050565b8060058190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600760036101000a81548160ff02191690831515021790555050565b8060068190555050565b80600760006101000a81548160ff02191690831515021790555050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008135905061072b81610950565b92915050565b60008135905061074081610967565b92915050565b6000813590506107558161097e565b92915050565b60006020828403121561076d57600080fd5b600061077b8482850161071c565b91505092915050565b60008060006060848603121561079957600080fd5b60006107a78682870161071c565b93505060206107b88682870161071c565b92505060406107c986828701610746565b9150509250925092565b600080604083850312156107e657600080fd5b60006107f48582860161071c565b925050602061080585828601610746565b9150509250929050565b60006020828403121561082157600080fd5b600061082f84828501610731565b91505092915050565b60006020828403121561084a57600080fd5b600061085884828501610746565b91505092915050565b61086a81610908565b82525050565b6108798161091a565b82525050565b61088881610946565b82525050565b60006020820190506108a36000830184610861565b92915050565b60006040820190506108be6000830185610861565b6108cb602083018461087f565b9392505050565b60006020820190506108e76000830184610870565b92915050565b6000602082019050610902600083018461087f565b92915050565b600061091382610926565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61095981610908565b811461096457600080fd5b50565b6109708161091a565b811461097b57600080fd5b50565b61098781610946565b811461099257600080fd5b5056fea26469706673582212203ddbf48e1e6ad8054e48ab4b43d64f3984b8eb96fb8b7473e56c4651ab08069864736f6c63430008040033a264697066735822122089df4f0337e3e02a67a845759122f80264b8822cbab2fa4c614a1344629b707964736f6c63430008040033"

// DeployMarketPlace deploys a new Ethereum contract, binding an instance of MarketPlace to it.
func DeployMarketPlace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MarketPlace, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MarketPlaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// MarketPlace is an auto generated Go binding around an Ethereum contract.
type MarketPlace struct {
	MarketPlaceCaller     // Read-only binding to the contract
	MarketPlaceTransactor // Write-only binding to the contract
	MarketPlaceFilterer   // Log filterer for contract events
}

// MarketPlaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketPlaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketPlaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketPlaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketPlaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketPlaceSession struct {
	Contract     *MarketPlace      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketPlaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketPlaceCallerSession struct {
	Contract *MarketPlaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MarketPlaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketPlaceTransactorSession struct {
	Contract     *MarketPlaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MarketPlaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketPlaceRaw struct {
	Contract *MarketPlace // Generic contract binding to access the raw methods on
}

// MarketPlaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketPlaceCallerRaw struct {
	Contract *MarketPlaceCaller // Generic read-only contract binding to access the raw methods on
}

// MarketPlaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketPlaceTransactorRaw struct {
	Contract *MarketPlaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarketPlace creates a new instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlace(address common.Address, backend bind.ContractBackend) (*MarketPlace, error) {
	contract, err := bindMarketPlace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MarketPlace{MarketPlaceCaller: MarketPlaceCaller{contract: contract}, MarketPlaceTransactor: MarketPlaceTransactor{contract: contract}, MarketPlaceFilterer: MarketPlaceFilterer{contract: contract}}, nil
}

// NewMarketPlaceCaller creates a new read-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceCaller(address common.Address, caller bind.ContractCaller) (*MarketPlaceCaller, error) {
	contract, err := bindMarketPlace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCaller{contract: contract}, nil
}

// NewMarketPlaceTransactor creates a new write-only instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketPlaceTransactor, error) {
	contract, err := bindMarketPlace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransactor{contract: contract}, nil
}

// NewMarketPlaceFilterer creates a new log filterer instance of MarketPlace, bound to a specific deployed contract.
func NewMarketPlaceFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketPlaceFilterer, error) {
	contract, err := bindMarketPlace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceFilterer{contract: contract}, nil
}

// bindMarketPlace binds a generic wrapper to an already deployed contract.
func bindMarketPlace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MarketPlaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.MarketPlaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.MarketPlaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MarketPlace *MarketPlaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MarketPlace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MarketPlace *MarketPlaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MarketPlace *MarketPlaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MarketPlace.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Admin() (common.Address, error) {
	return _MarketPlace.Contract.Admin(&_MarketPlace.CallOpts)
}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceCaller) CTokenAddress(opts *bind.CallOpts, a common.Address, m *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "cTokenAddress", a, m)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceSession) CTokenAddress(a common.Address, m *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.CTokenAddress(&_MarketPlace.CallOpts, a, m)
}

// CTokenAddress is a free data retrieval call binding the contract method 0x05e1dc25.
//
// Solidity: function cTokenAddress(address a, uint256 m) view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) CTokenAddress(a common.Address, m *big.Int) (common.Address, error) {
	return _MarketPlace.Contract.CTokenAddress(&_MarketPlace.CallOpts, a, m)
}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr)
func (_MarketPlace *MarketPlaceCaller) Markets(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr  common.Address
	ZcTokenAddr common.Address
	VaultAddr   common.Address
}, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "markets", arg0, arg1)

	outstruct := new(struct {
		CTokenAddr  common.Address
		ZcTokenAddr common.Address
		VaultAddr   common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CTokenAddr = out[0].(common.Address)
	outstruct.ZcTokenAddr = out[1].(common.Address)
	outstruct.VaultAddr = out[2].(common.Address)

	return *outstruct, err

}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr)
func (_MarketPlace *MarketPlaceSession) Markets(arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr  common.Address
	ZcTokenAddr common.Address
	VaultAddr   common.Address
}, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1)
}

// Markets is a free data retrieval call binding the contract method 0x17b3bba7.
//
// Solidity: function markets(address , uint256 ) view returns(address cTokenAddr, address zcTokenAddr, address vaultAddr)
func (_MarketPlace *MarketPlaceCallerSession) Markets(arg0 common.Address, arg1 *big.Int) (struct {
	CTokenAddr  common.Address
	ZcTokenAddr common.Address
	VaultAddr   common.Address
}, error) {
	return _MarketPlace.Contract.Markets(&_MarketPlace.CallOpts, arg0, arg1)
}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCaller) Mature(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "mature", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceSession) Mature(arg0 common.Address, arg1 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Mature(&_MarketPlace.CallOpts, arg0, arg1)
}

// Mature is a free data retrieval call binding the contract method 0x27ee93be.
//
// Solidity: function mature(address , uint256 ) view returns(bool)
func (_MarketPlace *MarketPlaceCallerSession) Mature(arg0 common.Address, arg1 *big.Int) (bool, error) {
	return _MarketPlace.Contract.Mature(&_MarketPlace.CallOpts, arg0, arg1)
}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceCaller) MaturityRate(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "maturityRate", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceSession) MaturityRate(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _MarketPlace.Contract.MaturityRate(&_MarketPlace.CallOpts, arg0, arg1)
}

// MaturityRate is a free data retrieval call binding the contract method 0xc86adf7c.
//
// Solidity: function maturityRate(address , uint256 ) view returns(uint256)
func (_MarketPlace *MarketPlaceCallerSession) MaturityRate(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _MarketPlace.Contract.MaturityRate(&_MarketPlace.CallOpts, arg0, arg1)
}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceCaller) Swivel(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MarketPlace.contract.Call(opts, &out, "swivel")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceSession) Swivel() (common.Address, error) {
	return _MarketPlace.Contract.Swivel(&_MarketPlace.CallOpts)
}

// Swivel is a free data retrieval call binding the contract method 0x012b264a.
//
// Solidity: function swivel() view returns(address)
func (_MarketPlace *MarketPlaceCallerSession) Swivel() (common.Address, error) {
	return _MarketPlace.Contract.Swivel(&_MarketPlace.CallOpts)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x6ce327ec.
//
// Solidity: function createMarket(address u, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CreateMarket(opts *bind.TransactOpts, u common.Address, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "createMarket", u, m, c, n, s)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x6ce327ec.
//
// Solidity: function createMarket(address u, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceSession) CreateMarket(u common.Address, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, u, m, c, n, s)
}

// CreateMarket is a paid mutator transaction binding the contract method 0x6ce327ec.
//
// Solidity: function createMarket(address u, uint256 m, address c, string n, string s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CreateMarket(u common.Address, m *big.Int, c common.Address, n string, s string) (*types.Transaction, error) {
	return _MarketPlace.Contract.CreateMarket(&_MarketPlace.TransactOpts, u, m, c, n, s)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CustodialExit(opts *bind.TransactOpts, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "custodialExit", u, m, z, n, a)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) CustodialExit(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialExit(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialExit is a paid mutator transaction binding the contract method 0x8c6b9b41.
//
// Solidity: function custodialExit(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CustodialExit(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialExit(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) CustodialInitiate(opts *bind.TransactOpts, u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "custodialInitiate", u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) CustodialInitiate(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialInitiate(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// CustodialInitiate is a paid mutator transaction binding the contract method 0xf8e51bcb.
//
// Solidity: function custodialInitiate(address u, uint256 m, address z, address n, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) CustodialInitiate(u common.Address, m *big.Int, z common.Address, n common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.CustodialInitiate(&_MarketPlace.TransactOpts, u, m, z, n, a)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) MatureMarket(opts *bind.TransactOpts, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "matureMarket", u, m)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceSession) MatureMarket(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MatureMarket(&_MarketPlace.TransactOpts, u, m)
}

// MatureMarket is a paid mutator transaction binding the contract method 0x5db0ae58.
//
// Solidity: function matureMarket(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) MatureMarket(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.MatureMarket(&_MarketPlace.TransactOpts, u, m)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) P2pVaultExchange(opts *bind.TransactOpts, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "p2pVaultExchange", u, m, f, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) P2pVaultExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pVaultExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pVaultExchange is a paid mutator transaction binding the contract method 0xbddbfbe4.
//
// Solidity: function p2pVaultExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) P2pVaultExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pVaultExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) P2pZcTokenExchange(opts *bind.TransactOpts, u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "p2pZcTokenExchange", u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) P2pZcTokenExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pZcTokenExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// P2pZcTokenExchange is a paid mutator transaction binding the contract method 0x65a963aa.
//
// Solidity: function p2pZcTokenExchange(address u, uint256 m, address f, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) P2pZcTokenExchange(u common.Address, m *big.Int, f common.Address, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.P2pZcTokenExchange(&_MarketPlace.TransactOpts, u, m, f, t, a)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x40d37cdf.
//
// Solidity: function redeemVaultInterest(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) RedeemVaultInterest(opts *bind.TransactOpts, u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "redeemVaultInterest", u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x40d37cdf.
//
// Solidity: function redeemVaultInterest(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceSession) RedeemVaultInterest(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemVaultInterest(&_MarketPlace.TransactOpts, u, m)
}

// RedeemVaultInterest is a paid mutator transaction binding the contract method 0x40d37cdf.
//
// Solidity: function redeemVaultInterest(address u, uint256 m) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) RedeemVaultInterest(u common.Address, m *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemVaultInterest(&_MarketPlace.TransactOpts, u, m)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x154e0f2e.
//
// Solidity: function redeemZcToken(address u, uint256 m, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) RedeemZcToken(opts *bind.TransactOpts, u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "redeemZcToken", u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x154e0f2e.
//
// Solidity: function redeemZcToken(address u, uint256 m, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) RedeemZcToken(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemZcToken(&_MarketPlace.TransactOpts, u, m, a)
}

// RedeemZcToken is a paid mutator transaction binding the contract method 0x154e0f2e.
//
// Solidity: function redeemZcToken(address u, uint256 m, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) RedeemZcToken(u common.Address, m *big.Int, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.RedeemZcToken(&_MarketPlace.TransactOpts, u, m, a)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) SetSwivelAddress(opts *bind.TransactOpts, s common.Address) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "setSwivelAddress", s)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceSession) SetSwivelAddress(s common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetSwivelAddress(&_MarketPlace.TransactOpts, s)
}

// SetSwivelAddress is a paid mutator transaction binding the contract method 0xe5a2aa62.
//
// Solidity: function setSwivelAddress(address s) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) SetSwivelAddress(s common.Address) (*types.Transaction, error) {
	return _MarketPlace.Contract.SetSwivelAddress(&_MarketPlace.TransactOpts, s)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactor) TransferVaultNotional(opts *bind.TransactOpts, u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.contract.Transact(opts, "transferVaultNotional", u, m, t, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceSession) TransferVaultNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// TransferVaultNotional is a paid mutator transaction binding the contract method 0x5292ecf2.
//
// Solidity: function transferVaultNotional(address u, uint256 m, address t, uint256 a) returns(bool)
func (_MarketPlace *MarketPlaceTransactorSession) TransferVaultNotional(u common.Address, m *big.Int, t common.Address, a *big.Int) (*types.Transaction, error) {
	return _MarketPlace.Contract.TransferVaultNotional(&_MarketPlace.TransactOpts, u, m, t, a)
}

// MarketPlaceCreateIterator is returned from FilterCreate and is used to iterate over the raw logs and unpacked data for Create events raised by the MarketPlace contract.
type MarketPlaceCreateIterator struct {
	Event *MarketPlaceCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCreate represents a Create event raised by the MarketPlace contract.
type MarketPlaceCreate struct {
	Underlying common.Address
	Maturity   *big.Int
	CToken     common.Address
	ZcToken    common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCreate is a free log retrieval operation binding the contract event 0x5c8943d544aa04815bd907fde89a7a9156cd14eb9ffe4f5c3b1277d7557a2d22.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken)
func (_MarketPlace *MarketPlaceFilterer) FilterCreate(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCreateIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "Create", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCreateIterator{contract: _MarketPlace.contract, event: "Create", logs: logs, sub: sub}, nil
}

// WatchCreate is a free log subscription operation binding the contract event 0x5c8943d544aa04815bd907fde89a7a9156cd14eb9ffe4f5c3b1277d7557a2d22.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken)
func (_MarketPlace *MarketPlaceFilterer) WatchCreate(opts *bind.WatchOpts, sink chan<- *MarketPlaceCreate, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "Create", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCreate)
				if err := _MarketPlace.contract.UnpackLog(event, "Create", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreate is a log parse operation binding the contract event 0x5c8943d544aa04815bd907fde89a7a9156cd14eb9ffe4f5c3b1277d7557a2d22.
//
// Solidity: event Create(address indexed underlying, uint256 indexed maturity, address cToken, address zcToken)
func (_MarketPlace *MarketPlaceFilterer) ParseCreate(log types.Log) (*MarketPlaceCreate, error) {
	event := new(MarketPlaceCreate)
	if err := _MarketPlace.contract.UnpackLog(event, "Create", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceCustodialExitIterator is returned from FilterCustodialExit and is used to iterate over the raw logs and unpacked data for CustodialExit events raised by the MarketPlace contract.
type MarketPlaceCustodialExitIterator struct {
	Event *MarketPlaceCustodialExit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCustodialExitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCustodialExit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCustodialExit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCustodialExitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCustodialExitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCustodialExit represents a CustodialExit event raised by the MarketPlace contract.
type MarketPlaceCustodialExit struct {
	Underlying common.Address
	Maturity   *big.Int
	ZcTarget   common.Address
	NTarget    common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCustodialExit is a free log retrieval operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterCustodialExit(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCustodialExitIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CustodialExit", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCustodialExitIterator{contract: _MarketPlace.contract, event: "CustodialExit", logs: logs, sub: sub}, nil
}

// WatchCustodialExit is a free log subscription operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchCustodialExit(opts *bind.WatchOpts, sink chan<- *MarketPlaceCustodialExit, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CustodialExit", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCustodialExit)
				if err := _MarketPlace.contract.UnpackLog(event, "CustodialExit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodialExit is a log parse operation binding the contract event 0x219a55ae9a5a1822159d55db6dd594a28be30b02c0d18a71469ef28030b3fb59.
//
// Solidity: event CustodialExit(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseCustodialExit(log types.Log) (*MarketPlaceCustodialExit, error) {
	event := new(MarketPlaceCustodialExit)
	if err := _MarketPlace.contract.UnpackLog(event, "CustodialExit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceCustodialInitiateIterator is returned from FilterCustodialInitiate and is used to iterate over the raw logs and unpacked data for CustodialInitiate events raised by the MarketPlace contract.
type MarketPlaceCustodialInitiateIterator struct {
	Event *MarketPlaceCustodialInitiate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceCustodialInitiateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceCustodialInitiate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceCustodialInitiate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceCustodialInitiateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceCustodialInitiateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceCustodialInitiate represents a CustodialInitiate event raised by the MarketPlace contract.
type MarketPlaceCustodialInitiate struct {
	Underlying common.Address
	Maturity   *big.Int
	ZcTarget   common.Address
	NTarget    common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCustodialInitiate is a free log retrieval operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterCustodialInitiate(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceCustodialInitiateIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "CustodialInitiate", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceCustodialInitiateIterator{contract: _MarketPlace.contract, event: "CustodialInitiate", logs: logs, sub: sub}, nil
}

// WatchCustodialInitiate is a free log subscription operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchCustodialInitiate(opts *bind.WatchOpts, sink chan<- *MarketPlaceCustodialInitiate, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "CustodialInitiate", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceCustodialInitiate)
				if err := _MarketPlace.contract.UnpackLog(event, "CustodialInitiate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCustodialInitiate is a log parse operation binding the contract event 0x8dad4d03bd4209aa6dc2bea238510998bf39bb034bc9c20d52f0bd241fc0c516.
//
// Solidity: event CustodialInitiate(address indexed underlying, uint256 indexed maturity, address zcTarget, address nTarget, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseCustodialInitiate(log types.Log) (*MarketPlaceCustodialInitiate, error) {
	event := new(MarketPlaceCustodialInitiate)
	if err := _MarketPlace.contract.UnpackLog(event, "CustodialInitiate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceMatureIterator is returned from FilterMature and is used to iterate over the raw logs and unpacked data for Mature events raised by the MarketPlace contract.
type MarketPlaceMatureIterator struct {
	Event *MarketPlaceMature // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceMatureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceMature)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceMature)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceMatureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceMatureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceMature represents a Mature event raised by the MarketPlace contract.
type MarketPlaceMature struct {
	Underlying   common.Address
	Maturity     *big.Int
	MaturityRate *big.Int
	Matured      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMature is a free log retrieval operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) FilterMature(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceMatureIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "Mature", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceMatureIterator{contract: _MarketPlace.contract, event: "Mature", logs: logs, sub: sub}, nil
}

// WatchMature is a free log subscription operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) WatchMature(opts *bind.WatchOpts, sink chan<- *MarketPlaceMature, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "Mature", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceMature)
				if err := _MarketPlace.contract.UnpackLog(event, "Mature", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMature is a log parse operation binding the contract event 0x0080e09d7b4544aa5a923873be1df3e31945593d40cb1c874d99259ec3ac43a4.
//
// Solidity: event Mature(address indexed underlying, uint256 indexed maturity, uint256 maturityRate, uint256 matured)
func (_MarketPlace *MarketPlaceFilterer) ParseMature(log types.Log) (*MarketPlaceMature, error) {
	event := new(MarketPlaceMature)
	if err := _MarketPlace.contract.UnpackLog(event, "Mature", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceP2pVaultExchangeIterator is returned from FilterP2pVaultExchange and is used to iterate over the raw logs and unpacked data for P2pVaultExchange events raised by the MarketPlace contract.
type MarketPlaceP2pVaultExchangeIterator struct {
	Event *MarketPlaceP2pVaultExchange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceP2pVaultExchangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceP2pVaultExchange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceP2pVaultExchange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceP2pVaultExchangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceP2pVaultExchangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceP2pVaultExchange represents a P2pVaultExchange event raised by the MarketPlace contract.
type MarketPlaceP2pVaultExchange struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterP2pVaultExchange is a free log retrieval operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterP2pVaultExchange(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceP2pVaultExchangeIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "P2pVaultExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceP2pVaultExchangeIterator{contract: _MarketPlace.contract, event: "P2pVaultExchange", logs: logs, sub: sub}, nil
}

// WatchP2pVaultExchange is a free log subscription operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchP2pVaultExchange(opts *bind.WatchOpts, sink chan<- *MarketPlaceP2pVaultExchange, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "P2pVaultExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceP2pVaultExchange)
				if err := _MarketPlace.contract.UnpackLog(event, "P2pVaultExchange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseP2pVaultExchange is a log parse operation binding the contract event 0x31d266c2b6075063717026bd27ba8bb527366457893dc211091b2e1d9713f152.
//
// Solidity: event P2pVaultExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseP2pVaultExchange(log types.Log) (*MarketPlaceP2pVaultExchange, error) {
	event := new(MarketPlaceP2pVaultExchange)
	if err := _MarketPlace.contract.UnpackLog(event, "P2pVaultExchange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceP2pZcTokenExchangeIterator is returned from FilterP2pZcTokenExchange and is used to iterate over the raw logs and unpacked data for P2pZcTokenExchange events raised by the MarketPlace contract.
type MarketPlaceP2pZcTokenExchangeIterator struct {
	Event *MarketPlaceP2pZcTokenExchange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceP2pZcTokenExchange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceP2pZcTokenExchange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceP2pZcTokenExchangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceP2pZcTokenExchange represents a P2pZcTokenExchange event raised by the MarketPlace contract.
type MarketPlaceP2pZcTokenExchange struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterP2pZcTokenExchange is a free log retrieval operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterP2pZcTokenExchange(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceP2pZcTokenExchangeIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "P2pZcTokenExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceP2pZcTokenExchangeIterator{contract: _MarketPlace.contract, event: "P2pZcTokenExchange", logs: logs, sub: sub}, nil
}

// WatchP2pZcTokenExchange is a free log subscription operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchP2pZcTokenExchange(opts *bind.WatchOpts, sink chan<- *MarketPlaceP2pZcTokenExchange, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "P2pZcTokenExchange", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceP2pZcTokenExchange)
				if err := _MarketPlace.contract.UnpackLog(event, "P2pZcTokenExchange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseP2pZcTokenExchange is a log parse operation binding the contract event 0x86ac24e4ee753e21fb51afa847265cb350e500593f3204057e40079c3ef54422.
//
// Solidity: event P2pZcTokenExchange(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseP2pZcTokenExchange(log types.Log) (*MarketPlaceP2pZcTokenExchange, error) {
	event := new(MarketPlaceP2pZcTokenExchange)
	if err := _MarketPlace.contract.UnpackLog(event, "P2pZcTokenExchange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceRedeemVaultInterestIterator is returned from FilterRedeemVaultInterest and is used to iterate over the raw logs and unpacked data for RedeemVaultInterest events raised by the MarketPlace contract.
type MarketPlaceRedeemVaultInterestIterator struct {
	Event *MarketPlaceRedeemVaultInterest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceRedeemVaultInterestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceRedeemVaultInterest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceRedeemVaultInterest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceRedeemVaultInterestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceRedeemVaultInterestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceRedeemVaultInterest represents a RedeemVaultInterest event raised by the MarketPlace contract.
type MarketPlaceRedeemVaultInterest struct {
	Underlying common.Address
	Maturity   *big.Int
	Sender     common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemVaultInterest is a free log retrieval operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) FilterRedeemVaultInterest(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int, sender []common.Address) (*MarketPlaceRedeemVaultInterestIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "RedeemVaultInterest", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceRedeemVaultInterestIterator{contract: _MarketPlace.contract, event: "RedeemVaultInterest", logs: logs, sub: sub}, nil
}

// WatchRedeemVaultInterest is a free log subscription operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) WatchRedeemVaultInterest(opts *bind.WatchOpts, sink chan<- *MarketPlaceRedeemVaultInterest, underlying []common.Address, maturity []*big.Int, sender []common.Address) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "RedeemVaultInterest", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceRedeemVaultInterest)
				if err := _MarketPlace.contract.UnpackLog(event, "RedeemVaultInterest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemVaultInterest is a log parse operation binding the contract event 0x646390328280b54978a07e7bd72dd9b3f9515286196024882943a96d5c279874.
//
// Solidity: event RedeemVaultInterest(address indexed underlying, uint256 indexed maturity, address indexed sender)
func (_MarketPlace *MarketPlaceFilterer) ParseRedeemVaultInterest(log types.Log) (*MarketPlaceRedeemVaultInterest, error) {
	event := new(MarketPlaceRedeemVaultInterest)
	if err := _MarketPlace.contract.UnpackLog(event, "RedeemVaultInterest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceRedeemZcTokenIterator is returned from FilterRedeemZcToken and is used to iterate over the raw logs and unpacked data for RedeemZcToken events raised by the MarketPlace contract.
type MarketPlaceRedeemZcTokenIterator struct {
	Event *MarketPlaceRedeemZcToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceRedeemZcTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceRedeemZcToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceRedeemZcToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceRedeemZcTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceRedeemZcTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceRedeemZcToken represents a RedeemZcToken event raised by the MarketPlace contract.
type MarketPlaceRedeemZcToken struct {
	Underlying common.Address
	Maturity   *big.Int
	Sender     common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemZcToken is a free log retrieval operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterRedeemZcToken(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int, sender []common.Address) (*MarketPlaceRedeemZcTokenIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "RedeemZcToken", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceRedeemZcTokenIterator{contract: _MarketPlace.contract, event: "RedeemZcToken", logs: logs, sub: sub}, nil
}

// WatchRedeemZcToken is a free log subscription operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchRedeemZcToken(opts *bind.WatchOpts, sink chan<- *MarketPlaceRedeemZcToken, underlying []common.Address, maturity []*big.Int, sender []common.Address) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "RedeemZcToken", underlyingRule, maturityRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceRedeemZcToken)
				if err := _MarketPlace.contract.UnpackLog(event, "RedeemZcToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemZcToken is a log parse operation binding the contract event 0x49dc20daa9f95793b82245100affbf87ad23d1761bdef94975542564f4023e45.
//
// Solidity: event RedeemZcToken(address indexed underlying, uint256 indexed maturity, address indexed sender, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseRedeemZcToken(log types.Log) (*MarketPlaceRedeemZcToken, error) {
	event := new(MarketPlaceRedeemZcToken)
	if err := _MarketPlace.contract.UnpackLog(event, "RedeemZcToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketPlaceTransferVaultNotionalIterator is returned from FilterTransferVaultNotional and is used to iterate over the raw logs and unpacked data for TransferVaultNotional events raised by the MarketPlace contract.
type MarketPlaceTransferVaultNotionalIterator struct {
	Event *MarketPlaceTransferVaultNotional // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketPlaceTransferVaultNotionalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketPlaceTransferVaultNotional)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketPlaceTransferVaultNotional)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketPlaceTransferVaultNotionalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketPlaceTransferVaultNotionalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketPlaceTransferVaultNotional represents a TransferVaultNotional event raised by the MarketPlace contract.
type MarketPlaceTransferVaultNotional struct {
	Underlying common.Address
	Maturity   *big.Int
	From       common.Address
	To         common.Address
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransferVaultNotional is a free log retrieval operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) FilterTransferVaultNotional(opts *bind.FilterOpts, underlying []common.Address, maturity []*big.Int) (*MarketPlaceTransferVaultNotionalIterator, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.FilterLogs(opts, "TransferVaultNotional", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return &MarketPlaceTransferVaultNotionalIterator{contract: _MarketPlace.contract, event: "TransferVaultNotional", logs: logs, sub: sub}, nil
}

// WatchTransferVaultNotional is a free log subscription operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) WatchTransferVaultNotional(opts *bind.WatchOpts, sink chan<- *MarketPlaceTransferVaultNotional, underlying []common.Address, maturity []*big.Int) (event.Subscription, error) {

	var underlyingRule []interface{}
	for _, underlyingItem := range underlying {
		underlyingRule = append(underlyingRule, underlyingItem)
	}
	var maturityRule []interface{}
	for _, maturityItem := range maturity {
		maturityRule = append(maturityRule, maturityItem)
	}

	logs, sub, err := _MarketPlace.contract.WatchLogs(opts, "TransferVaultNotional", underlyingRule, maturityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketPlaceTransferVaultNotional)
				if err := _MarketPlace.contract.UnpackLog(event, "TransferVaultNotional", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferVaultNotional is a log parse operation binding the contract event 0x1d06fe04c445804d7b460d2d5f2fee7c4cc5ba874f3311d2768f849c66cf3098.
//
// Solidity: event TransferVaultNotional(address indexed underlying, uint256 indexed maturity, address from, address to, uint256 amount)
func (_MarketPlace *MarketPlaceFilterer) ParseTransferVaultNotional(log types.Log) (*MarketPlaceTransferVaultNotional, error) {
	event := new(MarketPlaceTransferVaultNotional)
	if err := _MarketPlace.contract.UnpackLog(event, "TransferVaultNotional", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
