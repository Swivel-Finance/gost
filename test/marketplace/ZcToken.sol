// SPDX-License-Identifier: UNLICENSED

/**
  ZcToken is a mock which records arguments passed to its methods as well as
  provides setters allowing us to dictate method return values
*/

pragma solidity 0.8.0;

contract ZcToken {
  // don't feel the need to setup return/returns for the strings...
  string name;
  string symbol;

  address private underlyingReturn;
  uint256 private maturityReturn;

  // mapping of arguments sent to burn. key is the passed in address.
  mapping (address => uint256) public burnCalled;
  // a boolean flag which allows us to dictate the return of burn().
  bool private burnReturn;

  /// @param u Underlying
  /// @param m Maturity
  /// @param n Name
  /// @param s Symbol
  constructor(address u, uint256 m, string memory n, string memory s) {
    // we can set the privates in the constructor as well...
    underlyingReturn = u;
    maturityReturn = m;

    name = n;
    symbol = s;
  }

  function burnReturns(bool b) public {
    burnReturn = b;
  }

  function burn(address f, uint256 a) public returns(bool) {
    burnCalled[f] = a;
    return burnReturn;
  }

  function underlyingReturns(address u) public {
    underlyingReturn = u;
  }
  
  // override what would be the autogenerated getter...
  function underlying() public view returns (address) {
    return underlyingReturn;
  }

  function maturityReturns(uint256 n) public {
    maturityReturn = n;
  }
  
  // override what would be the autogenerated getter...
  function maturity() public view returns (uint256) {
    return maturityReturn;
  }
}
