// SPDX-License-Identifier: UNLICENSED

/**
  VaultTracker is a mock which records arguments passed to its methods as well as
  provides setters allowing us to dictate method return values
*/

pragma solidity 0.8.4;

contract VaultTracker {

  struct TransferNotionalFromArgs {
    address to;
    uint256 amount;
  }

  struct TransferNotionalArgs {
    address to;
    uint256 amount;
  }

  // can just be default as its not needed to be exposed...
  address public cTokenAddr;
  // 'bs' vars avoid compiler warnings that we don't want to surpress
  address public bsAddr;
  
  uint256 private maturityReturn;

  bool private matureVaultReturn;

  uint256 private redeemInterestReturn;

  // mapping of arguments sent to addNotional. key is the passed in address.
  mapping (address => uint256) public addNotionalCalled;
  // a boolean flag which allows us to dictate the return of addNotional().
  bool private addNotionalReturn;

  // mapping of arguments sent to removeNotional. key is the passed in address.
  mapping (address => uint256) public removeNotionalCalled;
  // a boolean flag which allows us to dictate the return of removeNotional().
  bool private removeNotionalReturn;

  // mapping of arguments sent to transferNotionalFrom. key is the passed in address.
  mapping (address => TransferNotionalFromArgs) public transferNotionalFromCalled;
  mapping (address => TransferNotionalArgs) public transferNotionalCalled;
  // a boolean flag which allows us to dictate the return of transferNotionalFrom().
  bool private transferNotionalFromReturn;
  bool private transferNotionalReturn;

  /// @param m Maturity
  /// @param c C Token Address
  constructor(uint256 m, address c) {
    // we can set the privates in the constructor as well...
    maturityReturn = m;
    cTokenAddr = c;
  }

  function redeemInterestReturns(uint256 a) public {
    redeemInterestReturn = a;
  }

  function redeemInterest(address o) public returns (uint256) {
    bsAddr = o;
    return redeemInterestReturn;
  }

  function maturityReturns(uint256 n) public {
    maturityReturn = n;
  }

  // override what would be the autogenerated getter...
  function maturity() public view returns (uint256) {
    return maturityReturn;
  }

  function matureVault() public view returns (bool) {
    return matureVaultReturn;
  }

  function matureVaultReturns(bool m) public {
    matureVaultReturn = m;
  }

  function addNotionalReturns(bool n) public {
    addNotionalReturn = n;
  }

  function addNotional(address o, uint256 a) public returns (bool) {
    addNotionalCalled[o] = a;
    return addNotionalReturn;
  }

  function removeNotionalReturns(bool n) public {
    removeNotionalReturn = n;
  }

  function removeNotional(address o, uint256 a) public returns (bool) {
    removeNotionalCalled[o] = a;
    return removeNotionalReturn;
  }

  function transferNotionalFromReturns(bool b) public {
    transferNotionalFromReturn = b;
  }

  function transferNotionalFrom(address f, address t, uint256 a) public returns (bool) {
    TransferNotionalFromArgs memory args;
    args.to = t;
    args.amount = a;
    transferNotionalFromCalled[f] = args;
    return transferNotionalFromReturn;
  }

  function transferNotionalReturns(bool b) public {
    transferNotionalReturn = b;
  }

  function transferNotional(address f, address t, uint256 a) public returns (bool) {
    TransferNotionalArgs memory args;
    args.to = t;
    args.amount = a;
    transferNotionalCalled[f] = args;
    return transferNotionalReturn;
  }
}
